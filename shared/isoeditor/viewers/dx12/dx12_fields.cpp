#include "dx12_fields.h"
#include "dx12\dx12_record.h"

using namespace	iso;

#undef NULL
#undef GENERIC_READ
#undef OPAQUE

template<> static constexpr bool field_is_struct<D3D12_GPU_VIRTUAL_ADDRESS2> = false;
template<> struct field_names<D3D12_GPU_VIRTUAL_ADDRESS2>	: field_customs<D3D12_GPU_VIRTUAL_ADDRESS2>		{};

MAKE_PREFIXED_BIT_ENUMS(D3D12_BUFFER_SRV_FLAGS, D3D12_BUFFER_SRV_FLAG_,
	NONE,									//0,
	RAW										//1
);

field D3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer[] = {
	{"Slot",					0,	32, 0,0,	0},
	0,
};
field D3D12_INDIRECT_ARGUMENT_DESC_Constant[] = {
	{"RootParameterIndex",		0,	32, 0,0,	0},
	{"DestOffsetIn32BitValues",	32, 32, 0,0,	0},
	{"Num32BitValuesToSet",		64, 32, 0,0,	0},
	0,
};
field D3D12_INDIRECT_ARGUMENT_DESC_View[] = {
	{"RootParameterIndex",		0,	32, 0,0,	0},
	0,
};

field* indirect_argument_union[] = {
	0,
	0,
	0,
	D3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer,
	0,
	D3D12_INDIRECT_ARGUMENT_DESC_Constant,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	0,
	0,
};

MAKE_PREFIXED_ENUMS(D3D12_INDIRECT_ARGUMENT_TYPE, D3D12_INDIRECT_ARGUMENT_TYPE_,
	DRAW,						//0,
	DRAW_INDEXED,				//1,
	DISPATCH,					//2,
	VERTEX_BUFFER_VIEW,			//3,
	INDEX_BUFFER_VIEW,			//4,
	CONSTANT,					//5,
	CONSTANT_BUFFER_VIEW,		//6,
	SHADER_RESOURCE_VIEW,		//7,
	UNORDERED_ACCESS_VIEW,		//8
	DISPATCH_RAYS,				//9
	DISPATCH_MESH,				//10
);

MAKE_PREFIXED_ENUMS(D3D12_AUTO_BREADCRUMB_OP,D3D12_AUTO_BREADCRUMB_OP_,
	SETMARKER,
	BEGINEVENT,
	ENDEVENT,
	DRAWINSTANCED,
	DRAWINDEXEDINSTANCED,
	EXECUTEINDIRECT,
	DISPATCH,
	COPYBUFFERREGION,
	COPYTEXTUREREGION,
	COPYRESOURCE,
	COPYTILES,
	RESOLVESUBRESOURCE,
	CLEARRENDERTARGETVIEW,
	CLEARUNORDEREDACCESSVIEW,
	CLEARDEPTHSTENCILVIEW,
	RESOURCEBARRIER,
	EXECUTEBUNDLE,
	PRESENT,
	RESOLVEQUERYDATA,
	BEGINSUBMISSION,
	ENDSUBMISSION,
	DECODEFRAME,
	PROCESSFRAMES,
	ATOMICCOPYBUFFERUINT,
	ATOMICCOPYBUFFERUINT64,
	RESOLVESUBRESOURCEREGION,
	WRITEBUFFERIMMEDIATE,
	DECODEFRAME1,
	SETPROTECTEDRESOURCESESSION,
	DECODEFRAME2,
	PROCESSFRAMES1,
	BUILDRAYTRACINGACCELERATIONSTRUCTURE,
	EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO,
	COPYRAYTRACINGACCELERATIONSTRUCTURE,
	DISPATCHRAYS,
	INITIALIZEMETACOMMAND,
	EXECUTEMETACOMMAND,
	ESTIMATEMOTION,
	RESOLVEMOTIONVECTORHEAP,
	SETPIPELINESTATE1,
	INITIALIZEEXTENSIONCOMMAND,
	EXECUTEEXTENSIONCOMMAND,
	DISPATCHMESH,
);

template<> field fields<D3D12_INDIRECT_ARGUMENT_DESC>::f[]	= {
#undef S
#define	S D3D12_INDIRECT_ARGUMENT_DESC
	_MAKE_FIELD(S,Type)
	{0, 32, 0, 0, 1, (const char**)indirect_argument_union},
	TERMINATOR
};

MAKE_FIELDS(D3D12_BUFFER_SRV,			FirstElement, NumElements, StructureByteStride, Flags);
MAKE_FIELDS(D3D12_TEX1D_SRV,			MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX1D_ARRAY_SRV,		MostDetailedMip, MipLevels, FirstArraySlice, ArraySize, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2D_SRV,			MostDetailedMip, MipLevels, PlaneSlice, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2D_ARRAY_SRV,		MostDetailedMip, MipLevels, FirstArraySlice, ArraySize, PlaneSlice, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX3D_SRV,			MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEXCUBE_SRV,			MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEXCUBE_ARRAY_SRV,	MostDetailedMip, MipLevels, First2DArrayFace, NumCubes, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2DMS_SRV,			UnusedField_NothingToDefine);
MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_SRV,	FirstArraySlice, ArraySize);

MAKE_PREFIXED_ENUMS(D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_TYPE_,
	DIRECT,						//0,
	BUNDLE,						//1,
	COMPUTE,					//2,
	COPY						//3
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_COMMAND_QUEUE_FLAGS, D3D12_COMMAND_QUEUE_FLAG_,
	NONE,						//0,
	DISABLE_GPU_TIMEOUT			//1
);


MAKE_PREFIXED_VALUE_ENUMS(D3D12_COMMAND_QUEUE_PRIORITY, D3D12_COMMAND_QUEUE_PRIORITY_,
	NORMAL,
	HIGH
);

MAKE_FIELDS(D3D12_COMMAND_QUEUE_DESC, Type, Priority, Flags, NodeMask);

MAKE_PREFIXED_ENUMS(D3D12_PRIMITIVE_TOPOLOGY_TYPE, D3D12_PRIMITIVE_TOPOLOGY_TYPE_,
	UNDEFINED,					//0,
	POINT,						//1,
	LINE,						//2,
	TRIANGLE,					//3,
	PATCH						//4
);

MAKE_PREFIXED_ENUMS(D3D12_INPUT_CLASSIFICATION, D3D12_INPUT_CLASSIFICATION_,
	PER_VERTEX_DATA,			//0,
	PER_INSTANCE_DATA			//1
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_VIEW_INSTANCING_FLAGS, D3D12_VIEW_INSTANCING_FLAG_,
	NONE,							//0
	ENABLE_VIEW_INSTANCE_MASKING	//1
);

MAKE_FIELDS(D3D12_VIEW_INSTANCE_LOCATION, ViewportArrayIndex, RenderTargetArrayIndex);
MAKE_FIELDS(D3D12_VIEW_INSTANCING_DESC, ViewInstanceCount, pViewInstanceLocations, Flags);


MAKE_PREFIXED_ENUMS(D3D12_FILL_MODE, D3D12_FILL_MODE_,
	0,
	0,
	WIREFRAME,						//2,
	SOLID							//3
);

MAKE_PREFIXED_ENUMS(D3D12_CULL_MODE, D3D12_CULL_MODE_,
	0,
	NONE,							//1,
	FRONT,							//2,
	BACK							//3
);

//MAKE_FIELDS(CommandRange, commandlist, start, end);
template<> field fields<CommandRange>::f[]	= {
	{"commandlist", 0, 64, field::MODE_CUSTOM, 0, (const char**)fields<CommandRange>::f},
	field::terminator<CommandRange>(),
};

MAKE_FIELDS(D3D12_INPUT_ELEMENT_DESC, SemanticName, SemanticIndex, Format, InputSlot, AlignedByteOffset, InputSlotClass, InstanceDataStepRate);
MAKE_FIELDS(D3D12_SO_DECLARATION_ENTRY, Stream, SemanticName, SemanticIndex, StartComponent, ComponentCount, OutputSlot);

MAKE_FIELDS2(D3D12_STREAM_OUTPUT_DESC, C(1, pSODeclaration), (NumEntries), C(3, pBufferStrides), (NumStrides), (RasterizedStream));
MAKE_FIELDS2(D3D12_INPUT_LAYOUT_DESC, C(1, pInputElementDescs), (NumElements));
MAKE_FIELDS2(D3D12_COMMAND_SIGNATURE_DESC, (ByteStride), (NumArgumentDescs), C(1, pArgumentDescs), (NodeMask));

MAKE_FIELDS(D3D12_VIEWPORT, TopLeftX, TopLeftY, Width, Height, MinDepth, MaxDepth);
MAKE_FIELDS(RECT, left, top, right, bottom);
MAKE_FIELDS(D3D12_BOX, left, top, front, right, bottom, back);

MAKE_PREFIXED_ENUMS(D3D12_COMPARISON_FUNC, D3D12_COMPARISON_FUNC_,
	0,
	NEVER,			//1,
	LESS,			//2,
	EQUAL,			//3,
	LESS_EQUAL,		//4,
	GREATER,		//5,
	NOT_EQUAL,		//6,
	GREATER_EQUAL,	//7,
	ALWAYS			//8
);

MAKE_PREFIXED_ENUMS(D3D12_DEPTH_WRITE_MASK, D3D12_DEPTH_WRITE_MASK_,
	ZERO,			//0,
	ALL				//1
);

MAKE_PREFIXED_ENUMS(D3D12_STENCIL_OP, D3D12_STENCIL_OP_,
	0,
	KEEP,			//1,
	ZERO,			//2,
	REPLACE,		//3,
	INCR_SAT,		//4,
	DECR_SAT,		//5,
	INVERT,			//6,
	INCR,			//7,
	DECR			//8
);

MAKE_PREFIXED_ENUMS(D3D12_SHADING_RATE, D3D12_SHADING_RATE_,
	1X1,			//0,
	1X2,			//0x1,
	0,
	0,
	2X1,			//0x4,
	2X2,			//0x5,
	2X4,			//0x6,
	0,
	0,
	4X2,			//0x9,
	4X4				//0xa
);

MAKE_PREFIXED_ENUMS(D3D12_SHADING_RATE_COMBINER, D3D12_SHADING_RATE_COMBINER_,
	PASSTHROUGH,	// 0,
	OVERRIDE,		// 1,
	MIN,			// 2,
	MAX,			// 3,
	SUM				// 4
);

MAKE_FIELDS(D3D12_DEPTH_STENCILOP_DESC, StencilFailOp, StencilDepthFailOp, StencilPassOp, StencilFunc);
MAKE_FIELDS(D3D12_DEPTH_STENCIL_DESC, DepthEnable, DepthWriteMask, DepthFunc, StencilEnable, StencilReadMask, StencilWriteMask, FrontFace, BackFace);
MAKE_FIELDS(D3D12_DEPTH_STENCIL_DESC1, DepthEnable, DepthWriteMask, DepthFunc, StencilEnable, StencilReadMask, StencilWriteMask, FrontFace, BackFace, DepthBoundsTestEnable);

MAKE_PREFIXED_ENUMS(D3D12_BLEND, D3D12_BLEND_,
	0,
	ZERO,					//1,
	ONE,					//2,
	SRC_COLOR,				//3,
	INV_SRC_COLOR,			//4,
	SRC_ALPHA,				//5,
	INV_SRC_ALPHA,			//6,
	DEST_ALPHA,				//7,
	INV_DEST_ALPHA,			//8,
	DEST_COLOR,				//9,
	INV_DEST_COLOR,			//10,
	SRC_ALPHA_SAT,			//11,
	0,
	0,
	BLEND_FACTOR,			//14,
	INV_BLEND_FACTOR,		//15,
	SRC1_COLOR,				//16,
	INV_SRC1_COLOR,			//17,
	SRC1_ALPHA,				//18,
	INV_SRC1_ALPHA			//19
);

MAKE_PREFIXED_ENUMS(D3D12_BLEND_OP, D3D12_BLEND_OP_,
	0,
	ADD,					//1,
	SUBTRACT,				//2,
	REV_SUBTRACT,			//3,
	MIN,					//4,
	MAX						//5
);

MAKE_PREFIXED_VALUE_ENUMS(D3D12_COLOR_WRITE_ENABLE, D3D12_COLOR_WRITE_ENABLE_,
	RED,
	GREEN,
	BLUE,
	ALPHA
);

MAKE_PREFIXED_ENUMS(D3D12_LOGIC_OP, D3D12_LOGIC_OP_,
	CLEAR,					//0,
	SET,
	COPY,
	COPY_INVERTED,
	NOOP,
	INVERT,
	AND,
	NAND,
	OR,
	NOR,
	XOR,
	EQUIV,
	AND_REVERSE,
	AND_INVERTED,
	OR_REVERSE,
	OR_INVERTED
);

MAKE_FIELDS(D3D12_RENDER_TARGET_BLEND_DESC, BlendEnable, LogicOpEnable, SrcBlend, DestBlend, BlendOp, SrcBlendAlpha, DestBlendAlpha, BlendOpAlpha, LogicOp, RenderTargetWriteMask);
MAKE_FIELDS(D3D12_BLEND_DESC, AlphaToCoverageEnable, IndependentBlendEnable, RenderTarget);

MAKE_PREFIXED_ENUMS(D3D12_CONSERVATIVE_RASTERIZATION_MODE, D3D12_CONSERVATIVE_RASTERIZATION_MODE_,
	OFF,					//0,
	ON						//1
);

MAKE_FIELDS(D3D12_RASTERIZER_DESC, FillMode, CullMode, FrontCounterClockwise, DepthBias, DepthBiasClamp, SlopeScaledDepthBias, DepthClipEnable, MultisampleEnable, AntialiasedLineEnable, ForcedSampleCount, ConservativeRaster);

template<> field fields<D3D12_SHADER_BYTECODE>::f[] = {
#undef S
#define	S D3D12_SHADER_BYTECODE
	{"pShaderBytecode", 0, 64, field::MODE_CUSTOM, 0, sCustom},
//	_MAKE_FIELD(S,pShaderBytecode)
	_MAKE_FIELD(S,BytecodeLength)
	TERMINATOR,
};

MAKE_PREFIXED_ENUMS(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE, D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_,
	DISABLED,					//0,
	0xFFFF,						//1,
	0xFFFFFFFF					//2
);

MAKE_FIELDS(D3D12_CACHED_PIPELINE_STATE, pCachedBlob, CachedBlobSizeInBytes);

MAKE_PREFIXED_BIT_ENUMS(D3D12_PIPELINE_STATE_FLAGS, D3D12_PIPELINE_STATE_FLAG_,
	NONE,						//0,
	TOOL_DEBUG					//1
);

MAKE_PREFIXED_ENUMS(D3D12_HEAP_TYPE, D3D12_HEAP_TYPE_,
	0,
	DEFAULT,					//1,
	UPLOAD,						//2,
	READBACK,					//3,
	CUSTOM						//4
);

MAKE_PREFIXED_ENUMS(D3D12_CPU_PAGE_PROPERTY, D3D12_CPU_PAGE_PROPERTY_,
	UNKNOWN,					//0,
	NOT_AVAILABLE,				//1,
	WRITE_COMBINE,				//2,
	WRITE_BACK					//3
);

MAKE_PREFIXED_ENUMS(D3D12_MEMORY_POOL, D3D12_MEMORY_POOL_,
	UNKNOWN,					//0,
	L0,							//1,
	L1							//2
);

MAKE_FIELDS(D3D12_HEAP_PROPERTIES, Type, CPUPageProperty, MemoryPoolPreference, CreationNodeMask, VisibleNodeMask);

MAKE_PREFIXED_BIT_ENUMS(D3D12_HEAP_FLAGS, D3D12_HEAP_FLAG_,
	NONE,
	SHARED,
	DENY_BUFFERS,
	ALLOW_DISPLAY,
	SHARED_CROSS_ADAPTER,
	DENY_RT_DS_TEXTURES,
	DENY_NON_RT_DS_TEXTURES,
//	ALLOW_ALL_BUFFERS_AND_TEXTURES,
	ALLOW_ONLY_BUFFERS,
	ALLOW_ONLY_NON_RT_DS_TEXTURES,
	ALLOW_ONLY_RT_DS_TEXTURES
);

MAKE_FIELDS(D3D12_HEAP_DESC, SizeInBytes, Properties, Alignment, Flags);

MAKE_PREFIXED_ENUMS(D3D12_RESOURCE_DIMENSION, D3D12_RESOURCE_DIMENSION_,
	UNKNOWN,		//0,
	BUFFER,			//1,
	TEXTURE1D,		//2,
	TEXTURE2D,		//3,
	TEXTURE3D		//4
);

MAKE_PREFIXED_ENUMS(D3D12_TEXTURE_LAYOUT, D3D12_TEXTURE_LAYOUT_,
	UNKNOWN,					//0,
	ROW_MAJOR,					//1,
	64KB_UNDEFINED_SWIZZLE,		//2,
	64KB_STANDARD_SWIZZLE		//3
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RESOURCE_FLAGS, D3D12_RESOURCE_FLAG_,
	NONE,
	ALLOW_RENDER_TARGET,
	ALLOW_DEPTH_STENCIL,
	ALLOW_UNORDERED_ACCESS,
	DENY_SHADER_RESOURCE,
	ALLOW_CROSS_ADAPTER,
	ALLOW_SIMULTANEOUS_ACCESS
);

template<> field fields<D3D12_RESOURCE_DESC>::f[] = {
#undef S
#define	S D3D12_RESOURCE_DESC
	_MAKE_FIELD(S,Dimension)
	_MAKE_FIELD(S,Alignment)
	field::make("Width", T_get_member_offset(&S::Width) * 8, sizeof(S::Width) * 8, 0, 0, sDec),//_MAKE_FIELD(S,Width)
	_MAKE_FIELD(S,Height)
	_MAKE_FIELD(S,DepthOrArraySize)
	_MAKE_FIELD(S,MipLevels)
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,SampleDesc)
	_MAKE_FIELD(S,Layout)
	_MAKE_FIELD(S,Flags)
	TERMINATOR
};

MAKE_FIELDS(D3D12_MIP_REGION, Width, Height, Depth);

template<> field fields<D3D12_RESOURCE_DESC1>::f[] = {
#undef S
#define	S D3D12_RESOURCE_DESC1
	_MAKE_FIELD(S,Dimension)
	_MAKE_FIELD(S,Alignment)
	field::make("Width", T_get_member_offset(&S::Width) * 8, sizeof(S::Width) * 8, 0, 0, sDec),//_MAKE_FIELD(S,Width)
	_MAKE_FIELD(S,Height)
	_MAKE_FIELD(S,DepthOrArraySize)
	_MAKE_FIELD(S,MipLevels)
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,SampleDesc)
	_MAKE_FIELD(S,Layout)
	_MAKE_FIELD(S,Flags)
	_MAKE_FIELD(S,SamplerFeedbackMipRegion)
	TERMINATOR
};

MAKE_FIELDS(D3D12_DEPTH_STENCIL_VALUE, Depth, Stencil);
MAKE_FIELDS(D3D12_CLEAR_VALUE, Format, Color, DepthStencil);
MAKE_FIELDS(D3D12_RANGE, Begin, End);
MAKE_FIELDS(D3D12_SUBRESOURCE_INFO, Offset, RowPitch, DepthPitch);
MAKE_FIELDS(D3D12_TILED_RESOURCE_COORDINATE, X, Y, Z, Subresource);
MAKE_FIELDS(D3D12_TILE_REGION_SIZE, NumTiles, UseBox, Width, Height, Depth);

MAKE_PREFIXED_BIT_ENUMS(D3D12_TILE_RANGE_FLAGS, D3D12_TILE_RANGE_FLAG_,
	NONE,
	NULL,
	SKIP,
	REUSE_SINGLE_TILE
);

MAKE_FIELDS(D3D12_SUBRESOURCE_TILING, WidthInTiles, HeightInTiles, DepthInTiles, StartTileIndexInOverallResource);
MAKE_FIELDS(D3D12_TILE_SHAPE, WidthInTexels, HeightInTexels, DepthInTexels);
MAKE_FIELDS(D3D12_PACKED_MIP_INFO, NumStandardMips, NumPackedMips, NumTilesForPackedMips, StartTileIndexInOverallResource);

MAKE_PREFIXED_BIT_ENUMS(D3D12_TILE_MAPPING_FLAGS, D3D12_TILE_MAPPING_FLAG_,
	NONE,			//0,
	NO_HAZARD		//1
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_TILE_COPY_FLAGS, D3D12_TILE_COPY_FLAG_,
	NONE,
	NO_HAZARD,
	LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE,
	SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RESOURCE_STATES, D3D12_RESOURCE_STATE_,
	COMMON,
	VERTEX_AND_CONSTANT_BUFFER,
	INDEX_BUFFER,
	RENDER_TARGET,
	UNORDERED_ACCESS,
	DEPTH_WRITE,
	DEPTH_READ,
	NON_PIXEL_SHADER_RESOURCE,
	PIXEL_SHADER_RESOURCE,
	STREAM_OUT,
	INDIRECT_ARGUMENT,
	COPY_DEST,
	COPY_SOURCE,
	RESOLVE_DEST,
	RESOLVE_SOURCE,
	PREDICATION,
	GENERIC_READ
);

MAKE_PREFIXED_ENUMS(D3D12_RESOURCE_BARRIER_TYPE, D3D12_RESOURCE_BARRIER_TYPE_,
	TRANSITION,							//0,
	ALIASING,							//1
	UAV									//2
);

MAKE_FIELDS(D3D12_RESOURCE_TRANSITION_BARRIER, pResource, Subresource, StateBefore, StateAfter);

MAKE_FIELDS(D3D12_RESOURCE_ALIASING_BARRIER, pResourceBefore, pResourceAfter);

MAKE_FIELDS(D3D12_RESOURCE_UAV_BARRIER, pResource);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RESOURCE_BARRIER_FLAGS, D3D12_RESOURCE_BARRIER_FLAG_,
	NONE,
	BEGIN_ONLY,
	END_ONLY
);

field* barrier_union[] = {
	fields<D3D12_RESOURCE_TRANSITION_BARRIER>::f,
	fields<D3D12_RESOURCE_ALIASING_BARRIER	>::f,
	fields<D3D12_RESOURCE_UAV_BARRIER		>::f,
};

template<> field fields<D3D12_RESOURCE_BARRIER>::f[] =	{
#undef S
#define	S D3D12_RESOURCE_BARRIER
	_MAKE_FIELD(S,Type)
	_MAKE_FIELD(S,Flags)
	MAKE_UNION(Transition, 2, barrier_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_SUBRESOURCE_FOOTPRINT, Format, Width, Height, Depth, RowPitch);

MAKE_FIELDS(D3D12_PLACED_SUBRESOURCE_FOOTPRINT, Offset, Footprint);

MAKE_PREFIXED_ENUMS(D3D12_TEXTURE_COPY_TYPE, D3D12_TEXTURE_COPY_TYPE_,
	SUBRESOURCE_INDEX,						//0,
	PLACED_FOOTPRINT						//1
);

field* texture_copy_union[] = {
	fields<UINT>::f,
	fields<D3D12_PLACED_SUBRESOURCE_FOOTPRINT>::f,
};

template<> field fields<D3D12_TEXTURE_COPY_LOCATION>::f[] = {
#undef S
#define	S D3D12_TEXTURE_COPY_LOCATION
	_MAKE_FIELD(S,pResource)
	_MAKE_FIELD(S,Type)
	MAKE_UNION(PlacedFootprint, 1, texture_copy_union),
	TERMINATOR
};

template<> struct field_names<D3D12_SRV_DIMENSION>	: field_names<D3D_SRV_DIMENSION> {};

field* srv_union[] = {
	empty_field,
	fields<D3D12_BUFFER_SRV			>::f,
	fields<D3D12_TEX1D_SRV			>::f,
	fields<D3D12_TEX1D_ARRAY_SRV	>::f,
	fields<D3D12_TEX2D_SRV			>::f,
	fields<D3D12_TEX2D_ARRAY_SRV	>::f,
	fields<D3D12_TEX2DMS_SRV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_SRV	>::f,
	fields<D3D12_TEX3D_SRV			>::f,
	fields<D3D12_TEXCUBE_SRV		>::f,
	fields<D3D12_TEXCUBE_ARRAY_SRV	>::f,
};

const char *Shader4ComponentMapping_names[] = {
	"X", "Y", "Z", "W", "0", "1", 0, 0,
};

field Shader4ComponentMapping_fields[] = {
	{"R",	0, 3, 0,0, Shader4ComponentMapping_names},
	{"G",	3, 3, 0,0, Shader4ComponentMapping_names},
	{"B",	6, 3, 0,0, Shader4ComponentMapping_names},
	{"A",	9, 3, 0,0, Shader4ComponentMapping_names},
	0,
};

template<> field fields<D3D12_SHADER_RESOURCE_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_SHADER_RESOURCE_VIEW_DESC
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,ViewDimension)
	//{"Shader4ComponentMapping", T_get_member_offset(&S::Shader4ComponentMapping) * 8, 0, 0, 0, (const char**)Shader4ComponentMapping_fields},
	field::make("Shader4ComponentMapping", &S::Shader4ComponentMapping, Shader4ComponentMapping_fields),
	MAKE_UNION(Buffer, 2, srv_union),
	TERMINATOR
};
MAKE_FIELDS2(D3D12_CONSTANT_BUFFER_VIEW_DESC, T(D3D12_GPU_VIRTUAL_ADDRESS2, BufferLocation), (SizeInBytes));

MAKE_PREFIXED_VALUE_ENUMS(D3D12_FILTER, D3D12_FILTER_,
	MIN_MAG_MIP_POINT,
	MIN_MAG_POINT_MIP_LINEAR,
	MIN_POINT_MAG_LINEAR_MIP_POINT,
	MIN_POINT_MAG_MIP_LINEAR,
	MIN_LINEAR_MAG_MIP_POINT,
	MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	MIN_MAG_LINEAR_MIP_POINT,
	MIN_MAG_MIP_LINEAR,
	ANISOTROPIC,
	COMPARISON_MIN_MAG_MIP_POINT,
	COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
	COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
	COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
	COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
	COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
	COMPARISON_MIN_MAG_MIP_LINEAR,
	COMPARISON_ANISOTROPIC,
	MINIMUM_MIN_MAG_MIP_POINT,
	MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
	MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
	MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
	MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
	MINIMUM_MIN_MAG_MIP_LINEAR,
	MINIMUM_ANISOTROPIC,
	MAXIMUM_MIN_MAG_MIP_POINT,
	MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
	MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
	MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
	MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
	MAXIMUM_MIN_MAG_MIP_LINEAR,
	MAXIMUM_ANISOTROPIC
);

MAKE_PREFIXED_ENUMS(D3D12_FILTER_TYPE, D3D12_FILTER_TYPE_,
	POINT,								//0,
	LINEAR								//1
);

MAKE_PREFIXED_ENUMS(D3D12_FILTER_REDUCTION_TYPE, D3D12_FILTER_REDUCTION_TYPE_,
	STANDARD,							//0,
	COMPARISON,							//1,
	MINIMUM,							//2,
	MAXIMUM								//3
);
MAKE_PREFIXED_ENUMS(D3D12_TEXTURE_ADDRESS_MODE, D3D12_TEXTURE_ADDRESS_MODE_,
	0,
	WRAP,								//1,
	MIRROR,								//2,
	CLAMP,								//3,
	BORDER,								//4,
	MIRROR_ONCE							//5
);

MAKE_FIELDS(D3D12_SAMPLER_DESC, Filter, AddressU, AddressV, AddressW, MipLODBias, MaxAnisotropy, ComparisonFunc, BorderColor, MinLOD, MaxLOD);

MAKE_PREFIXED_BIT_ENUMS(D3D12_BUFFER_UAV_FLAGS, D3D12_BUFFER_UAV_FLAG_,
	NONE,								//0,
	RAW									//1
);

MAKE_FIELDS(D3D12_BUFFER_UAV, FirstElement, NumElements, StructureByteStride, CounterOffsetInBytes, Flags);

MAKE_FIELDS(D3D12_TEX1D_UAV, MipSlice);

MAKE_FIELDS(D3D12_TEX1D_ARRAY_UAV, MipSlice, FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX2D_UAV, MipSlice, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2D_ARRAY_UAV, MipSlice, FirstArraySlice, ArraySize, PlaneSlice);

MAKE_FIELDS(D3D12_TEX3D_UAV, MipSlice, FirstWSlice, WSize);

MAKE_PREFIXED_ENUMS(D3D12_UAV_DIMENSION, D3D12_UAV_DIMENSION_,
	UNKNOWN,									//0,
	BUFFER,										//1,
	TEXTURE1D,									//2,
	TEXTURE1DARRAY,								//3,
	TEXTURE2D,									//4,
	TEXTURE2DARRAY,								//5,
	0,
	0,
	TEXTURE3D									//8
);

field	*uav_union[] = {
	empty_field,
	fields<D3D12_BUFFER_UAV		>::f,
	fields<D3D12_TEX1D_UAV		>::f,
	fields<D3D12_TEX1D_ARRAY_UAV>::f,
	fields<D3D12_TEX2D_UAV		>::f,
	fields<D3D12_TEX2D_ARRAY_UAV>::f,
	empty_field,
	empty_field,
	fields<D3D12_TEX3D_UAV		>::f,
};

template<> field fields<D3D12_UNORDERED_ACCESS_VIEW_DESC>::f[]	= {
#undef S
#define	S D3D12_UNORDERED_ACCESS_VIEW_DESC
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,ViewDimension)
	MAKE_UNION(Buffer, 1, uav_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_BUFFER_RTV, FirstElement, NumElements);

MAKE_FIELDS(D3D12_TEX1D_RTV, MipSlice);

MAKE_FIELDS(D3D12_TEX1D_ARRAY_RTV, MipSlice, FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX2D_RTV, MipSlice, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2DMS_RTV, UnusedField_NothingToDefine);

MAKE_FIELDS(D3D12_TEX2D_ARRAY_RTV, MipSlice, FirstArraySlice, ArraySize, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_RTV, FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX3D_RTV, MipSlice, FirstWSlice, WSize);

MAKE_PREFIXED_ENUMS(D3D12_RTV_DIMENSION, D3D12_RTV_DIMENSION_,
	UNKNOWN,							//0,
	BUFFER,								//1,
	TEXTURE1D,							//2,
	TEXTURE1DARRAY,						//3,
	TEXTURE2D,							//4,
	TEXTURE2DARRAY,						//5,
	TEXTURE2DMS,						//6,
	TEXTURE2DMSARRAY,					//7,
	TEXTURE3D							//8
);

field* rtv_union[] = {
	empty_field,
	fields<D3D12_BUFFER_RTV			>::f,
	fields<D3D12_TEX1D_RTV			>::f,
	fields<D3D12_TEX1D_ARRAY_RTV	>::f,
	fields<D3D12_TEX2D_RTV			>::f,
	fields<D3D12_TEX2D_ARRAY_RTV	>::f,
	fields<D3D12_TEX2DMS_RTV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_RTV	>::f,
	fields<D3D12_TEX3D_RTV			>::f,
};

template<> field fields<D3D12_RENDER_TARGET_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_RENDER_TARGET_VIEW_DESC
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,ViewDimension)
	MAKE_UNION(Buffer, 1, rtv_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_TEX1D_DSV, MipSlice);
MAKE_FIELDS(D3D12_TEX1D_ARRAY_DSV, MipSlice, FirstArraySlice, ArraySize);
MAKE_FIELDS(D3D12_TEX2D_DSV, MipSlice);
MAKE_FIELDS(D3D12_TEX2D_ARRAY_DSV, MipSlice, FirstArraySlice, ArraySize);
MAKE_FIELDS(D3D12_TEX2DMS_DSV, UnusedField_NothingToDefine);
MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_DSV, FirstArraySlice, ArraySize);

MAKE_PREFIXED_BIT_ENUMS(D3D12_DSV_FLAGS, D3D12_DSV_FLAG_,
	NONE,
	READ_ONLY_DEPTH,
	READ_ONLY_STENCIL
);

MAKE_PREFIXED_ENUMS(D3D12_DSV_DIMENSION, D3D12_DSV_DIMENSION_UNKNOWN_,
	UNKNOWN,							//0,
	TEXTURE1D,							//1,
	TEXTURE1DARRAY,						//2,
	TEXTURE2D,							//3,
	TEXTURE2DARRAY,						//4,
	TEXTURE2DMS,						//5,
	TEXTURE2DMSARRAY					//6
);

field* dsv_union[] = {
	empty_field,
	fields<D3D12_TEX1D_DSV			>::f,
	fields<D3D12_TEX1D_ARRAY_DSV	>::f,
	fields<D3D12_TEX2D_DSV			>::f,
	fields<D3D12_TEX2D_ARRAY_DSV	>::f,
	fields<D3D12_TEX2DMS_DSV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_DSV	>::f,
};

template<> field fields<D3D12_DEPTH_STENCIL_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_DEPTH_STENCIL_VIEW_DESC
	_MAKE_FIELD(S,Format)
	_MAKE_FIELD(S,ViewDimension)
	_MAKE_FIELD(S,Flags)
	MAKE_UNION(Texture1D, 2,dsv_union),
	TERMINATOR
};

MAKE_PREFIXED_BIT_ENUMS(D3D12_CLEAR_FLAGS, D3D12_CLEAR_FLAG_,
	DEPTH,
	STENCIL
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_FENCE_FLAGS, D3D12_FENCE_FLAG_,
	NONE,
	SHARED,
	SHARED_CROSS_ADAPTER
);

MAKE_PREFIXED_ENUMS(D3D12_DESCRIPTOR_HEAP_TYPE, D3D12_DESCRIPTOR_HEAP_TYPE_,
	CBV_SRV_UAV,						//0,
	SAMPLER,							//1,
	RTV,								//2,
	DSV									//3,
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_DESCRIPTOR_HEAP_FLAGS, D3D12_DESCRIPTOR_HEAP_FLAG_,
	NONE,								//0,
	SHADER_VISIBLE						//1
);

MAKE_FIELDS(D3D12_DESCRIPTOR_HEAP_DESC, Type, NumDescriptors, Flags, NodeMask);

MAKE_PREFIXED_ENUMS(D3D12_DESCRIPTOR_RANGE_TYPE, D3D12_DESCRIPTOR_RANGE_TYPE_,
	SRV,								//0,
	UAV,								//1,
	CBV,								//2,
	SAMPLER								//3,
);

MAKE_FIELDS(D3D12_DESCRIPTOR_RANGE, RangeType, NumDescriptors, BaseShaderRegister, RegisterSpace, OffsetInDescriptorsFromTableStart);
MAKE_FIELDS(D3D12_ROOT_DESCRIPTOR_TABLE, NumDescriptorRanges, pDescriptorRanges);
MAKE_FIELDS(D3D12_ROOT_CONSTANTS, ShaderRegister, RegisterSpace, Num32BitValues);
MAKE_FIELDS(D3D12_ROOT_DESCRIPTOR, ShaderRegister, RegisterSpace);

MAKE_PREFIXED_ENUMS(D3D12_SHADER_VISIBILITY, D3D12_SHADER_VISIBILITY_,
	ALL,								//0
	VERTEX,								//1
	HULL,								//2
	DOMAIN,								//3
	GEOMETRY,							//4
	PIXEL,								//5
	AMPLIFICATION,						//6
	MESH,								//7
);

MAKE_PREFIXED_ENUMS(D3D12_ROOT_PARAMETER_TYPE, D3D12_ROOT_PARAMETER_TYPE_,
	DESCRIPTOR_TABLE,					//0,
	32BIT_CONSTANTS,					//1,
	CBV,								//2,
	SRV,								//3,
	UAV									//4,
);

field* root_union[] = {
	fields<D3D12_ROOT_DESCRIPTOR_TABLE	>::f,
	fields<D3D12_ROOT_CONSTANTS			>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
};

template<> field fields<D3D12_ROOT_PARAMETER>::f[]	= {
#undef S
#define	S D3D12_ROOT_PARAMETER
	_MAKE_FIELD(S,ParameterType)
	MAKE_UNION(DescriptorTable, 1, root_union),
	_MAKE_FIELD(S,ShaderVisibility)
	TERMINATOR
};

MAKE_PREFIXED_BIT_ENUMS(D3D12_ROOT_SIGNATURE_FLAGS, D3D12_ROOT_SIGNATURE_FLAG_,
	NONE,
	ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT,
	DENY_VERTEX_SHADER_ROOT_ACCESS,
	DENY_HULL_SHADER_ROOT_ACCESS,
	DENY_DOMAIN_SHADER_ROOT_ACCESS,
	DENY_GEOMETRY_SHADER_ROOT_ACCESS,
	DENY_PIXEL_SHADER_ROOT_ACCESS,
	ALLOW_STREAM_OUTPUT,
	LOCAL_ROOT_SIGNATURE,
	DENY_AMPLIFICATION_SHADER_ROOT_ACCESS,
	DENY_MESH_SHADER_ROOT_ACCESS
);

MAKE_PREFIXED_ENUMS(D3D12_STATIC_BORDER_COLOR, D3D12_STATIC_BORDER_COLOR_,
	TRANSPARENT_BLACK,					//0,
	OPAQUE_BLACK,						//1,
	OPAQUE_WHITE						//2
);

MAKE_FIELDS(D3D12_STATIC_SAMPLER_DESC, Filter, AddressU, AddressV, AddressW, MipLODBias, MaxAnisotropy, ComparisonFunc, BorderColor, MinLOD, MaxLOD, ShaderRegister, RegisterSpace, ShaderVisibility);

MAKE_FIELDS2(D3D12_ROOT_SIGNATURE_DESC,
	(NumParameters),
	C(0, pParameters),
	(NumStaticSamplers),
	C(2, pStaticSamplers),
	(Flags)
);

MAKE_PREFIXED_ENUMS(D3D_ROOT_SIGNATURE_VERSION, D3D_ROOT_SIGNATURE_VERSION_,
	1									//0x1
);

MAKE_FIELDS(D3D12_DISCARD_REGION, NumRects, pRects, FirstSubresource, NumSubresources);

MAKE_PREFIXED_ENUMS(D3D12_QUERY_HEAP_TYPE, D3D12_QUERY_HEAP_TYPE_,
	OCCLUSION,							//0,
	TIMESTAMP,							//1,
	PIPELINE_STATISTICS,				//2,
	SO_STATISTICS						//3
);

MAKE_FIELDS(D3D12_QUERY_HEAP_DESC, Type, Count, NodeMask);

MAKE_PREFIXED_ENUMS(D3D12_QUERY_TYPE, D3D12_QUERY_TYPE_,
	OCCLUSION,							//0,
	BINARY_OCCLUSION,					//1,
	TIMESTAMP,							//2,
	PIPELINE_STATISTICS,				//3,
	SO_STATISTICS_STREAM0,				//4,
	SO_STATISTICS_STREAM1,				//5,
	SO_STATISTICS_STREAM2,				//6,
	SO_STATISTICS_STREAM3				//7
);

MAKE_PREFIXED_ENUMS(D3D12_PREDICATION_OP, D3D12_PREDICATION_OP_,
	EQUAL_ZERO,							//0,
	NOT_EQUAL_ZERO						//1
);

MAKE_FIELDS(D3D12_QUERY_DATA_PIPELINE_STATISTICS, IAVertices, IAPrimitives, VSInvocations, GSInvocations, GSPrimitives, CInvocations, CPrimitives, PSInvocations, HSInvocations, DSInvocations, CSInvocations);
MAKE_FIELDS(D3D12_QUERY_DATA_SO_STATISTICS, NumPrimitivesWritten, PrimitivesStorageNeeded);
MAKE_FIELDS(D3D12_STREAM_OUTPUT_BUFFER_VIEW, BufferLocation, SizeInBytes, BufferFilledSizeLocation);
MAKE_FIELDS(D3D12_DRAW_ARGUMENTS, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
MAKE_FIELDS(D3D12_DRAW_INDEXED_ARGUMENTS, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
MAKE_FIELDS(D3D12_DISPATCH_ARGUMENTS, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
MAKE_FIELDS(D3D12_VERTEX_BUFFER_VIEW, BufferLocation, SizeInBytes, StrideInBytes);
MAKE_FIELDS(D3D12_INDEX_BUFFER_VIEW, BufferLocation, SizeInBytes, Format);

MAKE_PREFIXED_VALUE_ENUMS(D3D12_FEATURE, D3D12_FEATURE_,
	D3D12_OPTIONS,
	ARCHITECTURE,
	FEATURE_LEVELS,
	FORMAT_SUPPORT,
	MULTISAMPLE_QUALITY_LEVELS,
	FORMAT_INFO,
	GPU_VIRTUAL_ADDRESS_SUPPORT,
	SHADER_MODEL,							// 7
	D3D12_OPTIONS1,							// 8
	PROTECTED_RESOURCE_SESSION_SUPPORT,		// 10
	ROOT_SIGNATURE,							// 12
	ARCHITECTURE1,							// 16
	D3D12_OPTIONS2,							// 18
	SHADER_CACHE,							// 19
	COMMAND_QUEUE_PRIORITY,					// 20
	D3D12_OPTIONS3,							// 21
	EXISTING_HEAPS,							// 22
	D3D12_OPTIONS4,							// 23
	SERIALIZATION,							// 24
	CROSS_NODE,								// 25
	D3D12_OPTIONS5,							// 27
	DISPLAYABLE,							// 28
	D3D12_OPTIONS6,							// 30
	QUERY_META_COMMAND,						// 31
	D3D12_OPTIONS7,							// 32
	PROTECTED_RESOURCE_SESSION_TYPE_COUNT,	// 33
	PROTECTED_RESOURCE_SESSION_TYPES,		// 34
	D3D12_OPTIONS8,							// 36
	D3D12_OPTIONS9,							// 37
	D3D12_OPTIONS10,						// 39
	D3D12_OPTIONS11,						// 40
	D3D12_OPTIONS12,						// 41
	D3D12_OPTIONS13							// 42
);;

template<> field fields<D3D12_GRAPHICS_PIPELINE_STATE_DESC>::f[]	= {
#undef S
#define	S D3D12_GRAPHICS_PIPELINE_STATE_DESC
	_MAKE_FIELD(S,pRootSignature)
	_MAKE_FIELD(S,VS)
	_MAKE_FIELD(S,PS)
	_MAKE_FIELD(S,DS)
	_MAKE_FIELD(S,HS)
	_MAKE_FIELD(S,GS)
	_MAKE_FIELD(S,StreamOutput)
//	{"BlendState", T_get_member_offset(&D3D12_GRAPHICS_PIPELINE_STATE_DESC::BlendState) * 8, 0, field::MODE_ARRAY, 7, (const char**)fields<D3D12_BLEND_DESC>::f},
	_MAKE_FIELD(S,BlendState)
	field::make<S,xint32>("SampleMask",	&S::SampleMask),
	//_MAKE_FIELD(S,SampleMask)
	_MAKE_FIELD(S,RasterizerState)
	_MAKE_FIELD(S,DepthStencilState)
	_MAKE_FIELD(S,InputLayout)
	_MAKE_FIELD(S,IBStripCutValue)
	_MAKE_FIELD(S,PrimitiveTopologyType)
	_MAKE_FIELD(S,NumRenderTargets)
	_MAKE_FIELD(S,RTVFormats)
	_MAKE_FIELD(S,DSVFormat)
	_MAKE_FIELD(S,SampleDesc)
	_MAKE_FIELD(S,NodeMask)
	_MAKE_FIELD(S,Flags)
	TERMINATOR
};

MAKE_FIELDS(D3D12_RT_FORMAT_ARRAY, RTFormats, NumRenderTargets);

MAKE_FIELDS(D3D12_COMPUTE_PIPELINE_STATE_DESC,pRootSignature, CS, NodeMask, Flags);
template<> field fields<SECURITY_ATTRIBUTES>::f[]					= { 0,};

MAKE_FIELDS(D3D12_SIGNATURE_PARAMETER_DESC, SemanticName, SemanticIndex, Register, SystemValueType, ComponentType, Mask, ReadWriteMask, Stream, MinPrecision);

MAKE_FIELDS(D3D12_SHADER_BUFFER_DESC, Name, Type, Variables, Size, uFlags);

MAKE_FIELDS(D3D12_SHADER_VARIABLE_DESC, Name, StartOffset, Size, uFlags, DefaultValue, StartTexture, TextureSize, StartSampler, SamplerSize);

MAKE_FIELDS(D3D12_SHADER_TYPE_DESC, Class, Type, Rows, Columns, Elements, Members, Offset, Name);

MAKE_FIELDS(D3D12_SHADER_DESC,
	Version, Creator, Flags,
	ConstantBuffers, BoundResources, InputParameters, OutputParameters, 
	InstructionCount, TempRegisterCount, TempArrayCount, DefCount, DclCount, TextureNormalInstructions, TextureLoadInstructions, TextureCompInstructions, TextureBiasInstructions, TextureGradientInstructions, FloatInstructionCount, IntInstructionCount, UintInstructionCount, StaticFlowControlCount, DynamicFlowControlCount, MacroInstructionCount, ArrayInstructionCount, CutInstructionCount, EmitInstructionCount, GSOutputTopology, GSMaxOutputVertexCount, InputPrimitive, PatchConstantParameters, cGSInstanceCount, cControlPoints, HSOutputPrimitive, HSPartitioning, TessellatorDomain,	// instruction counts
	cBarrierInstructions, cInterlockedInstructions, cTextureStoreInstructions
);

MAKE_FIELDS(D3D12_SHADER_INPUT_BIND_DESC,
	Name, Type, BindPoint, BindCount, 
	uFlags, ReturnType, Dimension, NumSamples, Space, uID
);

MAKE_FIELDS(D3D12_LIBRARY_DESC, Creator, Flags, FunctionCount);

MAKE_FIELDS(D3D12_FUNCTION_DESC,
	Version, Creator, Flags,
	ConstantBuffers, BoundResources, 
	InstructionCount, TempRegisterCount, TempArrayCount, DefCount, DclCount, TextureNormalInstructions, TextureLoadInstructions, TextureCompInstructions, TextureBiasInstructions, TextureGradientInstructions, FloatInstructionCount, IntInstructionCount, UintInstructionCount, StaticFlowControlCount, DynamicFlowControlCount, MacroInstructionCount, ArrayInstructionCount, MovInstructionCount, MovcInstructionCount, ConversionInstructionCount, BitwiseInstructionCount, MinFeatureLevel, RequiredFeatureFlags, 
	Name, FunctionParameterCount, HasReturn, Has10Level9VertexShader, Has10Level9PixelShader
);

MAKE_FIELDS(D3D12_PARAMETER_DESC,
	Name, SemanticName, Type, Class, Rows, Columns, InterpolationMode, Flags, 
	FirstInRegister, FirstInComponent, FirstOutRegister, FirstOutComponent
);

MAKE_FIELDS(D3D12_RANGE_UINT64, Begin, End);

MAKE_FIELDS(D3D12_SUBRESOURCE_RANGE_UINT64, Subresource, Range);

MAKE_FIELDS2(D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
	T(D3D12_GPU_VIRTUAL_ADDRESS2, StartAddress),
	(StrideInBytes)
);

MAKE_FIELDS2(D3D12_GPU_VIRTUAL_ADDRESS_RANGE,
	T(D3D12_GPU_VIRTUAL_ADDRESS2, StartAddress),
	(SizeInBytes)
);

MAKE_FIELDS2(D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
	T(D3D12_GPU_VIRTUAL_ADDRESS2, StartAddress),
	(SizeInBytes),
	(StrideInBytes)
);

MAKE_FIELDS(D3D12_PIPELINE_STATE_STREAM_DESC,
	SizeInBytes,
	pPipelineStateSubobjectStream
);

MAKE_PREFIXED_ENUMS(D3D12_RESOLVE_MODE, D3D12_RESOLVE_MODE_,
	DECOMPRESS,					// 0,
	MIN,						// 1,
	MAX,						// 2,
	AVERAGE,					// 3,
	ENCODE_SAMPLER_FEEDBACK,	// 4,
	DECODE_SAMPLER_FEEDBACK		// 5
);

MAKE_FIELDS(D3D12_SAMPLE_POSITION, X, Y);

MAKE_FIELDS(D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, Dest, Value);

MAKE_PREFIXED_ENUMS(D3D12_WRITEBUFFERIMMEDIATE_MODE, D3D12_WRITEBUFFERIMMEDIATE_MODE_,
	DEFAULT,		// 0,
	MARKER_IN,		// 1,
	MARKER_OUT		// 2
);

MAKE_PREFIXED_ENUMS(D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE, D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_,
	DISCARD,	// 0
	PRESERVE,	// 1
	CLEAR,		// 2
	NO_ACCESS	// 3
);

MAKE_FIELDS(D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS, ClearValue);

MAKE_FIELDS(D3D12_RENDER_PASS_BEGINNING_ACCESS, Type, Clear);

MAKE_PREFIXED_ENUMS(D3D12_RENDER_PASS_ENDING_ACCESS_TYPE, D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_,
	DISCARD,	// 0,
	PRESERVE,	// 1
	RESOLVE,	// 2
	NO_ACCESS	// 3
);

MAKE_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS, SrcSubresource, DstSubresource, DstX, DstY, SrcRect);
MAKE_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS, pSrcResource, pDstResource, SubresourceCount, pSubresourceParameters, Format, ResolveMode, PreserveResolveSource);
MAKE_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS, Type, Resolve);
MAKE_FIELDS(D3D12_RENDER_PASS_RENDER_TARGET_DESC, cpuDescriptor, BeginningAccess, EndingAccess);
MAKE_FIELDS(D3D12_RENDER_PASS_DEPTH_STENCIL_DESC, cpuDescriptor, DepthBeginningAccess, StencilBeginningAccess, DepthEndingAccess, StencilEndingAccess);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RENDER_PASS_FLAGS, D3D12_RENDER_PASS_FLAG_,
	NONE,				// 0,
	ALLOW_UAV_WRITES,	// 0x1,
	SUSPENDING_PASS,	// 0x2,
	RESUMING_PASS		// 0x4
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_,
	NONE,				// 0,
	ALLOW_UPDATE,		// 0x1,
	ALLOW_COMPACTION,	// 0x2,
	PREFER_FAST_TRACE,	// 0x4,
	PREFER_FAST_BUILD,	// 0x8,
	MINIMIZE_MEMORY,	// 0x10,
	PERFORM_UPDATE		// 0x20
);

MAKE_PREFIXED_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_,
	CLONE,							// 0,
	COMPACT,						// 1,
	VISUALIZATION_DECODE_FOR_TOOLS,	// 2,
	SERIALIZE,						// 3,
	DESERIALIZE						// 4
);

MAKE_PREFIXED_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_,
	TOP_LEVEL,			// 0,
	BOTTOM_LEVEL		// 1
);

MAKE_PREFIXED_ENUMS(D3D12_ELEMENTS_LAYOUT, D3D12_ELEMENTS_LAYOUT_,
	ARRAY,				// 0,
	ARRAY_OF_POINTERS	// 1
);

MAKE_PREFIXED_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_,
	COMPACTED_SIZE,		// 0,
	TOOLS_VISUALIZATION,// 1,
	SERIALIZATION,		// 2,
	CURRENT_SIZE		// 3
);

MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC, DestBuffer, InfoType);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC, CompactedSizeInBytes);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC, DecodedSizeInBytes);
MAKE_FIELDS(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER, Type, NumDescs);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC, SerializedSizeInBytes, NumBottomLevelAccelerationStructurePointers);
MAKE_FIELDS(D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER, DriverOpaqueGUID, DriverOpaqueVersioningData);

MAKE_PREFIXED_ENUMS(D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_,
	RAYTRACING_ACCELERATION_STRUCTURE	// 0
);

MAKE_PREFIXED_ENUMS(D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS, D3D12_DRIVER_MATCHING_IDENTIFIER_,
	COMPATIBLE_WITH_DEVICE,		// 0,
	UNSUPPORTED_TYPE,			// 1,
	UNRECOGNIZED,				// 2,
	INCOMPATIBLE_VERSION,		// 3,
	INCOMPATIBLE_TYPE			// 4
);

MAKE_FIELDS(D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER, DriverMatchingIdentifier, SerializedSizeInBytesIncludingHeader, DeserializedSizeInBytes, NumBottomLevelAccelerationStructurePointersAfterHeader);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC, CurrentSizeInBytes);


struct xD3D12_RAYTRACING_INSTANCE_DESC {
	FLOAT Transform[ 3 ][ 4 ];
	uint24le InstanceID;
	uint8 InstanceMask;
	uint24le InstanceContributionToHitGroupIndex;
	uint8 Flags;
	D3D12_GPU_VIRTUAL_ADDRESS2 AccelerationStructure;
};
MAKE_FIELDS_USING(D3D12_RAYTRACING_INSTANCE_DESC, xD3D12_RAYTRACING_INSTANCE_DESC, Transform, InstanceID, InstanceMask, InstanceContributionToHitGroupIndex, Flags, AccelerationStructure);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RAYTRACING_GEOMETRY_FLAGS, D3D12_RAYTRACING_GEOMETRY_FLAG_,
	NONE,							//0,
	OPAQUE,							//1,
	NO_DUPLICATE_ANYHIT_INVOCATION	//2
);


MAKE_PREFIXED_ENUMS(D3D12_RAYTRACING_GEOMETRY_TYPE, D3D12_RAYTRACING_GEOMETRY_TYPE_,
	TRIANGLES,					//0,
	PROCEDURAL_PRIMITIVE_AABBS	//1
);

MAKE_FIELDS2(D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC, T(D3D12_GPU_VIRTUAL_ADDRESS2, Transform3x4), (IndexFormat), (VertexFormat), (IndexCount), (VertexCount), T(D3D12_GPU_VIRTUAL_ADDRESS2, IndexBuffer), (VertexBuffer));
MAKE_FIELDS(D3D12_RAYTRACING_GEOMETRY_AABBS_DESC, AABBCount, AABBs);

MAKE_FIELDS2(D3D12_RAYTRACING_GEOMETRY_DESC, (Type), (Flags), U(0, Triangles, D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC, D3D12_RAYTRACING_GEOMETRY_AABBS_DESC));
//MAKE_FIELDS2(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, (Type), (Flags), (NumDescs), (DescsLayout), U(3, InstanceDescs, D3D12_RAYTRACING_GEOMETRY_DESC*, D3D12_RAYTRACING_GEOMETRY_DESC**));
MAKE_FIELDS2(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, (Type), (Flags), (NumDescs), (DescsLayout), C(2, pGeometryDescs));

MAKE_FIELDS(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC, DestAccelerationStructureData, Inputs, SourceAccelerationStructureData, ScratchAccelerationStructureData);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO, ResultDataMaxSizeInBytes, ScratchDataSizeInBytes, UpdateScratchDataSizeInBytes);

MAKE_PREFIXED_BIT_ENUMS(D3D12_PROTECTED_RESOURCE_SESSION_FLAGS, D3D12_PROTECTED_RESOURCE_SESSION_FLAG_,
	NONE	//0
);

MAKE_FIELDS(D3D12_PROTECTED_RESOURCE_SESSION_DESC, NodeMask, Flags);
MAKE_FIELDS(D3D12_PROTECTED_RESOURCE_SESSION_DESC1, NodeMask, Flags, ProtectionType);

MAKE_PREFIXED_ENUMS(D3D12_STATE_SUBOBJECT_TYPE, D3D12_STATE_SUBOBJECT_TYPE_,
	STATE_OBJECT_CONFIG,					// 0,
	GLOBAL_ROOT_SIGNATURE,					// 1,
	LOCAL_ROOT_SIGNATURE,					// 2,
	NODE_MASK,								// 3,
	0,
	DXIL_LIBRARY,							// 5,
	EXISTING_COLLECTION,					// 6,
	SUBOBJECT_TO_EXPORTS_ASSOCIATION,		// 7,
	DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION,	// 8,
	RAYTRACING_SHADER_CONFIG,				// 9,
	RAYTRACING_PIPELINE_CONFIG,				// 10,
	HIT_GROUP,								// 11,
	RAYTRACING_PIPELINE_CONFIG1,			// 12,
);

MAKE_FIELDS(D3D12_STATE_SUBOBJECT, Type, pDesc);

MAKE_PREFIXED_VALUE_ENUMS(D3D12_STATE_OBJECT_TYPE, D3D12_STATE_OBJECT_TYPE_,
	COLLECTION,			//0,
	RAYTRACING_PIPELINE	//3
);

MAKE_PREFIXED_ENUMS(D3D12_STATE_OBJECT_FLAGS, D3D12_STATE_OBJECT_FLAG_,
	NONE,												// 0,
	ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS,	// 1,
	ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS,	// 2,
	ALLOW_STATE_OBJECT_ADDITIONS,						// 4
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RAYTRACING_PIPELINE_FLAGS, D3D12_RAYTRACING_PIPELINE_FLAG_,
	NONE,							// 0,
	SKIP_TRIANGLES,					// 0x100,
	SKIP_PROCEDURAL_PRIMITIVES		// 0x200
);

MAKE_PREFIXED_ENUMS(D3D12_HIT_GROUP_TYPE, D3D12_HIT_GROUP_TYPE_,
	TRIANGLES,						// 0,
	PROCEDURAL_PRIMITIVE,			// 1
);
MAKE_PREFIXED_ENUMS(D3D12_EXPORT_FLAGS, D3D12_EXPORT_FLAG_,
	NONE							// 0
);

MAKE_FIELDS(D3D12_EXPORT_DESC, Name, ExportToRename, Flags);
MAKE_FIELDS(D3D12_STATE_OBJECT_DESC, Type, NumSubobjects, pSubobjects);
MAKE_FIELDS(D3D12_STATE_OBJECT_CONFIG, Flags);
MAKE_FIELDS(D3D12_NODE_MASK, NodeMask);
MAKE_FIELDS(D3D12_DXIL_LIBRARY_DESC, DXILLibrary, NumExports, pExports);
MAKE_FIELDS(D3D12_EXISTING_COLLECTION_DESC, pExistingCollection, NumExports, pExports);
MAKE_FIELDS2(D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION, (pSubobjectToAssociate), (NumExports), C(1, pExports));
MAKE_FIELDS2(D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION, (SubobjectToAssociate), (NumExports), C(1, pExports));
MAKE_FIELDS(D3D12_RAYTRACING_SHADER_CONFIG, MaxPayloadSizeInBytes, MaxAttributeSizeInBytes);
MAKE_FIELDS(D3D12_RAYTRACING_PIPELINE_CONFIG, MaxTraceRecursionDepth);
MAKE_FIELDS(D3D12_HIT_GROUP_DESC, HitGroupExport, Type, AnyHitShaderImport, ClosestHitShaderImport, IntersectionShaderImport);
MAKE_FIELDS(D3D12_RAYTRACING_PIPELINE_CONFIG1, MaxTraceRecursionDepth, Flags);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RAY_FLAGS, D3D12_RAY_FLAG_,
	NONE,							// 0,
	FORCE_OPAQUE,					// 0x1,
	FORCE_NON_OPAQUE,				// 0x2,
	ACCEPT_FIRST_HIT_AND_END_SEARCH,// 0x4,
	SKIP_CLOSEST_HIT_SHADER,		// 0x8,
	CULL_BACK_FACING_TRIANGLES,		// 0x10,
	CULL_FRONT_FACING_TRIANGLES,	// 0x20,
	CULL_OPAQUE,					// 0x40,
	CULL_NON_OPAQUE,				// 0x80,
	SKIP_TRIANGLES,					// 0x100,
	SKIP_PROCEDURAL_PRIMITIVES		// 0x200
);

MAKE_PREFIXED_VALUE_ENUMS(D3D12_HIT_KIND, D3D12_HIT_KIND_,
	TRIANGLE_FRONT_FACE,			// 0xfe,
	TRIANGLE_BACK_FACE				// 0xff
);


MAKE_PREFIXED_BIT_ENUMS(D3D12_RESIDENCY_FLAGS, D3D12_RESIDENCY_FLAG_,
	NONE,				//0,
	DENY_OVERBUDGET		//1
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_COMMAND_LIST_FLAGS, D3D12_COMMAND_LIST_FLAG_,
	NONE		//0
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_COMMAND_POOL_FLAGS, D3D12_COMMAND_POOL_FLAG_,
	NONE		//0
);
MAKE_PREFIXED_BIT_ENUMS(D3D12_COMMAND_RECORDER_FLAGS, D3D12_COMMAND_RECORDER_FLAG_,
	NONE		//0
);

MAKE_PREFIXED_ENUMS(D3D12_PROTECTED_SESSION_STATUS, D3D12_PROTECTED_SESSION_STATUS_,
	OK,			//0,
	INVALID		//1
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_RAYTRACING_INSTANCE_FLAGS, D3D12_RAYTRACING_INSTANCE_FLAG_,
	NONE,							//0,
	TRIANGLE_CULL_DISABLE,			//1,
	TRIANGLE_FRONT_COUNTERCLOCKWISE,//2,
	FORCE_OPAQUE,					//4,
	FORCE_NON_OPAQUE				//8
);

MAKE_PREFIXED_ENUMS(D3D12_BACKGROUND_PROCESSING_MODE, D3D12_BACKGROUND_PROCESSING_MODE_,
	ALLOWED,		//0,
	ALLOW_INTRUSIVE_MEASUREMENTS,	//1
	DISABLE_BACKGROUND_WORK,		//2
	DISABLE_PROFILING_BY_SYSTEM		//3
);


MAKE_PREFIXED_ENUMS(D3D12_MEASUREMENTS_ACTION, D3D12_MEASUREMENTS_ACTION_,
	KEEP_ALL,						//0,
	COMMIT_RESULTS,					//1
	COMMIT_RESULTS_HIGH_PRIORITY,	//2
	DISCARD_PREVIOUS				//3
);

MAKE_PREFIXED_BIT_ENUMS(D3D12_MULTIPLE_FENCE_WAIT_FLAGS, D3D12_MULTIPLE_FENCE_WAIT_FLAG_,
	NONE,	// 0,
	ANY		// 1,
//	ALL		// 0
);

MAKE_PREFIXED_VALUE_ENUMS(D3D12_RESIDENCY_PRIORITY, D3D12_RESIDENCY_PRIORITY_,
	MINIMUM,	// 0x28000000,
	LOW,		// 0x50000000,
	NORMAL,		// 0x78000000,
	HIGH,		// 0xa0010000,
	MAXIMUM		// 0xc8000000
);

MAKE_FIELDS(D3D12_DISPATCH_RAYS_DESC,
	RayGenerationShaderRecord,
	MissShaderTable,
	HitGroupTable,
	CallableShaderTable,
	Width,
	Height,
	Depth
);

MAKE_FIELDS(D3D12_DISPATCH_MESH_ARGUMENTS, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
