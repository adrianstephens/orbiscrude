#include "extra/identifier.h"
#include <d3d12.h>
#include <d3d12shader.h>
#include "..\dx_shared\dx_fields.h" 
#include "dx12\dx12_record.h"

using namespace	iso;

MAKE_ENUMS(D3D12_BUFFER_SRV_FLAGS,
	D3D12_BUFFER_SRV_FLAG_NONE,										//0,
	D3D12_BUFFER_SRV_FLAG_RAW										//1
);

field D3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer[] = {
	{"Slot",					0,	32, 0,0,	0},
	0,
};
field D3D12_INDIRECT_ARGUMENT_DESC_Constant[] = {
	{"RootParameterIndex",		0,	32, 0,0,	0},
	{"DestOffsetIn32BitValues",	32, 32, 0,0,	0},
	{"Num32BitValuesToSet",		64, 32, 0,0,	0},
	0,
};
field D3D12_INDIRECT_ARGUMENT_DESC_View[] = {
	{"RootParameterIndex",		0,	32, 0,0,	0},
	0,
};

field* indirect_argument_union[] = {
	0,
	0,
	0,
	D3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer,
	0,
	D3D12_INDIRECT_ARGUMENT_DESC_Constant,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	D3D12_INDIRECT_ARGUMENT_DESC_View,
	0,
	0,
};

MAKE_ENUMS(D3D12_INDIRECT_ARGUMENT_TYPE,
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW,						//0,
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED,				//1,
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH,					//2,
	D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW,		//3,
	D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW,			//4,
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT,					//5,
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW,		//6,
	D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW,		//7,
	D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW,		//8
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS,				//9
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH,				//10
);

template<> field fields<D3D12_INDIRECT_ARGUMENT_DESC>::f[]	= {
#undef S
#define	S D3D12_INDIRECT_ARGUMENT_DESC
	MAKE_DX_FIELD(Type),
	{0, 32, 0, 0, 1, (const char**)indirect_argument_union},
	TERMINATOR
};

MAKE_FIELDS(D3D12_BUFFER_SRV,	NumElements, StructureByteStride, Flags);
MAKE_FIELDS(D3D12_TEX1D_SRV,	MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX1D_ARRAY_SRV,	MostDetailedMip, MipLevels, FirstArraySlice, ArraySize, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2D_SRV,	MostDetailedMip, MipLevels, PlaneSlice, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2D_ARRAY_SRV,	MostDetailedMip, MipLevels, FirstArraySlice, ArraySize, PlaneSlice, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX3D_SRV,	MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEXCUBE_SRV,	MostDetailedMip, MipLevels, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEXCUBE_ARRAY_SRV,	MostDetailedMip, MipLevels, First2DArrayFace, NumCubes, ResourceMinLODClamp);
MAKE_FIELDS(D3D12_TEX2DMS_SRV, UnusedField_NothingToDefine);
MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_SRV, FirstArraySlice, ArraySize);

MAKE_ENUMS(D3D12_COMMAND_LIST_TYPE,
	D3D12_COMMAND_LIST_TYPE_DIRECT,									//0,
	D3D12_COMMAND_LIST_TYPE_BUNDLE,									//1,
	D3D12_COMMAND_LIST_TYPE_COMPUTE,								//2,
	D3D12_COMMAND_LIST_TYPE_COPY									//3
);

MAKE_ENUMS(D3D12_COMMAND_QUEUE_FLAGS,
	D3D12_COMMAND_QUEUE_FLAG_NONE,									//0,
	D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT					//1
);


MAKE_VALUES(D3D12_COMMAND_QUEUE_PRIORITY,
	D3D12_COMMAND_QUEUE_PRIORITY_NORMAL,
	D3D12_COMMAND_QUEUE_PRIORITY_HIGH
);

MAKE_FIELDS(D3D12_COMMAND_QUEUE_DESC,  Type, Priority, Flags, NodeMask);

MAKE_ENUMS(D3D12_PRIMITIVE_TOPOLOGY_TYPE,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED,						//0,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT,							//1,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE,								//2,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE,							//3,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH								//4
);

MAKE_ENUMS(D3D12_INPUT_CLASSIFICATION,
	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,						//0,
	D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA					//1
);

MAKE_ENUMS(D3D12_VIEW_INSTANCING_FLAGS,
	D3D12_VIEW_INSTANCING_FLAG_NONE,								//0
	D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING			//1
);

MAKE_FIELDS(D3D12_VIEW_INSTANCE_LOCATION, ViewportArrayIndex, RenderTargetArrayIndex);
MAKE_FIELDS(D3D12_VIEW_INSTANCING_DESC, ViewInstanceCount, pViewInstanceLocations, Flags);


MAKE_ENUMS(D3D12_FILL_MODE,
	0,
	0,
	D3D12_FILL_MODE_WIREFRAME,										//2,
	D3D12_FILL_MODE_SOLID											//3
);

MAKE_ENUMS(D3D12_CULL_MODE,
	0,
	D3D12_CULL_MODE_NONE,											//1,
	D3D12_CULL_MODE_FRONT,											//2,
	D3D12_CULL_MODE_BACK											//3
);

//MAKE_FIELDS(CommandRange, commandlist, start, end);
template<> field fields<CommandRange>::f[]	= {
	{"commandlist", 0, 64, field::MODE_CUSTOM, 0, (const char**)fields<CommandRange>::f},
	field::terminator<CommandRange>(),
};

MAKE_FIELDS(D3D12_INPUT_ELEMENT_DESC,  SemanticName, SemanticIndex, Format, InputSlot, AlignedByteOffset, InputSlotClass, InstanceDataStepRate);
MAKE_FIELDS(D3D12_SO_DECLARATION_ENTRY,  Stream, SemanticName, SemanticIndex, StartComponent, ComponentCount, OutputSlot);

template<> field fields<D3D12_STREAM_OUTPUT_DESC>::f[]	= {
#undef S
#define	S D3D12_STREAM_OUTPUT_DESC
	MAKE_DX_FIELD_IDX(0, pSODeclaration),
	MAKE_DX_FIELD(NumEntries),
	MAKE_DX_FIELD_IDX(2, pBufferStrides),
	MAKE_DX_FIELD(NumStrides),
	MAKE_DX_FIELD(RasterizedStream),
	TERMINATOR
};

//template<typename T1, typename T0, typename B> T1 B::* field_cast(T0 B::* p) {
//	return (T1 B::*)p;
//}

template<> field fields<D3D12_INPUT_LAYOUT_DESC>::f[] = {
#undef S
#define	S D3D12_INPUT_LAYOUT_DESC
	make_field_idx<0,D3D12_INPUT_LAYOUT_DESC>("pInputElementDescs", element_cast<counted<const D3D12_INPUT_ELEMENT_DESC, 1> >(&D3D12_INPUT_LAYOUT_DESC::pInputElementDescs)),
	//MAKE_DX_FIELD_IDX(0, pInputElementDescs),
	MAKE_DX_FIELD(NumElements),
	TERMINATOR
};

#define OFFSET_OF(S, X)	(uintptr_t(&(((S*)1)->X)) - 1)

#define MAKE_DX_FIELD_INSTANT(X)		{#X, uint32(OFFSET_OF(S, X)) * 8, uint32(sizeof(S::X)), 0}
#define MAKE_DX_FIELD_COUNTED(I,X,P)	{#X, uint32(OFFSET_OF(S, X)) * 8, uint32(sizeof(S::X)), field::MODE_POINTER, I, (const char**)fields<P>::f}


template<> field fields<D3D12_COMMAND_SIGNATURE_DESC>::f[]	= {
#undef S
#define	S D3D12_COMMAND_SIGNATURE_DESC
	MAKE_DX_FIELD_INSTANT(ByteStride),
	MAKE_DX_FIELD_INSTANT(NumArgumentDescs),
	MAKE_DX_FIELD_COUNTED(2, pArgumentDescs, D3D12_INPUT_LAYOUT_DESC),
	MAKE_DX_FIELD_INSTANT(NodeMask),
	TERMINATOR
};

MAKE_FIELDS(D3D12_VIEWPORT,  TopLeftX, TopLeftY, Width, Height, MinDepth, MaxDepth);
MAKE_FIELDS(RECT,  left, top, right, bottom);
MAKE_FIELDS(D3D12_BOX,  left, top, front, right, bottom, back);

MAKE_ENUMS(D3D12_COMPARISON_FUNC,
	0,
	D3D12_COMPARISON_FUNC_NEVER,									//1,
	D3D12_COMPARISON_FUNC_LESS,										//2,
	D3D12_COMPARISON_FUNC_EQUAL,									//3,
	D3D12_COMPARISON_FUNC_LESS_EQUAL,								//4,
	D3D12_COMPARISON_FUNC_GREATER,									//5,
	D3D12_COMPARISON_FUNC_NOT_EQUAL,								//6,
	D3D12_COMPARISON_FUNC_GREATER_EQUAL,							//7,
	D3D12_COMPARISON_FUNC_ALWAYS									//8
);

MAKE_ENUMS(D3D12_DEPTH_WRITE_MASK,
	D3D12_DEPTH_WRITE_MASK_ZERO,									//0,
	D3D12_DEPTH_WRITE_MASK_ALL										//1
);

MAKE_ENUMS(D3D12_STENCIL_OP,
	0,
	D3D12_STENCIL_OP_KEEP,											//1,
	D3D12_STENCIL_OP_ZERO,											//2,
	D3D12_STENCIL_OP_REPLACE,										//3,
	D3D12_STENCIL_OP_INCR_SAT,										//4,
	D3D12_STENCIL_OP_DECR_SAT,										//5,
	D3D12_STENCIL_OP_INVERT,										//6,
	D3D12_STENCIL_OP_INCR,											//7,
	D3D12_STENCIL_OP_DECR											//8
);

MAKE_ENUMS(D3D12_SHADING_RATE,
	D3D12_SHADING_RATE_1X1,						//0,
	D3D12_SHADING_RATE_1X2,						//0x1,
	0,
	0,
	D3D12_SHADING_RATE_2X1,						//0x4,
	D3D12_SHADING_RATE_2X2,						//0x5,
	D3D12_SHADING_RATE_2X4,						//0x6,
	0,
	0,
	D3D12_SHADING_RATE_4X2,						//0x9,
	D3D12_SHADING_RATE_4X4						//0xa
);

MAKE_ENUMS(D3D12_SHADING_RATE_COMBINER,
	D3D12_SHADING_RATE_COMBINER_PASSTHROUGH,	// 0,
	D3D12_SHADING_RATE_COMBINER_OVERRIDE,		// 1,
	D3D12_SHADING_RATE_COMBINER_MIN,			// 2,
	D3D12_SHADING_RATE_COMBINER_MAX,			// 3,
	D3D12_SHADING_RATE_COMBINER_SUM				// 4
);

MAKE_FIELDS(D3D12_DEPTH_STENCILOP_DESC,  StencilFailOp, StencilDepthFailOp, StencilPassOp, StencilFunc);

template<> field fields<D3D12_DEPTH_STENCIL_DESC>::f[]	= {
#undef S
#define	S D3D12_DEPTH_STENCIL_DESC
	MAKE_DX_FIELD(DepthEnable),
	MAKE_DX_FIELD(DepthWriteMask),
	MAKE_DX_FIELD(DepthFunc),
	MAKE_DX_FIELD(StencilEnable),
	MAKE_DX_FIELD(StencilReadMask),
	MAKE_DX_FIELD(StencilWriteMask),
	CALL_FIELD(FrontFace),
	CALL_FIELD(BackFace),
	TERMINATOR
};
template<> field fields<D3D12_DEPTH_STENCIL_DESC1>::f[]	= {
#undef S
#define	S D3D12_DEPTH_STENCIL_DESC1
	MAKE_DX_FIELD(DepthEnable),
	MAKE_DX_FIELD(DepthWriteMask),
	MAKE_DX_FIELD(DepthFunc),
	MAKE_DX_FIELD(StencilEnable),
	MAKE_DX_FIELD(StencilReadMask),
	MAKE_DX_FIELD(StencilWriteMask),
	CALL_FIELD(FrontFace),
	CALL_FIELD(BackFace),
	MAKE_DX_FIELD(DepthBoundsTestEnable),
	TERMINATOR
};

MAKE_ENUMS(D3D12_BLEND,
	0,
	D3D12_BLEND_ZERO,												//1,
	D3D12_BLEND_ONE,												//2,
	D3D12_BLEND_SRC_COLOR,											//3,
	D3D12_BLEND_INV_SRC_COLOR,										//4,
	D3D12_BLEND_SRC_ALPHA,											//5,
	D3D12_BLEND_INV_SRC_ALPHA,										//6,
	D3D12_BLEND_DEST_ALPHA,											//7,
	D3D12_BLEND_INV_DEST_ALPHA,										//8,
	D3D12_BLEND_DEST_COLOR,											//9,
	D3D12_BLEND_INV_DEST_COLOR,										//10,
	D3D12_BLEND_SRC_ALPHA_SAT,										//11,
	0,
	0,
	D3D12_BLEND_BLEND_FACTOR,										//14,
	D3D12_BLEND_INV_BLEND_FACTOR,									//15,
	D3D12_BLEND_SRC1_COLOR,											//16,
	D3D12_BLEND_INV_SRC1_COLOR,										//17,
	D3D12_BLEND_SRC1_ALPHA,											//18,
	D3D12_BLEND_INV_SRC1_ALPHA										//19
);

MAKE_ENUMS(D3D12_BLEND_OP,
	0,
	D3D12_BLEND_OP_ADD,												//1,
	D3D12_BLEND_OP_SUBTRACT,										//2,
	D3D12_BLEND_OP_REV_SUBTRACT,									//3,
	D3D12_BLEND_OP_MIN,												//4,
	D3D12_BLEND_OP_MAX												//5
);

MAKE_VALUES(D3D12_COLOR_WRITE_ENABLE,
	D3D12_COLOR_WRITE_ENABLE_RED,
	D3D12_COLOR_WRITE_ENABLE_GREEN,
	D3D12_COLOR_WRITE_ENABLE_BLUE,
	D3D12_COLOR_WRITE_ENABLE_ALPHA,
);

MAKE_ENUMS(D3D12_LOGIC_OP,
	D3D12_LOGIC_OP_CLEAR,											//0,
	D3D12_LOGIC_OP_SET,
	D3D12_LOGIC_OP_COPY,
	D3D12_LOGIC_OP_COPY_INVERTED,
	D3D12_LOGIC_OP_NOOP,
	D3D12_LOGIC_OP_INVERT,
	D3D12_LOGIC_OP_AND,
	D3D12_LOGIC_OP_NAND,
	D3D12_LOGIC_OP_OR,
	D3D12_LOGIC_OP_NOR,
	D3D12_LOGIC_OP_XOR,
	D3D12_LOGIC_OP_EQUIV,
	D3D12_LOGIC_OP_AND_REVERSE,
	D3D12_LOGIC_OP_AND_INVERTED,
	D3D12_LOGIC_OP_OR_REVERSE,
	D3D12_LOGIC_OP_OR_INVERTED
);

MAKE_FIELDS(D3D12_RENDER_TARGET_BLEND_DESC,  BlendEnable, LogicOpEnable, SrcBlend, DestBlend, BlendOp, SrcBlendAlpha, DestBlendAlpha, BlendOpAlpha, LogicOp, RenderTargetWriteMask);

template<> field fields<D3D12_BLEND_DESC>::f[]	= {
#undef S
#define	S D3D12_BLEND_DESC
	MAKE_DX_FIELD(AlphaToCoverageEnable),
	MAKE_DX_FIELD(IndependentBlendEnable),
	CALL_FIELD(RenderTarget),
	TERMINATOR
};
MAKE_ENUMS(D3D12_CONSERVATIVE_RASTERIZATION_MODE,
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF,						//0,
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON						//1
);

MAKE_FIELDS(D3D12_RASTERIZER_DESC,  FillMode, CullMode, FrontCounterClockwise, DepthBias, DepthBiasClamp, SlopeScaledDepthBias, DepthClipEnable, MultisampleEnable, AntialiasedLineEnable, ForcedSampleCount, ConservativeRaster);

template<> field fields<D3D12_SHADER_BYTECODE>::f[] = {
#undef S
#define	S D3D12_SHADER_BYTECODE
	{"pShaderBytecode", 0, 64, field::MODE_CUSTOM, 0, sCustom},
//	MAKE_DX_FIELD(pShaderBytecode),
	MAKE_DX_FIELD(BytecodeLength),
	TERMINATOR,
};

MAKE_ENUMS(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED,					//0,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF,						//1,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF					//2
);

MAKE_FIELDS(D3D12_CACHED_PIPELINE_STATE,  pCachedBlob, CachedBlobSizeInBytes);

MAKE_ENUMS(D3D12_PIPELINE_STATE_FLAGS,
	D3D12_PIPELINE_STATE_FLAG_NONE,									//0,
	D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG							//1
);

MAKE_ENUMS(D3D12_HEAP_TYPE,
	0,
	D3D12_HEAP_TYPE_DEFAULT,										//1,
	D3D12_HEAP_TYPE_UPLOAD,											//2,
	D3D12_HEAP_TYPE_READBACK,										//3,
	D3D12_HEAP_TYPE_CUSTOM											//4
);

MAKE_ENUMS(D3D12_CPU_PAGE_PROPERTY,
	D3D12_CPU_PAGE_PROPERTY_UNKNOWN,								//0,
	D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE,							//1,
	D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE,							//2,
	D3D12_CPU_PAGE_PROPERTY_WRITE_BACK								//3
);

MAKE_ENUMS(D3D12_MEMORY_POOL,
	D3D12_MEMORY_POOL_UNKNOWN,										//0,
	D3D12_MEMORY_POOL_L0,											//1,
	D3D12_MEMORY_POOL_L1											//2
);

MAKE_FIELDS(D3D12_HEAP_PROPERTIES,  Type, CPUPageProperty, MemoryPoolPreference, CreationNodeMask, VisibleNodeMask);

MAKE_BITS(D3D12_HEAP_FLAGS,
	D3D12_HEAP_FLAG_NONE,
	D3D12_HEAP_FLAG_SHARED,
	D3D12_HEAP_FLAG_DENY_BUFFERS,
	D3D12_HEAP_FLAG_ALLOW_DISPLAY,
	D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER,
	D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES,
	D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES,
//	D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES,
	D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS,
	D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES,
	D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES,
);

template<> field fields<D3D12_HEAP_DESC>::f[] = {
#undef S
#define	S D3D12_HEAP_DESC
	MAKE_DX_FIELD(SizeInBytes),
	CALL_FIELD(Properties),
	MAKE_DX_FIELD(Alignment),
	MAKE_DX_FIELD(Flags),
	TERMINATOR
};

MAKE_ENUMS(D3D12_RESOURCE_DIMENSION,
	D3D12_RESOURCE_DIMENSION_UNKNOWN,								//0,
	D3D12_RESOURCE_DIMENSION_BUFFER,								//1,
	D3D12_RESOURCE_DIMENSION_TEXTURE1D,								//2,
	D3D12_RESOURCE_DIMENSION_TEXTURE2D,								//3,
	D3D12_RESOURCE_DIMENSION_TEXTURE3D								//4
);

MAKE_ENUMS(D3D12_TEXTURE_LAYOUT,
	D3D12_TEXTURE_LAYOUT_UNKNOWN,									//0,
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR,									//1,
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE,					//2,
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE						//3
);

MAKE_BITS(D3D12_RESOURCE_FLAGS,
	D3D12_RESOURCE_FLAG_NONE,
	D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET,
	D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL,
	D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS,
	D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE,
	D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER,
	D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS
);

template<> field fields<D3D12_MIP_REGION>::f[] = {
	MAKE_DX_FIELDS(D3D12_MIP_REGION, Width, Height, Depth)
};

template<> field fields<D3D12_RESOURCE_DESC>::f[] = {
#undef S
#define	S D3D12_RESOURCE_DESC
	MAKE_DX_FIELD(Dimension),
	MAKE_DX_FIELD(Alignment),
	field::make("Width", T_get_member_offset(&S::Width) * 8, sizeof(S::Width) * 8, 0, 0, sDec),//MAKE_DX_FIELD(Width),
	MAKE_DX_FIELD(Height),
	MAKE_DX_FIELD(DepthOrArraySize),
	MAKE_DX_FIELD(MipLevels),
	MAKE_DX_FIELD(Format),
	CALL_FIELD(SampleDesc),
	MAKE_DX_FIELD(Layout),
	MAKE_DX_FIELD(Flags),
	TERMINATOR
};
template<> field fields<D3D12_RESOURCE_DESC1>::f[] = {
#undef S
#define	S D3D12_RESOURCE_DESC1
	MAKE_DX_FIELD(Dimension),
	MAKE_DX_FIELD(Alignment),
	field::make("Width", T_get_member_offset(&S::Width) * 8, sizeof(S::Width) * 8, 0, 0, sDec),//MAKE_DX_FIELD(Width),
	MAKE_DX_FIELD(Height),
	MAKE_DX_FIELD(DepthOrArraySize),
	MAKE_DX_FIELD(MipLevels),
	MAKE_DX_FIELD(Format),
	CALL_FIELD(SampleDesc),
	MAKE_DX_FIELD(Layout),
	MAKE_DX_FIELD(Flags),
	MAKE_DX_FIELD(SamplerFeedbackMipRegion),
	TERMINATOR
};
MAKE_FIELDS(D3D12_DEPTH_STENCIL_VALUE,  Depth, Stencil);

MAKE_FIELDS(D3D12_CLEAR_VALUE, Format, Color, DepthStencil);

MAKE_FIELDS(D3D12_RANGE,  Begin, End);

MAKE_FIELDS(D3D12_SUBRESOURCE_INFO,  Offset, RowPitch, DepthPitch);

MAKE_FIELDS(D3D12_TILED_RESOURCE_COORDINATE,  X, Y, Z, Subresource);

MAKE_FIELDS(D3D12_TILE_REGION_SIZE,  NumTiles, UseBox, Width, Height, Depth);

MAKE_BITS(D3D12_TILE_RANGE_FLAGS,
	D3D12_TILE_RANGE_FLAG_NONE,
	D3D12_TILE_RANGE_FLAG_NULL,
	D3D12_TILE_RANGE_FLAG_SKIP,
	D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE
);

MAKE_FIELDS(D3D12_SUBRESOURCE_TILING,  WidthInTiles, HeightInTiles, DepthInTiles, StartTileIndexInOverallResource);

MAKE_FIELDS(D3D12_TILE_SHAPE,  WidthInTexels, HeightInTexels, DepthInTexels);

MAKE_FIELDS(D3D12_PACKED_MIP_INFO,  NumStandardMips, NumPackedMips, NumTilesForPackedMips, StartTileIndexInOverallResource);

MAKE_ENUMS(D3D12_TILE_MAPPING_FLAGS,
	D3D12_TILE_MAPPING_FLAG_NONE,									//0,
	D3D12_TILE_MAPPING_FLAG_NO_HAZARD								//1
);

MAKE_BITS(D3D12_TILE_COPY_FLAGS,
	D3D12_TILE_COPY_FLAG_NONE,
	D3D12_TILE_COPY_FLAG_NO_HAZARD,
	D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE,
	D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER
);

MAKE_BITS(D3D12_RESOURCE_STATES,
	D3D12_RESOURCE_STATE_COMMON,
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
	D3D12_RESOURCE_STATE_INDEX_BUFFER,
	D3D12_RESOURCE_STATE_RENDER_TARGET,
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
	D3D12_RESOURCE_STATE_DEPTH_WRITE,
	D3D12_RESOURCE_STATE_DEPTH_READ,
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
	D3D12_RESOURCE_STATE_STREAM_OUT,
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
	D3D12_RESOURCE_STATE_COPY_DEST,
	D3D12_RESOURCE_STATE_COPY_SOURCE,
	D3D12_RESOURCE_STATE_RESOLVE_DEST,
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
	D3D12_RESOURCE_STATE_PREDICATION,
	D3D12_RESOURCE_STATE_GENERIC_READ
);

MAKE_ENUMS(D3D12_RESOURCE_BARRIER_TYPE,
	D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,							//0,
	D3D12_RESOURCE_BARRIER_TYPE_ALIASING,							//1
	D3D12_RESOURCE_BARRIER_TYPE_UAV									//2
);

MAKE_FIELDS(D3D12_RESOURCE_TRANSITION_BARRIER,  pResource, Subresource, StateBefore, StateAfter);

MAKE_FIELDS(D3D12_RESOURCE_ALIASING_BARRIER,  pResourceBefore, pResourceAfter);

MAKE_FIELDS(D3D12_RESOURCE_UAV_BARRIER,  pResource);

MAKE_BITS(D3D12_RESOURCE_BARRIER_FLAGS,
	D3D12_RESOURCE_BARRIER_FLAG_NONE,
	D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY,
	D3D12_RESOURCE_BARRIER_FLAG_END_ONLY
);

field* barrier_union[] = {
	fields<D3D12_RESOURCE_TRANSITION_BARRIER>::f,
	fields<D3D12_RESOURCE_ALIASING_BARRIER	>::f,
	fields<D3D12_RESOURCE_UAV_BARRIER		>::f,
};

template<> field fields<D3D12_RESOURCE_BARRIER>::f[] =	{
#undef S
#define	S D3D12_RESOURCE_BARRIER
	MAKE_DX_FIELD(Type),
	MAKE_DX_FIELD(Flags),
	MAKE_UNION(Transition, 2, barrier_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_SUBRESOURCE_FOOTPRINT,  Format, Width, Height, Depth, RowPitch);

template<> field fields<D3D12_PLACED_SUBRESOURCE_FOOTPRINT>::f[] =	{
#undef S
#define	S D3D12_PLACED_SUBRESOURCE_FOOTPRINT
	MAKE_DX_FIELD(Offset),
	CALL_FIELD(Footprint),
	TERMINATOR
};

MAKE_ENUMS(D3D12_TEXTURE_COPY_TYPE,
	D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX,						//0,
	D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT						//1
);

field* texture_copy_union[] = {
	fields<UINT>::f,
	fields<D3D12_PLACED_SUBRESOURCE_FOOTPRINT>::f,
};

template<> field fields<D3D12_TEXTURE_COPY_LOCATION>::f[] = {
#undef S
#define	S D3D12_TEXTURE_COPY_LOCATION
	MAKE_DX_FIELD(pResource),
	MAKE_DX_FIELD(Type),
	MAKE_UNION(PlacedFootprint, 1, texture_copy_union),
	TERMINATOR
};

template<> struct field_names<D3D12_SRV_DIMENSION>	{ static const char **s; };
const char **field_names<D3D12_SRV_DIMENSION>::s = field_names<D3D_SRV_DIMENSION>::s;

field* srv_union[] = {
	empty_field,
	fields<D3D12_BUFFER_SRV			>::f,
	fields<D3D12_TEX1D_SRV			>::f,
	fields<D3D12_TEX1D_ARRAY_SRV	>::f,
	fields<D3D12_TEX2D_SRV			>::f,
	fields<D3D12_TEX2D_ARRAY_SRV	>::f,
	fields<D3D12_TEX2DMS_SRV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_SRV	>::f,
	fields<D3D12_TEX3D_SRV			>::f,
	fields<D3D12_TEXCUBE_SRV		>::f,
	fields<D3D12_TEXCUBE_ARRAY_SRV	>::f,
};

const char *Shader4ComponentMapping_names[] = {
	"X", "Y", "Z", "W", "0", "1", 0, 0,
};

field Shader4ComponentMapping_fields[] = {
	{"R",	0, 3, 0,0, Shader4ComponentMapping_names},
	{"G",	3, 3, 0,0, Shader4ComponentMapping_names},
	{"B",	6, 3, 0,0, Shader4ComponentMapping_names},
	{"A",	9, 3, 0,0, Shader4ComponentMapping_names},
	0,
};

template<> field fields<D3D12_SHADER_RESOURCE_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_SHADER_RESOURCE_VIEW_DESC
	MAKE_DX_FIELD(Format),
	MAKE_DX_FIELD(ViewDimension),
	//{"Shader4ComponentMapping", T_get_member_offset(&S::Shader4ComponentMapping) * 8, 0, 0, 0, (const char**)Shader4ComponentMapping_fields},
	field::make("Shader4ComponentMapping", &S::Shader4ComponentMapping, Shader4ComponentMapping_fields),
	MAKE_UNION(Buffer, 2, srv_union),
	TERMINATOR
};
MAKE_FIELDS(D3D12_CONSTANT_BUFFER_VIEW_DESC,  BufferLocation, SizeInBytes);

MAKE_VALUES(D3D12_FILTER,
	D3D12_FILTER_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_ANISOTROPIC,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_ANISOTROPIC,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_ANISOTROPIC,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_ANISOTROPIC
);

MAKE_ENUMS(D3D12_FILTER_TYPE,
	D3D12_FILTER_TYPE_POINT,										//0,
	D3D12_FILTER_TYPE_LINEAR										//1
);

MAKE_ENUMS(D3D12_FILTER_REDUCTION_TYPE,
	D3D12_FILTER_REDUCTION_TYPE_STANDARD,							//0,
	D3D12_FILTER_REDUCTION_TYPE_COMPARISON,							//1,
	D3D12_FILTER_REDUCTION_TYPE_MINIMUM,							//2,
	D3D12_FILTER_REDUCTION_TYPE_MAXIMUM								//3
);
MAKE_ENUMS(D3D12_TEXTURE_ADDRESS_MODE,
	0,
	D3D12_TEXTURE_ADDRESS_MODE_WRAP,								//1,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR,								//2,
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP,								//3,
	D3D12_TEXTURE_ADDRESS_MODE_BORDER,								//4,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE							//5
);

MAKE_FIELDS(D3D12_SAMPLER_DESC,  Filter, AddressU, AddressV, AddressW, MipLODBias, MaxAnisotropy, ComparisonFunc, BorderColor, MinLOD, MaxLOD);

MAKE_ENUMS(D3D12_BUFFER_UAV_FLAGS,
	D3D12_BUFFER_UAV_FLAG_NONE,										//0,
	D3D12_BUFFER_UAV_FLAG_RAW										//1
);

MAKE_FIELDS(D3D12_BUFFER_UAV,  FirstElement, NumElements, StructureByteStride, CounterOffsetInBytes, Flags);

MAKE_FIELDS(D3D12_TEX1D_UAV,  MipSlice);

MAKE_FIELDS(D3D12_TEX1D_ARRAY_UAV,  MipSlice, FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX2D_UAV,  MipSlice, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2D_ARRAY_UAV,  MipSlice, FirstArraySlice, ArraySize, PlaneSlice);

MAKE_FIELDS(D3D12_TEX3D_UAV,  MipSlice, FirstWSlice, WSize);

MAKE_ENUMS(D3D12_UAV_DIMENSION,
	D3D12_UAV_DIMENSION_UNKNOWN,									//0,
	D3D12_UAV_DIMENSION_BUFFER,										//1,
	D3D12_UAV_DIMENSION_TEXTURE1D,									//2,
	D3D12_UAV_DIMENSION_TEXTURE1DARRAY,								//3,
	D3D12_UAV_DIMENSION_TEXTURE2D,									//4,
	D3D12_UAV_DIMENSION_TEXTURE2DARRAY,								//5,
	0,
	0,
	D3D12_UAV_DIMENSION_TEXTURE3D									//8
);

field	*uav_union[] = {
	empty_field,
	fields<D3D12_BUFFER_UAV		>::f,
	fields<D3D12_TEX1D_UAV		>::f,
	fields<D3D12_TEX1D_ARRAY_UAV>::f,
	fields<D3D12_TEX2D_UAV		>::f,
	fields<D3D12_TEX2D_ARRAY_UAV>::f,
	empty_field,
	empty_field,
	fields<D3D12_TEX3D_UAV		>::f,
};

template<> field fields<D3D12_UNORDERED_ACCESS_VIEW_DESC>::f[]	= {
#undef S
#define	S D3D12_UNORDERED_ACCESS_VIEW_DESC
	MAKE_DX_FIELD(Format),
	MAKE_DX_FIELD(ViewDimension),
	MAKE_UNION(Buffer, 1, uav_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_BUFFER_RTV,  FirstElement, NumElements);

MAKE_FIELDS(D3D12_TEX1D_RTV,  MipSlice);

MAKE_FIELDS(D3D12_TEX1D_ARRAY_RTV,  MipSlice, FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX2D_RTV,  MipSlice, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2DMS_RTV,  UnusedField_NothingToDefine);

MAKE_FIELDS(D3D12_TEX2D_ARRAY_RTV,  MipSlice, FirstArraySlice, ArraySize, PlaneSlice);

MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_RTV,  FirstArraySlice, ArraySize);

MAKE_FIELDS(D3D12_TEX3D_RTV,  MipSlice, FirstWSlice, WSize);

MAKE_ENUMS(D3D12_RTV_DIMENSION,
	D3D12_RTV_DIMENSION_UNKNOWN,									//0,
	D3D12_RTV_DIMENSION_BUFFER,										//1,
	D3D12_RTV_DIMENSION_TEXTURE1D,									//2,
	D3D12_RTV_DIMENSION_TEXTURE1DARRAY,								//3,
	D3D12_RTV_DIMENSION_TEXTURE2D,									//4,
	D3D12_RTV_DIMENSION_TEXTURE2DARRAY,								//5,
	D3D12_RTV_DIMENSION_TEXTURE2DMS,								//6,
	D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY,							//7,
	D3D12_RTV_DIMENSION_TEXTURE3D									//8
);

field* rtv_union[] = {
	empty_field,
	fields<D3D12_BUFFER_RTV			>::f,
	fields<D3D12_TEX1D_RTV			>::f,
	fields<D3D12_TEX1D_ARRAY_RTV	>::f,
	fields<D3D12_TEX2D_RTV			>::f,
	fields<D3D12_TEX2D_ARRAY_RTV	>::f,
	fields<D3D12_TEX2DMS_RTV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_RTV	>::f,
	fields<D3D12_TEX3D_RTV			>::f,
};

template<> field fields<D3D12_RENDER_TARGET_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_RENDER_TARGET_VIEW_DESC
	MAKE_DX_FIELD(Format),
	MAKE_DX_FIELD(ViewDimension),
	MAKE_UNION(Buffer, 1, rtv_union),
	TERMINATOR
};

MAKE_FIELDS(D3D12_TEX1D_DSV,  MipSlice);
MAKE_FIELDS(D3D12_TEX1D_ARRAY_DSV,  MipSlice, FirstArraySlice, ArraySize);
MAKE_FIELDS(D3D12_TEX2D_DSV,  MipSlice);
MAKE_FIELDS(D3D12_TEX2D_ARRAY_DSV,  MipSlice, FirstArraySlice, ArraySize);
MAKE_FIELDS(D3D12_TEX2DMS_DSV,  UnusedField_NothingToDefine);
MAKE_FIELDS(D3D12_TEX2DMS_ARRAY_DSV,  FirstArraySlice, ArraySize);

MAKE_BITS(D3D12_DSV_FLAGS,
	D3D12_DSV_FLAG_NONE,
	D3D12_DSV_FLAG_READ_ONLY_DEPTH,
	D3D12_DSV_FLAG_READ_ONLY_STENCIL,
);

MAKE_ENUMS(D3D12_DSV_DIMENSION,
	D3D12_DSV_DIMENSION_UNKNOWN,									//0,
	D3D12_DSV_DIMENSION_TEXTURE1D,									//1,
	D3D12_DSV_DIMENSION_TEXTURE1DARRAY,								//2,
	D3D12_DSV_DIMENSION_TEXTURE2D,									//3,
	D3D12_DSV_DIMENSION_TEXTURE2DARRAY,								//4,
	D3D12_DSV_DIMENSION_TEXTURE2DMS,								//5,
	D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY							//6
);

field* dsv_union[] = {
	empty_field,
	fields<D3D12_TEX1D_DSV			>::f,
	fields<D3D12_TEX1D_ARRAY_DSV	>::f,
	fields<D3D12_TEX2D_DSV			>::f,
	fields<D3D12_TEX2D_ARRAY_DSV	>::f,
	fields<D3D12_TEX2DMS_DSV		>::f,
	fields<D3D12_TEX2DMS_ARRAY_DSV	>::f,
};

template<> field fields<D3D12_DEPTH_STENCIL_VIEW_DESC>::f[] = {
#undef S
#define	S D3D12_DEPTH_STENCIL_VIEW_DESC
	MAKE_DX_FIELD(Format),
	MAKE_DX_FIELD(ViewDimension),
	MAKE_DX_FIELD(Flags),
	MAKE_UNION(Texture1D, 2,dsv_union),
	TERMINATOR
};

MAKE_BITS(D3D12_CLEAR_FLAGS,
	D3D12_CLEAR_FLAG_DEPTH,
	D3D12_CLEAR_FLAG_STENCIL
);

MAKE_BITS(D3D12_FENCE_FLAGS,
	D3D12_FENCE_FLAG_NONE,
	D3D12_FENCE_FLAG_SHARED,
	D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER,
);

MAKE_ENUMS(D3D12_DESCRIPTOR_HEAP_TYPE,
	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV,							//0,
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER,								//1,
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV,									//2,
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV									//3,
);

MAKE_ENUMS(D3D12_DESCRIPTOR_HEAP_FLAGS,
	D3D12_DESCRIPTOR_HEAP_FLAG_NONE,								//0,
	D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE						//1
);

MAKE_FIELDS(D3D12_DESCRIPTOR_HEAP_DESC,  Type, NumDescriptors, Flags, NodeMask);

MAKE_ENUMS(D3D12_DESCRIPTOR_RANGE_TYPE,
	D3D12_DESCRIPTOR_RANGE_TYPE_SRV,								//0,
	D3D12_DESCRIPTOR_RANGE_TYPE_UAV,								//1,
	D3D12_DESCRIPTOR_RANGE_TYPE_CBV,								//2,
	D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER								//3,
);

MAKE_FIELDS(D3D12_DESCRIPTOR_RANGE,  RangeType, NumDescriptors, BaseShaderRegister, RegisterSpace, OffsetInDescriptorsFromTableStart);
MAKE_FIELDS(D3D12_ROOT_DESCRIPTOR_TABLE,  NumDescriptorRanges, pDescriptorRanges);
MAKE_FIELDS(D3D12_ROOT_CONSTANTS,  ShaderRegister, RegisterSpace, Num32BitValues);
MAKE_FIELDS(D3D12_ROOT_DESCRIPTOR,  ShaderRegister, RegisterSpace);

MAKE_ENUMS(D3D12_SHADER_VISIBILITY,
	D3D12_SHADER_VISIBILITY_ALL,									//0,
	D3D12_SHADER_VISIBILITY_VERTEX,									//1,
	D3D12_SHADER_VISIBILITY_HULL,									//2,
	D3D12_SHADER_VISIBILITY_DOMAIN,									//3,
	D3D12_SHADER_VISIBILITY_GEOMETRY,								//4,
	D3D12_SHADER_VISIBILITY_PIXEL									//5
);

MAKE_ENUMS(D3D12_ROOT_PARAMETER_TYPE,
	D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE,						//0,
	D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS,						//1,
	D3D12_ROOT_PARAMETER_TYPE_CBV,									//2,
	D3D12_ROOT_PARAMETER_TYPE_SRV,									//3,
	D3D12_ROOT_PARAMETER_TYPE_UAV									//4,
);

field* root_union[] = {
	fields<D3D12_ROOT_DESCRIPTOR_TABLE	>::f,
	fields<D3D12_ROOT_CONSTANTS			>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
	fields<D3D12_ROOT_DESCRIPTOR		>::f,
};

template<> field fields<D3D12_ROOT_PARAMETER>::f[]	= {
#undef S
#define	S D3D12_ROOT_PARAMETER
	MAKE_DX_FIELD(ParameterType),
	MAKE_UNION(DescriptorTable, 1, root_union),
	MAKE_DX_FIELD(ShaderVisibility),
	TERMINATOR
};

MAKE_BITS(D3D12_ROOT_SIGNATURE_FLAGS,
	D3D12_ROOT_SIGNATURE_FLAG_NONE,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT
);

MAKE_ENUMS(D3D12_STATIC_BORDER_COLOR,
	D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK,					//0,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK,							//1,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE							//2
);;

MAKE_FIELDS(D3D12_STATIC_SAMPLER_DESC,  Filter, AddressU, AddressV, AddressW, MipLODBias, MaxAnisotropy, ComparisonFunc, BorderColor, MinLOD, MaxLOD, ShaderRegister, RegisterSpace, ShaderVisibility);
MAKE_FIELDS(D3D12_ROOT_SIGNATURE_DESC,  NumParameters, pParameters, NumStaticSamplers, pStaticSamplers, Flags);

MAKE_ENUMS(D3D_ROOT_SIGNATURE_VERSION,
	D3D_ROOT_SIGNATURE_VERSION_1									//0x1
);

MAKE_FIELDS(D3D12_DISCARD_REGION,  NumRects, pRects, FirstSubresource, NumSubresources);

MAKE_ENUMS(D3D12_QUERY_HEAP_TYPE,
	D3D12_QUERY_HEAP_TYPE_OCCLUSION,								//0,
	D3D12_QUERY_HEAP_TYPE_TIMESTAMP,								//1,
	D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS,						//2,
	D3D12_QUERY_HEAP_TYPE_SO_STATISTICS								//3
);

MAKE_FIELDS(D3D12_QUERY_HEAP_DESC,  Type, Count, NodeMask);

MAKE_ENUMS(D3D12_QUERY_TYPE,
	D3D12_QUERY_TYPE_OCCLUSION,										//0,
	D3D12_QUERY_TYPE_BINARY_OCCLUSION,								//1,
	D3D12_QUERY_TYPE_TIMESTAMP,										//2,
	D3D12_QUERY_TYPE_PIPELINE_STATISTICS,							//3,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0,							//4,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1,							//5,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2,							//6,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3							//7
);

MAKE_ENUMS(D3D12_PREDICATION_OP,
	D3D12_PREDICATION_OP_EQUAL_ZERO,								//0,
	D3D12_PREDICATION_OP_NOT_EQUAL_ZERO								//1
);

MAKE_FIELDS(D3D12_QUERY_DATA_PIPELINE_STATISTICS,  IAVertices, IAPrimitives, VSInvocations, GSInvocations, GSPrimitives, CInvocations, CPrimitives, PSInvocations, HSInvocations, DSInvocations, CSInvocations);
MAKE_FIELDS(D3D12_QUERY_DATA_SO_STATISTICS,  NumPrimitivesWritten, PrimitivesStorageNeeded);
MAKE_FIELDS(D3D12_STREAM_OUTPUT_BUFFER_VIEW,  BufferLocation, SizeInBytes, BufferFilledSizeLocation);
MAKE_FIELDS(D3D12_DRAW_ARGUMENTS,  VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
MAKE_FIELDS(D3D12_DRAW_INDEXED_ARGUMENTS,  IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
MAKE_FIELDS(D3D12_DISPATCH_ARGUMENTS,  ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
MAKE_FIELDS(D3D12_VERTEX_BUFFER_VIEW,  BufferLocation, SizeInBytes, StrideInBytes);
MAKE_FIELDS(D3D12_INDEX_BUFFER_VIEW,  BufferLocation, SizeInBytes, Format);

MAKE_ENUMS(D3D12_FEATURE,
	D3D12_FEATURE_D3D12_OPTIONS,
	D3D12_FEATURE_ARCHITECTURE,
	D3D12_FEATURE_FEATURE_LEVELS,
	D3D12_FEATURE_FORMAT_SUPPORT,
	D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS,
	D3D12_FEATURE_FORMAT_INFO,
	D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT
);;

template<> static constexpr bool field_is_struct<D3D12_CPU_DESCRIPTOR_HANDLE> = false;
template<> struct field_names<D3D12_CPU_DESCRIPTOR_HANDLE>	: field_customs<D3D12_CPU_DESCRIPTOR_HANDLE>	{};

template<> field fields<D3D12_GRAPHICS_PIPELINE_STATE_DESC>::f[]	= {
#undef S
#define	S D3D12_GRAPHICS_PIPELINE_STATE_DESC
	MAKE_DX_FIELD(pRootSignature),
	CALL_FIELD(VS),
	CALL_FIELD(PS),
	CALL_FIELD(DS),
	CALL_FIELD(HS),
	CALL_FIELD(GS),
	CALL_FIELD(StreamOutput),
//	{"BlendState", T_get_member_offset(&D3D12_GRAPHICS_PIPELINE_STATE_DESC::BlendState) * 8, 0, field::MODE_ARRAY, 7, (const char**)fields<D3D12_BLEND_DESC>::f},
	CALL_FIELD(BlendState),
	field::make<S,xint32>("SampleMask",	&S::SampleMask),
	//MAKE_DX_FIELD(SampleMask),
	CALL_FIELD(RasterizerState),
	CALL_FIELD(DepthStencilState),
	CALL_FIELD(InputLayout),
	MAKE_DX_FIELD(IBStripCutValue),
	MAKE_DX_FIELD(PrimitiveTopologyType),
	MAKE_DX_FIELD(NumRenderTargets),
	MAKE_DX_FIELD(RTVFormats),
	MAKE_DX_FIELD(DSVFormat),
	CALL_FIELD(SampleDesc),
	MAKE_DX_FIELD(NodeMask),
	MAKE_DX_FIELD(Flags),
	TERMINATOR
};

MAKE_FIELDS(D3D12_RT_FORMAT_ARRAY, RTFormats, NumRenderTargets);

template<> field fields<D3D12_COMPUTE_PIPELINE_STATE_DESC>::f[]	= {
#undef S
#define	S D3D12_COMPUTE_PIPELINE_STATE_DESC
	MAKE_DX_FIELD(pRootSignature),
	CALL_FIELD(CS),
	MAKE_DX_FIELD(NodeMask),
	MAKE_DX_FIELD(Flags),
	TERMINATOR
};
template<> field fields<SECURITY_ATTRIBUTES>::f[]					= { 0,};

MAKE_FIELDS(D3D12_SIGNATURE_PARAMETER_DESC,  SemanticName, SemanticIndex, Register, SystemValueType, ComponentType, Mask, ReadWriteMask, Stream, MinPrecision);

MAKE_FIELDS(D3D12_SHADER_BUFFER_DESC,  Name, Type, Variables, Size, uFlags);

MAKE_FIELDS(D3D12_SHADER_VARIABLE_DESC,  Name, StartOffset, Size, uFlags, DefaultValue, StartTexture, TextureSize, StartSampler, SamplerSize);

MAKE_FIELDS(D3D12_SHADER_TYPE_DESC,  Class, Type, Rows, Columns, Elements, Members, Offset, Name);

MAKE_FIELDS(D3D12_SHADER_DESC,
	Version, Creator, Flags,     
	ConstantBuffers, BoundResources, InputParameters, OutputParameters, 
	InstructionCount, TempRegisterCount, TempArrayCount, DefCount, DclCount, TextureNormalInstructions, TextureLoadInstructions, TextureCompInstructions, TextureBiasInstructions, TextureGradientInstructions, FloatInstructionCount, IntInstructionCount, UintInstructionCount, StaticFlowControlCount, DynamicFlowControlCount, MacroInstructionCount, ArrayInstructionCount, CutInstructionCount, EmitInstructionCount, GSOutputTopology, GSMaxOutputVertexCount, InputPrimitive, PatchConstantParameters, cGSInstanceCount, cControlPoints, HSOutputPrimitive, HSPartitioning, TessellatorDomain,     // instruction counts
	cBarrierInstructions, cInterlockedInstructions, cTextureStoreInstructions
);

MAKE_FIELDS(D3D12_SHADER_INPUT_BIND_DESC,
	Name, Type, BindPoint, BindCount, 
	uFlags, ReturnType, Dimension, NumSamples, Space, uID
);

MAKE_FIELDS(D3D12_LIBRARY_DESC,  Creator, Flags, FunctionCount);

MAKE_FIELDS(D3D12_FUNCTION_DESC,
	Version, Creator, Flags,     
	ConstantBuffers, BoundResources, 
	InstructionCount, TempRegisterCount, TempArrayCount, DefCount, DclCount, TextureNormalInstructions, TextureLoadInstructions, TextureCompInstructions, TextureBiasInstructions, TextureGradientInstructions, FloatInstructionCount, IntInstructionCount, UintInstructionCount, StaticFlowControlCount, DynamicFlowControlCount, MacroInstructionCount, ArrayInstructionCount, MovInstructionCount, MovcInstructionCount, ConversionInstructionCount, BitwiseInstructionCount, MinFeatureLevel, RequiredFeatureFlags, 
	Name, FunctionParameterCount, HasReturn, Has10Level9VertexShader, Has10Level9PixelShader
);

MAKE_FIELDS(D3D12_PARAMETER_DESC,
	Name, SemanticName, Type, Class, Rows, Columns, InterpolationMode, Flags, 
	FirstInRegister, FirstInComponent, FirstOutRegister, FirstOutComponent
);

MAKE_FIELDS(D3D12_RANGE_UINT64, Begin, End);

MAKE_FIELDS(D3D12_SUBRESOURCE_RANGE_UINT64, Subresource, Range);

MAKE_FIELDS(D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
	StartAddress,
	StrideInBytes
);

MAKE_FIELDS(D3D12_GPU_VIRTUAL_ADDRESS_RANGE,
	StartAddress,
	SizeInBytes
);

MAKE_FIELDS(D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
	StartAddress,
	SizeInBytes,
	StrideInBytes
);

MAKE_FIELDS(D3D12_PIPELINE_STATE_STREAM_DESC,
	SizeInBytes,
	pPipelineStateSubobjectStream
);

MAKE_ENUMS(D3D12_RESOLVE_MODE,
	D3D12_RESOLVE_MODE_DECOMPRESS,					// 0,
	D3D12_RESOLVE_MODE_MIN,							// 1,
	D3D12_RESOLVE_MODE_MAX,							// 2,
	D3D12_RESOLVE_MODE_AVERAGE,						// 3,
	D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK,		// 4,
	D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK		// 5
);

MAKE_FIELDS(D3D12_SAMPLE_POSITION, X, Y);

MAKE_FIELDS(D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, Dest, Value);

MAKE_ENUMS(D3D12_WRITEBUFFERIMMEDIATE_MODE,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT,		// 0,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN,		// 1,
	D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT		// 2
);

MAKE_ENUMS(D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE,
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD,	// 0
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE,	// 1
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR,		// 2
	D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS	// 3
);

MAKE_FIELDS(D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS, ClearValue);

MAKE_FIELDS(D3D12_RENDER_PASS_BEGINNING_ACCESS, Type, Clear);

MAKE_ENUMS(D3D12_RENDER_PASS_ENDING_ACCESS_TYPE,
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD,	// 0,
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE,	// 1
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE,	// 2
	D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS	// 3
);

MAKE_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS, SrcSubresource, DstSubresource, DstX, DstY, SrcRect);

template<>
field fields<D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS>::f[]
		= {MAKE_DX_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS, pSrcResource, pDstResource, SubresourceCount, _Field_size_full_(SubresourceCount) pSubresourceParameters, Format, ResolveMode, PreserveResolveSource)};

MAKE_FIELDS(D3D12_RENDER_PASS_ENDING_ACCESS, Type, Resolve);

MAKE_FIELDS(D3D12_RENDER_PASS_RENDER_TARGET_DESC, cpuDescriptor, BeginningAccess, EndingAccess);

MAKE_FIELDS(D3D12_RENDER_PASS_DEPTH_STENCIL_DESC, cpuDescriptor, DepthBeginningAccess, StencilBeginningAccess, DepthEndingAccess, StencilEndingAccess);

MAKE_BITS(D3D12_RENDER_PASS_FLAGS,
	D3D12_RENDER_PASS_FLAG_NONE,				// 0,
	D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES,	// 0x1,
	D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS,		// 0x2,
	D3D12_RENDER_PASS_FLAG_RESUMING_PASS		// 0x4
);

MAKE_BITS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE,				// 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE,		// 0x1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION,	// 0x2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE,	// 0x4,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD,	// 0x8,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY,		// 0x10,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE		// 0x20
);

MAKE_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE,							// 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT,							// 1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS,	// 2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE,						// 3,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE						// 4
);

MAKE_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL,		// 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL	// 1
);

MAKE_ENUMS(D3D12_ELEMENTS_LAYOUT,
	D3D12_ELEMENTS_LAYOUT_ARRAY,				// 0,
	D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS		// 1
);

MAKE_ENUMS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE,		// 0,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION,	// 1,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION,		// 2,
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE			// 3
);

MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC, DestBuffer, InfoType);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC, CompactedSizeInBytes);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC, DecodedSizeInBytes);
MAKE_FIELDS(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER, Type, NumDescs);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC, SerializedSizeInBytes, NumBottomLevelAccelerationStructurePointers);
MAKE_FIELDS(D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER, DriverOpaqueGUID, DriverOpaqueVersioningData);

MAKE_ENUMS(D3D12_SERIALIZED_DATA_TYPE,
	D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE	// 0
);

MAKE_ENUMS(D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
	D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE,	// 0,
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE,			// 1,
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED,				// 2,
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION,		// 3,
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE			// 4
);

MAKE_FIELDS(D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER, DriverMatchingIdentifier, SerializedSizeInBytesIncludingHeader, DeserializedSizeInBytes, NumBottomLevelAccelerationStructurePointersAfterHeader);

MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC, CurrentSizeInBytes);

// template<>
// field fields<D3D12_RAYTRACING_INSTANCE_DESC>::f[] = {MAKE_DX_FIELDS(D3D12_RAYTRACING_INSTANCE_DESC, Transform, UINT InstanceID : 24; UINT InstanceMask : 8; UINT InstanceContributionToHitGroupIndex : 24; UINT Flags : 8; AccelerationStructure)};

MAKE_ENUMS(D3D12_RAYTRACING_GEOMETRY_FLAGS,{
	D3D12_RAYTRACING_GEOMETRY_FLAG_NONE,							//0,
	D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE,							//1,
	D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION	//2
);


MAKE_ENUMS(D3D12_RAYTRACING_GEOMETRY_TYPE,{
	D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES,					//0,
	D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS	//1
);

template<> field fields<D3D12_RAYTRACING_GEOMETRY_DESC>::f[] = {MAKE_DX_FIELDS(
		D3D12_RAYTRACING_GEOMETRY_DESC, Type, Flags
		// union {
		//	Triangles,
		//	AABBs,
		//} 	;
		)};

template<> field fields<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS>::f[] = {MAKE_DX_FIELDS(
		D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, Type, Flags, NumDescs, DescsLayout
		// union
		//{
		//	InstanceDescs,
		//	pGeometryDescs,
		//	ppGeometryDescs,
		//} 	;
		)};

MAKE_FIELDS(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC, DestAccelerationStructureData, Inputs, SourceAccelerationStructureData, ScratchAccelerationStructureData);
MAKE_FIELDS(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO, ResultDataMaxSizeInBytes, ScratchDataSizeInBytes, UpdateScratchDataSizeInBytes);

MAKE_ENUMS(D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,{
	D3D12_PROTECTED_RESOURCE_SESSION_NONE	//0
);

MAKE_FIELDS(D3D12_PROTECTED_RESOURCE_SESSION_DESC, NodeMask, Flags);
MAKE_FIELDS(D3D12_PROTECTED_RESOURCE_SESSION_DESC1, NodeMask, Flags, ProtectionType);

MAKE_ENUMS(D3D12_STATE_SUBOBJECT_TYPE,"D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG",
	0,																	// 0,
	D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE,					// 1,
	D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE,					// 2,
	D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK,								// 3,
	D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY,							// 5,
	D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION,						// 6,
	D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION,		// 7,
	D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION,	// 8,
	D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG,				// 9,
	D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG,				// 10,
	D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP,								// 11,
	D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1,				// 12,
);

MAKE_FIELDS(D3D12_STATE_SUBOBJECT,  Type, pDesc);

MAKE_VALUES(D3D12_STATE_OBJECT_TYPE,
	D3D12_STATE_OBJECT_TYPE_COLLECTION,			//0,
	D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE	//3
);

MAKE_FIELDS(D3D12_STATE_OBJECT_DESC,  Type, NumSubobjects, pSubobjects);

MAKE_BITS(D3D12_RAY_FLAGS,
	D3D12_RAY_FLAG_NONE,							// 0,
	D3D12_RAY_FLAG_FORCE_OPAQUE,					// 0x1,
	D3D12_RAY_FLAG_FORCE_NON_OPAQUE,				// 0x2,
	D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH,	// 0x4,
	D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER,			// 0x8,
	D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES,		// 0x10,
	D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES,		// 0x20,
	D3D12_RAY_FLAG_CULL_OPAQUE,						// 0x40,
	D3D12_RAY_FLAG_CULL_NON_OPAQUE,					// 0x80,
	D3D12_RAY_FLAG_SKIP_TRIANGLES,					// 0x100,
	D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES		// 0x200
);

MAKE_VALUES(D3D12_HIT_KIND,
	D3D12_HIT_KIND_TRIANGLE_FRONT_FACE,				// 0xfe,
	D3D12_HIT_KIND_TRIANGLE_BACK_FACE				// 0xff
);


MAKE_ENUMS(D3D12_RESIDENCY_FLAGS,{
	D3D12_RESIDENCY_FLAG_NONE,	                                    //0,
	D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET	                        //1
);

MAKE_ENUMS(D3D12_COMMAND_LIST_FLAGS,{
	D3D12_COMMAND_LIST_FLAG_NONE	                                //0
);


MAKE_ENUMS(D3D12_COMMAND_POOL_FLAGS,{
	D3D12_COMMAND_POOL_FLAG_NONE	                                //0
);
MAKE_ENUMS(D3D12_COMMAND_RECORDER_FLAGS,{
	D3D12_COMMAND_RECORDER_FLAG_NONE	                            //0
);

MAKE_ENUMS(D3D12_PROTECTED_SESSION_STATUS,{
	D3D12_PROTECTED_SESSION_STATUS_OK,	                            //0,
	D3D12_PROTECTED_SESSION_STATUS_INVALID	                        //1
);

MAKE_ENUMS(D3D12_RAYTRACING_INSTANCE_FLAGS,{
	D3D12_RAYTRACING_INSTANCE_FLAG_NONE,	                        //0,
	D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE,	        //1,
	D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE,	//2,
	D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE,	                //4,
	D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE	                //8
);

MAKE_ENUMS(D3D12_BACKGROUND_PROCESSING_MODE,{
	D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED,	                    //0,
	D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS,	//1
	D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK,	    //2
	D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM	//3
);


MAKE_ENUMS(D3D12_MEASUREMENTS_ACTION,{
	D3D12_MEASUREMENTS_ACTION_KEEP_ALL,	                            //0,
	D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS,	                    //1
	D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY,	        //2
	D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS	                    //3
);

MAKE_ENUMS(D3D12_MULTIPLE_FENCE_WAIT_FLAGS,{
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE,	                        // 0,
	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY	                            // 1,
//	D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL	                            // 0
);

MAKE_VALUES(D3D12_RESIDENCY_PRIORITY,
	D3D12_RESIDENCY_PRIORITY_MINIMUM,	                            // 0x28000000,
	D3D12_RESIDENCY_PRIORITY_LOW,	                                // 0x50000000,
	D3D12_RESIDENCY_PRIORITY_NORMAL,	                            // 0x78000000,
	D3D12_RESIDENCY_PRIORITY_HIGH,	                                // 0xa0010000,
	D3D12_RESIDENCY_PRIORITY_MAXIMUM	                            // 0xc8000000
);

MAKE_FIELDS(D3D12_DISPATCH_RAYS_DESC,
	RayGenerationShaderRecord,
	MissShaderTable,
	HitGroupTable,
	CallableShaderTable,
	Width,
	Height,
	Depth
);

MAKE_FIELDS(D3D12_DISPATCH_MESH_ARGUMENTS, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
