#include "dx_fields.h"
#include "dx/dx_shaders.h"

namespace iso {

field *ff() {
	static field f[1] = {0};
	return f;
};

template<> field fields<GUID>::f[] = {
	field::make("Data1", 0,  32, sHex),
	field::make("Data2", 32, 16, sHex),
	field::make("Data3", 48, 16, sHex),
	field::make("Data4", 64, 64, sHex),
	0,
};

template<> const char *field_names<dx::SHADERSTAGE>::s[]	= {
	"VS",
	"PS",
	"DS",
	"HS",
	"GS",
	"AS",
	"MS",
	"CS",
	"LIB",
};

field_prefix<const char*> field_names<DXGI_FORMAT>::s	= {"DXGI_FORMAT_", (const char*[]) {
	"UNKNOWN",						// 0,
	"R32G32B32A32_TYPELESS",		// 1,
	"R32G32B32A32_FLOAT",			// 2,
	"R32G32B32A32_UINT",			// 3,
	"R32G32B32A32_SINT",			// 4,
	"R32G32B32_TYPELESS",			// 5,
	"R32G32B32_FLOAT",				// 6,
	"R32G32B32_UINT",				// 7,
	"R32G32B32_SINT",				// 8,
	"R16G16B16A16_TYPELESS",		// 9,
	"R16G16B16A16_FLOAT",			// 10,
	"R16G16B16A16_UNORM",			// 11,
	"R16G16B16A16_UINT",			// 12,
	"R16G16B16A16_SNORM",			// 13,
	"R16G16B16A16_SINT",			// 14,
	"R32G32_TYPELESS",				// 15,
	"R32G32_FLOAT",					// 16,
	"R32G32_UINT",					// 17,
	"R32G32_SINT",					// 18,
	"R32G8X24_TYPELESS",			// 19,
	"D32_FLOAT_S8X24_UINT",			// 20,
	"R32_FLOAT_X8X24_TYPELESS",		// 21,
	"X32_TYPELESS_G8X24_UINT",		// 22,
	"R10G10B10A2_TYPELESS",			// 23,
	"R10G10B10A2_UNORM",			// 24,
	"R10G10B10A2_UINT",				// 25,
	"R11G11B10_FLOAT",				// 26,
	"R8G8B8A8_TYPELESS",			// 27,
	"R8G8B8A8_UNORM",				// 28,
	"R8G8B8A8_UNORM_SRGB",			// 29,
	"R8G8B8A8_UINT",				// 30,
	"R8G8B8A8_SNORM",				// 31,
	"R8G8B8A8_SINT",				// 32,
	"R16G16_TYPELESS",				// 33,
	"R16G16_FLOAT",					// 34,
	"R16G16_UNORM",					// 35,
	"R16G16_UINT",					// 36,
	"R16G16_SNORM",					// 37,
	"R16G16_SINT",					// 38,
	"R32_TYPELESS",					// 39,
	"D32_FLOAT",					// 40,
	"R32_FLOAT",					// 41,
	"R32_UINT",						// 42,
	"R32_SINT",						// 43,
	"R24G8_TYPELESS",				// 44,
	"D24_UNORM_S8_UINT",			// 45,
	"R24_UNORM_X8_TYPELESS",		// 46,
	"X24_TYPELESS_G8_UINT",			// 47,
	"R8G8_TYPELESS",				// 48,
	"R8G8_UNORM",					// 49,
	"R8G8_UINT",					// 50,
	"R8G8_SNORM",					// 51,
	"R8G8_SINT",					// 52,
	"R16_TYPELESS",					// 53,
	"R16_FLOAT",					// 54,
	"D16_UNORM",					// 55,
	"R16_UNORM",					// 56,
	"R16_UINT",						// 57,
	"R16_SNORM",					// 58,
	"R16_SINT",						// 59,
	"R8_TYPELESS",					// 60,
	"R8_UNORM",						// 61,
	"R8_UINT",						// 62,
	"R8_SNORM",						// 63,
	"R8_SINT",						// 64,
	"A8_UNORM",						// 65,
	"R1_UNORM",						// 66,
	"R9G9B9E5_SHAREDEXP",			// 67,
	"R8G8_B8G8_UNORM",				// 68,
	"G8R8_G8B8_UNORM",				// 69,
	"BC1_TYPELESS",					// 70,
	"BC1_UNORM",					// 71,
	"BC1_UNORM_SRGB",				// 72,
	"BC2_TYPELESS",					// 73,
	"BC2_UNORM",					// 74,
	"BC2_UNORM_SRGB",				// 75,
	"BC3_TYPELESS",					// 76,
	"BC3_UNORM",					// 77,
	"BC3_UNORM_SRGB",				// 78,
	"BC4_TYPELESS",					// 79,
	"BC4_UNORM",					// 80,
	"BC4_SNORM",					// 81,
	"BC5_TYPELESS",					// 82,
	"BC5_UNORM",					// 83,
	"BC5_SNORM",					// 84,
	"B5G6R5_UNORM",					// 85,
	"B5G5R5A1_UNORM",				// 86,
	"B8G8R8A8_UNORM",				// 87,
	"B8G8R8X8_UNORM",				// 88,
	"R10G10B10_XR_BIAS_A2_UNORM",	// 89,
	"B8G8R8A8_TYPELESS",			// 90,
	"B8G8R8A8_UNORM_SRGB",			// 91,
	"B8G8R8X8_TYPELESS",			// 92,
	"B8G8R8X8_UNORM_SRGB",			// 93,
	"BC6H_TYPELESS",				// 94,
	"BC6H_UF16",					// 95,
	"BC6H_SF16",					// 96,
	"BC7_TYPELESS",					// 97,
	"BC7_UNORM",					// 98,
	"BC7_UNORM_SRGB",				// 99,
	"AYUV",							// 100,
	"Y410",							// 101,
	"Y416",							// 102,
	"NV12",							// 103,
	"P010",							// 104,
	"P016",							// 105,
	"420_OPAQUE",					// 106,
	"YUY2",							// 107,
	"Y210",							// 108,
	"Y216",							// 109,
	"NV11",							// 110,
	"AI44",							// 111,
	"IA44",							// 112,
	"P8",							// 113,
	"A8P8",							// 114,
	"B4G4R4A4_UNORM",				// 115,
	0,								// 116,
	0,								// 117,
	0,								// 118,
	0,								// 119,
	0,								// 120,
	0,								// 121,
	0,								// 122,
	0,								// 123,
	0,								// 124,
	0,								// 125,
	0,								// 126,
	0,								// 127,
	0,								// 128,
	0,								// 129,
	"P208",							// 130,
	"V208",							// 131,
	"V408",							// 132,
}};


template<> const char *field_names<D3D_PRIMITIVE>::s[]	= {
	"UNDEFINED",					// 0,
	"POINT",						// 1,
	"LINE",							// 2,
	0,0,0,
	"LINE_ADJ",						// 6
	"TRIANGLE_ADJ",					// 7,
	"1_CONTROL_POINT_PATCHLIST",	// 8,
	"2_CONTROL_POINT_PATCHLIST",	// 9,
	"3_CONTROL_POINT_PATCHLIST",	// 10,
	"4_CONTROL_POINT_PATCHLIST",	// 11,
	"5_CONTROL_POINT_PATCHLIST",	// 12,
	"6_CONTROL_POINT_PATCHLIST",	// 13,
	"7_CONTROL_POINT_PATCHLIST",	// 14,
	"8_CONTROL_POINT_PATCHLIST",	// 15,
	"9_CONTROL_POINT_PATCHLIST",	// 16,
	"10_CONTROL_POINT_PATCHLIST",	// 17,
	"11_CONTROL_POINT_PATCHLIST",	// 18,
	"12_CONTROL_POINT_PATCHLIST",	// 19,
	"13_CONTROL_POINT_PATCHLIST",	// 20,
	"14_CONTROL_POINT_PATCHLIST",	// 21,
	"15_CONTROL_POINT_PATCHLIST",	// 22,
	"16_CONTROL_POINT_PATCHLIST",	// 23,
	"17_CONTROL_POINT_PATCHLIST",	// 24,
	"18_CONTROL_POINT_PATCHLIST",	// 25,
	"19_CONTROL_POINT_PATCHLIST",	// 26,
	"20_CONTROL_POINT_PATCHLIST",	// 27,
	"21_CONTROL_POINT_PATCHLIST",	// 28,
	"22_CONTROL_POINT_PATCHLIST",	// 29,
	"23_CONTROL_POINT_PATCHLIST",	// 30,
	"24_CONTROL_POINT_PATCHLIST",	// 31,
	"25_CONTROL_POINT_PATCHLIST",	// 32,
	"26_CONTROL_POINT_PATCHLIST",	// 33,
	"27_CONTROL_POINT_PATCHLIST",	// 34,
	"28_CONTROL_POINT_PATCHLIST",	// 35,
	"29_CONTROL_POINT_PATCHLIST",	// 36,
	"30_CONTROL_POINT_PATCHLIST",	// 37,
	"31_CONTROL_POINT_PATCHLIST",	// 38,
	"32_CONTROL_POINT_PATCHLIST",	// 39,
};

template<> const char *field_names<D3D_PRIMITIVE_TOPOLOGY>::s[]	= {
	"UNDEFINED",					// 0,
	"POINTLIST",	                // 1,
	"LINELIST",	                    // 2,
	"LINESTRIP",	                // 3,
	"TRIANGLELIST",	                // 4,
	"TRIANGLESTRIP",	            // 5,
	"TRIANGLEFAN",					// 6 Xbox extension
	0,                              // 7,
	0,                              // 8,
	0,                              // 9,
	"LINELIST_ADJ",	                // 10,
	"LINESTRIP_ADJ",	            // 11,
	"TRIANGLELIST_ADJ",	            // 12,
	"TRIANGLESTRIP_ADJ",	        // 13,
	0,0,
	0,
    "RECTLIST",						// 17, Xbox extension
    "LINELOOP",						// 18, Xbox extension
    "QUADLIST",						// 19, Xbox extension
    "QUADSTRIP",					// 20, Xbox extension
	0,0,0,0,0,0,0,0,0,0,0,
	0,								// 32,
	"1_CONTROL_POINT_PATCHLIST",	// 33,
	"2_CONTROL_POINT_PATCHLIST",	// 34,
	"3_CONTROL_POINT_PATCHLIST",	// 35,
	"4_CONTROL_POINT_PATCHLIST",	// 36,
	"5_CONTROL_POINT_PATCHLIST",	// 37,
	"6_CONTROL_POINT_PATCHLIST",	// 38,
	"7_CONTROL_POINT_PATCHLIST",	// 39,
	"8_CONTROL_POINT_PATCHLIST",	// 40,
	"9_CONTROL_POINT_PATCHLIST",	// 41,
	"10_CONTROL_POINT_PATCHLIST",	// 42,
	"11_CONTROL_POINT_PATCHLIST",	// 43,
	"12_CONTROL_POINT_PATCHLIST",	// 44,
	"13_CONTROL_POINT_PATCHLIST",	// 45,
	"14_CONTROL_POINT_PATCHLIST",	// 46,
	"15_CONTROL_POINT_PATCHLIST",	// 47,
	"16_CONTROL_POINT_PATCHLIST",	// 48,
	"17_CONTROL_POINT_PATCHLIST",	// 49,
	"18_CONTROL_POINT_PATCHLIST",	// 50,
	"19_CONTROL_POINT_PATCHLIST",	// 51,
	"20_CONTROL_POINT_PATCHLIST",	// 52,
	"21_CONTROL_POINT_PATCHLIST",	// 53,
	"22_CONTROL_POINT_PATCHLIST",	// 54,
	"23_CONTROL_POINT_PATCHLIST",	// 55,
	"24_CONTROL_POINT_PATCHLIST",	// 56,
	"25_CONTROL_POINT_PATCHLIST",	// 57,
	"26_CONTROL_POINT_PATCHLIST",	// 58,
	"27_CONTROL_POINT_PATCHLIST",	// 59,
	"28_CONTROL_POINT_PATCHLIST",	// 60,
	"29_CONTROL_POINT_PATCHLIST",	// 61,
	"30_CONTROL_POINT_PATCHLIST",	// 62,
	"31_CONTROL_POINT_PATCHLIST",	// 63,
	"32_CONTROL_POINT_PATCHLIST",	// 64,
};

template<> field	fields<DXGI_SAMPLE_DESC>::f[] =	{
#undef S
#define	S DXGI_SAMPLE_DESC
	_MAKE_FIELD(S,Count)
	_MAKE_FIELD(S,Quality)
	0,
};

field_prefix<field_value> field_names<D3D_FEATURE_LEVEL>::s	= {"D3D_FEATURE_LEVEL_", (field_value[]) {
	{"9_1",		0x9100},
	{"9_2",		0x9200},
	{"9_3",		0x9300},
	{"10_0",	0xa000},
	{"10_1",	0xa100},
	{"11_0",	0xb000},
	{"11_1",	0xb100},
	{"12_0",	0xc000},
	{"12_1",	0xc100}
}};

field_prefix<const char*> field_names<D3D_SHADER_VARIABLE_CLASS>::s	= {"D3D_SVC_", (const char*[]) {
	"SCALAR",
	"VECTOR",
	"MATRIX_ROWS",
	"MATRIX_COLUMNS",
	"OBJECT",
	"STRUCT",
	"INTERFACE_CLASS",
	"INTERFACE_POINTER",
}};
 
field_prefix<field_bit> field_names<D3D_SHADER_VARIABLE_FLAGS>::s	= {"D3D_SVF_", (field_bit[]) {
	{"D3D_SVF_USERPACKED",					1},
	{"D3D_SVF_USED",						2},
	{"D3D_SVF_INTERFACE_POINTER",			4},
	{"D3D_SVF_INTERFACE_PARAMETER",			8},
	0,
}};
 
field_prefix<const char*> field_names<D3D_SHADER_VARIABLE_TYPE>::s	= {"D3D_SVT_", (const char*[]) {
	"VOID",							// 0,
	"BOOL",							// 1,
	"INT",							// 2,
	"FLOAT",						// 3,
	"STRING",						// 4,
	"TEXTURE",						// 5,
	"TEXTURE1D",					// 6,
	"TEXTURE2D",					// 7,
	"TEXTURE3D",					// 8,
	"TEXTURECUBE",					// 9,
	"SAMPLER",						// 10,
	"SAMPLER1D",					// 11,
	"SAMPLER2D",					// 12,
	"SAMPLER3D",					// 13,
	"SAMPLERCUBE",					// 14,
	"PIXELSHADER",					// 15,
	"VERTEXSHADER",					// 16,
	"PIXELFRAGMENT",				// 17,
	"VERTEXFRAGMENT",				// 18,
	"UINT",							// 19,
	"UINT8",						// 20,
	"GEOMETRYSHADER",				// 21,
	"RASTERIZER",					// 22,
	"DEPTHSTENCIL",					// 23,
	"BLEND",						// 24,
	"BUFFER",						// 25,
	"CBUFFER",						// 26,
	"TBUFFER",						// 27,
	"TEXTURE1DARRAY",				// 28,
	"TEXTURE2DARRAY",				// 29,
	"RENDERTARGETVIEW",				// 30,
	"DEPTHSTENCILVIEW",				// 31,
	"TEXTURE2DMS",					// 32,
	"TEXTURE2DMSARRAY",				// 33,
	"TEXTURECUBEARRAY",				// 34,
	"HULLSHADER",					// 35,
	"DOMAINSHADER",					// 36,
	"INTERFACE_POINTER",			// 37,
	"COMPUTESHADER",				// 38,
	"DOUBLE",						// 39,
	"RWTEXTURE1D",					// 40,
	"RWTEXTURE1DARRAY",				// 41,
	"RWTEXTURE2D",					// 42,
	"RWTEXTURE2DARRAY",				// 43,
	"RWTEXTURE3D",					// 44,
	"RWBUFFER",						// 45,
	"BYTEADDRESS_BUFFER",			// 46,
	"RWBYTEADDRESS_BUFFER",			// 47,
	"STRUCTURED_BUFFER",			// 48,
	"RWSTRUCTURED_BUFFER",			// 49,
	"APPEND_STRUCTURED_BUFFER",		// 50,
	"CONSUME_STRUCTURED_BUFFER",	// 51,
	"MIN8FLOAT",					// 52,
	"MIN10FLOAT",					// 53,
	"MIN16FLOAT",					// 54,
	"MIN12INT",						// 55,
	"MIN16INT",						// 56,
	"MIN16UINT",					// 57,
}};

field_prefix<field_value> field_names<D3D_SHADER_INPUT_FLAGS>::s	= {"D3D_SIF_", (field_value[]) {
	{"USERPACKED",					0x1	},
	{"COMPARISON_SAMPLER",			0x2	},
	{"TEXTURE_COMPONENT_0",			0x4	},
	{"TEXTURE_COMPONENT_1",			0x8	},
	{"TEXTURE_COMPONENTS",			0xc	},
	{"UNUSED",						0x10},
}};
 
field_prefix<const char*> field_names<D3D_SHADER_INPUT_TYPE>::s	= {"D3D_SIT_", (const char*[]) {
	"CBUFFER",
	"TBUFFER",
	"TEXTURE",
	"SAMPLER",
	"UAV_RWTYPED",
	"STRUCTURED",
	"UAV_RWSTRUCTURED",
	"BYTEADDRESS",
	"UAV_RWBYTEADDRESS",
	"UAV_APPEND_STRUCTURED",
	"UAV_CONSUME_STRUCTURED",
	"UAV_RWSTRUCTURED_WITH_COUNTER",
}};
 
template<> const char *field_names<D3D_SHADER_CBUFFER_FLAGS>::s[] = {
	"D3D_CBF_USERPACKED",					// 1,
};

template<> const char *field_names<D3D_CBUFFER_TYPE>::s[] = {
	"D3D_CT_CBUFFER",
	"D3D_CT_TBUFFER",
	"D3D_CT_INTERFACE_POINTERS",
	"D3D_CT_RESOURCE_BIND_INFO",
};
 
field_prefix<field_value> field_names<D3D_NAME>::s	= {"D3D_NAME_", (field_value[]) {
	{"UNDEFINED",						0	},
	{"POSITION",						1	},
	{"CLIP_DISTANCE",					2	},
	{"CULL_DISTANCE",					3	},
	{"RENDER_TARGET_ARRAY_INDEX",		4	},
	{"VIEWPORT_ARRAY_INDEX",			5	},
	{"VERTEX_ID",						6	},
	{"PRIMITIVE_ID",					7	},
	{"INSTANCE_ID",						8	},
	{"IS_FRONT_FACE",					9	},
	{"SAMPLE_INDEX",					10	},
	{"FINAL_QUAD_EDGE_TESSFACTOR",		11	},
	{"FINAL_QUAD_INSIDE_TESSFACTOR",	12	},
	{"FINAL_TRI_EDGE_TESSFACTOR",		13	},
	{"FINAL_TRI_INSIDE_TESSFACTOR",		14	},
	{"FINAL_LINE_DETAIL_TESSFACTOR",	15	},
	{"FINAL_LINE_DENSITY_TESSFACTOR",	16	},
	{"TARGET",							64	},
	{"DEPTH",							65	},
	{"COVERAGE",						66	},
	{"DEPTH_GREATER_EQUAL",				67	},
	{"DEPTH_LESS_EQUAL",				68	},
	{"STENCIL_REF",						69	},
	{"INNER_COVERAGE",					70	},
}};
 
field_prefix<const char*> field_names<D3D_RESOURCE_RETURN_TYPE>::s	= {"D3D_RETURN_TYPE_", (const char*[]) {
	0,
	"UNORM",			// 1,
	"SNORM",			// 2,
	"SINT",				// 3,
	"UINT",				// 4,
	"FLOAT",			// 5,
	"MIXED",			// 6,
	"DOUBLE",			// 7,
	"CONTINUED",		// 8,
}};
 
field_prefix<const char*> field_names<D3D_REGISTER_COMPONENT_TYPE>::s	= {"D3D_REGISTER_COMPONENT_", (const char*[]) {
	"UNKNOWN",			// 0,
	"UINT32",			// 1,
	"SINT32",			// 2,
	"FLOAT32",			// 3,
}};
 
field_prefix<const char*> field_names<D3D_TESSELLATOR_DOMAIN>::s	= {"D3D_TESSELLATOR_DOMAIN_", (const char*[]) {
	"UNDEFINED",		// 0,
	"ISOLINE",			// 1,
	"TRI",				// 2,
	"QUAD",				// 3,
}};
 
field_prefix<const char*> field_names<D3D_TESSELLATOR_PARTITIONING>::s	= {"D3D_TESSELLATOR_PARTITIONING_", (const char*[]) {
	"UNDEFINED",		// 0,
	"INTEGER",			// 1,
	"POW2",				// 2,
	"FRACTIONAL_ODD",	// 3,
	"FRACTIONAL_EVEN",	// 4,
}};

field_prefix<const char*> field_names<D3D_TESSELLATOR_OUTPUT_PRIMITIVE>::s	= {"D3D_TESSELLATOR_OUTPUT_", (const char*[]) {
	"UNDEFINED",		// 0,
	"POINT",			// 1,
	"LINE",				// 2,
	"TRIANGLE_CW",		// 3,
	"TRIANGLE_CCW",		// 4,
}};

field_prefix<field_value> field_names<D3D_MIN_PRECISION>::s	= {"D3D_MIN_PRECISION_", (field_value[]) {
	{"DEFAULT",			0	},
	{"FLOAT_16",		1	},
	{"FLOAT_2_8",		2	},
	{"RESERVED",		3	},
	{"SINT_16",			4	},
	{"UINT_16",			5	},
	{"ANY_16",			0xf0},
	{"ANY_10",			0xf1},
}};

field_prefix<const char*> field_names<D3D_INTERPOLATION_MODE>::s	= {"D3D_INTERPOLATION_", (const char*[]) {
	"UNDEFINED",					// 0,
	"CONSTANT",						// 1,
	"LINEAR",						// 2,
	"LINEAR_CENTROID",				// 3,
	"LINEAR_NOPERSPECTIVE",			// 4,
	"LINEAR_NOPERSPECTIVE_CENTROID",// 5,
	"LINEAR_SAMPLE",				// 6,
	"LINEAR_NOPERSPECTIVE_SAMPLE",	// 7
}};

field_prefix<const char*> field_names<D3D_PARAMETER_FLAGS>::s	= {"D3D_PF_", (const char*[]) {
	"NONE",							// 0,
	"IN",							// 1,
	"OUT",							// 2,
	"IN_OUT",						// 3,
}};

field_prefix<const char*> field_names<D3D_SRV_DIMENSION>::s	= {"D3D_SRV_DIMENSION_", (const char*[]) {
	"UNKNOWN",						//0,
	"BUFFER",						//1,
	"TEXTURE1D",					//2,
	"TEXTURE1DARRAY",				//3,
	"TEXTURE2D",					//4,
	"TEXTURE2DARRAY",				//5,
	"TEXTURE2DMS",					//6,
	"TEXTURE2DMSARRAY",				//7,
	"TEXTURE3D",					//8,
	"TEXTURECUBE",					//9,
	"TEXTURECUBEARRAY",				//10
}};

}