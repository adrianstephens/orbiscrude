#include "diffie-hellman.h"

namespace iso {

//768-bit MODP Group id 1: The prime is: 2^768 - 2 ^704 - 1 + 2^64 * { [2^638 pi] + 149686 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A63A3620, 0xFFFFFFFFFFFFFFFF
>	MODP768;

//1024-bit MODP Group id 2: The prime is 2^1024 - 2^960 - 1 + 2^64 * { [2^894 pi] + 129093 }.
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE65381, 0xFFFFFFFFFFFFFFFF
>	MODP1024;


//1536-bit MODP Group id 5: The prime is: 2^1536 - 2^1472 - 1 + 2^64 * { [2^1406 pi] + 741804 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA237327, 0xFFFFFFFFFFFFFFFF
>	MODP1536;

//2048-bit MODP Group id 14. This prime is: 2^2048 - 2^1984 - 1 + 2^64 * { [2^1918 pi] + 124476 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA18217C, 0x32905E462E36CE3B,
	0xE39E772C180E8603, 0x9B2783A2EC07A28F, 0xB5C55DF06F4C52C9, 0xDE2BCBF695581718
>	MODP2048;

//3072-bit MODP Group id 15. This prime is: 2^3072 - 2^3008 - 1 + 2^64 * { [2^2942 pi] + 1690314 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA18217C, 0x32905E462E36CE3B,
	0xE39E772C180E8603, 0x9B2783A2EC07A28F, 0xB5C55DF06F4C52C9, 0xDE2BCBF695581718,
	0x3995497CEA956AE5, 0x15D2261898FA0510, 0x15728E5A8AAAC42D, 0xAD33170D04507A33,
	0xA85521ABDF1CBA64, 0xECFB850458DBEF0A, 0x8AEA71575D060C7D, 0xB3970F85A6E1E4C7,
	0xABF5AE8CDB0933D7, 0x1E8C94E04A25619D, 0xCEE3D2261AD2EE6B, 0xF12FFA06D98A0864,
	0xD87602733EC86A64, 0x521F2B18177B200C, 0xBBE117577A615D6C, 0x770988C0BAD946E2,
	0x08E24FA074E5AB31, 0x43DB5BFCE0FD108E, 0x4B82D120A93AD2CA, 0xFFFFFFFFFFFFFFFF
>	MODP3072;

//4096-bit MODP Group id 16. This prime is: 2^4096 - 2^4032 - 1 + 2^64 * { [2^3966 pi] + 240904 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA18217C, 0x32905E462E36CE3B,
	0xE39E772C180E8603, 0x9B2783A2EC07A28F, 0xB5C55DF06F4C52C9, 0xDE2BCBF695581718,
	0x3995497CEA956AE5, 0x15D2261898FA0510, 0x15728E5A8AAAC42D, 0xAD33170D04507A33,
	0xA85521ABDF1CBA64, 0xECFB850458DBEF0A, 0x8AEA71575D060C7D, 0xB3970F85A6E1E4C7,
	0xABF5AE8CDB0933D7, 0x1E8C94E04A25619D, 0xCEE3D2261AD2EE6B, 0xF12FFA06D98A0864,
	0xD87602733EC86A64, 0x521F2B18177B200C, 0xBBE117577A615D6C, 0x770988C0BAD946E2,
	0x08E24FA074E5AB31, 0x43DB5BFCE0FD108E, 0x4B82D120A9210801, 0x1A723C12A787E6D7,
	0x88719A10BDBA5B26, 0x99C327186AF4E23C, 0x1A946834B6150BDA, 0x2583E9CA2AD44CE8,
	0xDBBBC2DB04DE8EF9, 0x2E8EFC141FBECAA6, 0x287C59474E6BC05D, 0x99B2964FA090C3A2,
	0x233BA186515BE7ED, 0x1F612970CEE2D7AF, 0xB81BDD762170481C, 0xD0069127D5B05AA9,
	0x93B4EA988D8FDDC1, 0x86FFB7DC90A6C08F, 0x4DF435C934063199, 0xFFFFFFFFFFFFFFFF
>	MODP4096;

//6144-bit MODP Group id 17. This prime is: 2^6144 - 2^6080 - 1 + 2^64 * { [2^6014 pi] + 929484 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA18217C, 0x32905E462E36CE3B,
	0xE39E772C180E8603, 0x9B2783A2EC07A28F, 0xB5C55DF06F4C52C9, 0xDE2BCBF695581718,
	0x3995497CEA956AE5, 0x15D2261898FA0510, 0x15728E5A8AAAC42D, 0xAD33170D04507A33,
	0xA85521ABDF1CBA64, 0xECFB850458DBEF0A, 0x8AEA71575D060C7D, 0xB3970F85A6E1E4C7,
	0xABF5AE8CDB0933D7, 0x1E8C94E04A25619D, 0xCEE3D2261AD2EE6B, 0xF12FFA06D98A0864,
	0xD87602733EC86A64, 0x521F2B18177B200C, 0xBBE117577A615D6C, 0x770988C0BAD946E2,
	0x08E24FA074E5AB31, 0x43DB5BFCE0FD108E, 0x4B82D120A9210801, 0x1A723C12A787E6D7,
	0x88719A10BDBA5B26, 0x99C327186AF4E23C, 0x1A946834B6150BDA, 0x2583E9CA2AD44CE8,
	0xDBBBC2DB04DE8EF9, 0x2E8EFC141FBECAA6, 0x287C59474E6BC05D, 0x99B2964FA090C3A2,
	0x233BA186515BE7ED, 0x1F612970CEE2D7AF, 0xB81BDD762170481C, 0xD0069127D5B05AA9,
	0x93B4EA988D8FDDC1, 0x86FFB7DC90A6C08F, 0x4DF435C934028492, 0x36C3FAB4D27C7026,
	0xC1D4DCB2602646DE, 0xC9751E763DBA37BD, 0xF8FF9406AD9E530E, 0xE5DB382F413001AE,
	0xB06A53ED9027D831, 0x179727B0865A8918, 0xDA3EDBEBCF9B14ED, 0x44CE6CBACED4BB1B,
	0xDB7F1447E6CC254B, 0x332051512BD7AF42, 0x6FB8F401378CD2BF, 0x5983CA01C64B92EC,
	0xF032EA15D1721D03, 0xF482D7CE6E74FEF6, 0xD55E702F46980C82, 0xB5A84031900B1C9E,
	0x59E7C97FBEC7E8F3, 0x23A97A7E36CC88BE, 0x0F1D45B7FF585AC5, 0x4BD407B22B4154AA,
	0xCC8F6D7EBF48E1D8, 0x14CC5ED20F8037E0, 0xA79715EEF29BE328, 0x06A1D58BB7C5DA76,
	0xF550AA3D8A1FBFF0, 0xEB19CCB1A313D55C, 0xDA56C9EC2EF29632, 0x387FE8D76E3C0468,
	0x043E8F663F4860EE, 0x12BF2D5B0B7474D6, 0xE694F91E6DCC4024, 0xFFFFFFFFFFFFFFFF
> MODP6144;

//8192-bit MODP Group id 18. This prime is: 2^8192 - 2^8128 - 1 + 2^64 * { [2^8062 pi] + 4743158 }
mpi_const<uint64,
	0xFFFFFFFFFFFFFFFF, 0xC90FDAA22168C234, 0xC4C6628B80DC1CD1, 0x29024E088A67CC74,
	0x020BBEA63B139B22, 0x514A08798E3404DD, 0xEF9519B3CD3A431B, 0x302B0A6DF25F1437,
	0x4FE1356D6D51C245, 0xE485B576625E7EC6, 0xF44C42E9A637ED6B, 0x0BFF5CB6F406B7ED,
	0xEE386BFB5A899FA5, 0xAE9F24117C4B1FE6, 0x49286651ECE45B3D, 0xC2007CB8A163BF05,
	0x98DA48361C55D39A, 0x69163FA8FD24CF5F, 0x83655D23DCA3AD96, 0x1C62F356208552BB,
	0x9ED529077096966D, 0x670C354E4ABC9804, 0xF1746C08CA18217C, 0x32905E462E36CE3B,
	0xE39E772C180E8603, 0x9B2783A2EC07A28F, 0xB5C55DF06F4C52C9, 0xDE2BCBF695581718,
	0x3995497CEA956AE5, 0x15D2261898FA0510, 0x15728E5A8AAAC42D, 0xAD33170D04507A33,
	0xA85521ABDF1CBA64, 0xECFB850458DBEF0A, 0x8AEA71575D060C7D, 0xB3970F85A6E1E4C7,
	0xABF5AE8CDB0933D7, 0x1E8C94E04A25619D, 0xCEE3D2261AD2EE6B, 0xF12FFA06D98A0864,
	0xD87602733EC86A64, 0x521F2B18177B200C, 0xBBE117577A615D6C, 0x770988C0BAD946E2,
	0x08E24FA074E5AB31, 0x43DB5BFCE0FD108E, 0x4B82D120A9210801, 0x1A723C12A787E6D7,
	0x88719A10BDBA5B26, 0x99C327186AF4E23C, 0x1A946834B6150BDA, 0x2583E9CA2AD44CE8,
	0xDBBBC2DB04DE8EF9, 0x2E8EFC141FBECAA6, 0x287C59474E6BC05D, 0x99B2964FA090C3A2,
	0x233BA186515BE7ED, 0x1F612970CEE2D7AF, 0xB81BDD762170481C, 0xD0069127D5B05AA9,
	0x93B4EA988D8FDDC1, 0x86FFB7DC90A6C08F, 0x4DF435C934028492, 0x36C3FAB4D27C7026,
	0xC1D4DCB2602646DE, 0xC9751E763DBA37BD, 0xF8FF9406AD9E530E, 0xE5DB382F413001AE,
	0xB06A53ED9027D831, 0x179727B0865A8918, 0xDA3EDBEBCF9B14ED, 0x44CE6CBACED4BB1B,
	0xDB7F1447E6CC254B, 0x332051512BD7AF42, 0x6FB8F401378CD2BF, 0x5983CA01C64B92EC,
	0xF032EA15D1721D03, 0xF482D7CE6E74FEF6, 0xD55E702F46980C82, 0xB5A84031900B1C9E,
	0x59E7C97FBEC7E8F3, 0x23A97A7E36CC88BE, 0x0F1D45B7FF585AC5, 0x4BD407B22B4154AA,
	0xCC8F6D7EBF48E1D8, 0x14CC5ED20F8037E0, 0xA79715EEF29BE328, 0x06A1D58BB7C5DA76,
	0xF550AA3D8A1FBFF0, 0xEB19CCB1A313D55C, 0xDA56C9EC2EF29632, 0x387FE8D76E3C0468,
	0x043E8F663F4860EE, 0x12BF2D5B0B7474D6, 0xE694F91E6DBE1159, 0x74A3926F12FEE5E4,
	0x38777CB6A932DF8C, 0xD8BEC4D073B931BA, 0x3BC832B68D9DD300, 0x741FA7BF8AFC47ED,
	0x2576F6936BA42466, 0x3AAB639C5AE4F568, 0x3423B4742BF1C978, 0x238F16CBE39D652D,
	0xE3FDB8BEFC848AD9, 0x22222E04A4037C07, 0x13EB57A81A23F0C7, 0x3473FC646CEA306B,
	0x4BCBC8862F8385DD, 0xFA9D4B7FA2C087E8, 0x79683303ED5BDD3A, 0x062B3CF5B3A278A6,
	0x6D2A13F83F44F82D, 0xDF310EE074AB6A36, 0x4597E899A0255DC1, 0x64F31CC50846851D,
	0xF9AB48195DED7EA1, 0xB1D510BD7EE74D73, 0xFAF36BC31ECFA268, 0x359046F4EB879F92,
	0x4009438B481C6CD7, 0x889A002ED5EE382B, 0xC9190DA6FC026E47, 0x9558E4475677E9AA,
	0x9E3050E2765694DF, 0xC81F56E880B96E71, 0x60C980DD98EDD3DF, 0xFFFFFFFFFFFFFFFF
> MODP8192;

struct DH_params {
	mpi p, g, q;
};

static const DH_params dh_params[] = {
{//dh1024_160 = {
	mpi_const<uint64,
		0xB10B8F96A080E01D, 0xDE92DE5EAE5D54EC, 0x52C99FBCFB06A3C6,	0x9A6A9DCA52D23B61,
		0x6073E28675A23D18, 0x9838EF1E2EE652C0,	0x13ECB4AEA9061123, 0x24975C3CD49B83BF,
		0xACCBDD7D90C4BD70, 0x98488E9C219A7372, 0x4EFFD6FAE5644738, 0xFAA31A4FF55BCCC0,
		0xA151AF5F0DC8B4BD, 0x45BF37DF365C1A65, 0xE68CFDA76D4DA708,	0xDF1FB2BC2E4A4371
	>(),
	mpi_const<uint64,
		0xA4D1CBD5C3FD3412, 0x6765A442EFB99905, 0xF8104DD258AC507F,	0xD6406CFF14266D31,
		0x266FEA1E5C41564B, 0x777E690F5504F213,	0x160217B4B01B886A, 0x5E91547F9E2749F4,
		0xD7FBD7D3B9A92EE1,	0x909D0D2263F80A76, 0xA6A24C087A091F53, 0x1DBF0A0169B6A28A,
		0xD662A4D18E73AFA3, 0x2D779D5918D08BC8, 0x858F4DCEF97C2A24,	0x855E6EEB22B3B2E5
	>(),
	mpi_const<uint64,
		0xF518AA87, 0x81A8DF278ABA4E7D, 0x64B7CB9D49462353
	>(),
},{//static const DH_params dh2048_224 = {
	mpi_const<uint64,
		0xAD107E1E9123A9D0, 0xD660FAA79559C51F, 0xA20D64E5683B9FD1,	0xB54B1597B61D0A75,
		0xE6FA141DF95A56DB, 0xAF9A3C407BA1DF15,	0xEB3D688A309C180E, 0x1DE6B85A1274A0A6,
		0x6D3F8152AD6AC212,	0x9037C9EDEFDA4DF8, 0xD91E8FEF55B7394B, 0x7AD5B7D0B6C12207,
		0xC9F98D11ED34DBF6, 0xC6BA0B2C8BBC27BE, 0x6A00E0A0B9C49708,	0xB3BF8A3170918836,
		0x81286130BC8985DB, 0x1602E714415D9330,	0x278273C7DE31EFDC, 0x7310F7121FD5A074,
		0x15987D9ADC0A486D,	0xCDF93ACC44328387, 0x315D75E198C641A4, 0x80CD86A1B9E587E8,
		0xBE60E69CC928B2B9, 0xC52172E413042E9B, 0x23F10B0E16E79763,	0xC9B53DCF4BA80A29,
		0xE3FB73C16B8E75B9, 0x7EF363E2FFA31F71,	0xCF9DE5384E71B81C, 0x0AC4DFFE0C10E64F
	>(),
	mpi_const<uint64,
		0xAC4032EF4F2D9AE3, 0x9DF30B5C8FFDAC50, 0x6CDEBE7B89998CAF,	0x74866A08CFE4FFE3,
		0xA6824A4E10B9A6F0, 0xDD921F01A70C4AFA,	0xAB739D7700C29F52, 0xC57DB17C620A8652,
		0xBE5E9001A8D66AD7,	0xC17669101999024A, 0xF4D027275AC1348B, 0xB8A762D0521BC98A,
		0xE247150422EA1ED4, 0x09939D54DA7460CD, 0xB5F6C6B250717CBE,	0xF180EB34118E98D1,
		0x19529A45D6F83456, 0x6E3025E316A330EF,	0xBB77A86F0C1AB15B, 0x051AE3D428C8F8AC,
		0xB70A8137150B8EEB,	0x10E183EDD19963DD, 0xD9E263E4770589EF, 0x6AA21E7F5F2FF381,
		0xB539CCE3409D13CD, 0x566AFBB48D6C0191, 0x81E1BCFE94B30269,	0xEDFE72FE9B6AA4BD,
		0x7B5A0F1C71CFFF4C, 0x19C418E1F6EC0179,	0x81BC087F2A7065B3, 0x84B890D3191F2BFA
	>(),
	mpi_const<uint64,
		0x801C0D34, 0xC58D93FE99717710, 0x1F80535A4738CEBC, 0xBF389A99B36371EB
	>(),
},{//{static const DH_params dh2048_256 = {
	mpi_const<uint64,
		0x87A8E61DB4B6663C, 0xFFBBD19C65195999, 0x8CEEF608660DD0F2,	0x5D2CEED4435E3B00,
		0xE00DF8F1D61957D4, 0xFAF7DF4561B2AA30,	0x16C3D91134096FAA, 0x3BF4296D830E9A7C,
		0x209E0C6497517ABD,	0x5A8A9D306BCF67ED, 0x91F9E6725B4758C0, 0x22E0B1EF4275BF7B,
		0x6C5BFC11D45F9088, 0xB941F54EB1E59BB8, 0xBC39A0BF12307F5C,	0x4FDB70C581B23F76,
		0xB63ACAE1CAA6B790, 0x2D52526735488A0E,	0xF13C6D9A51BFA4AB, 0x3AD8347796524D8E,
		0xF6A167B5A41825D9,	0x67E144E514056425, 0x1CCACB83E6B486F6, 0xB3CA3F7971506026,
		0xC0B857F689962856, 0xDED4010ABD0BE621, 0xC3A3960A54E710C3,	0x75F26375D7014103,
		0xA4B54330C198AF12, 0x6116D2276E11715F,	0x693877FAD7EF09CA, 0xDB094AE91E1A1597
	>(),
	mpi_const<uint64,
		0x3FB32C9B73134D0B, 0x2E77506660EDBD48, 0x4CA7B18F21EF2054,	0x07F4793A1A0BA125,
		0x10DBC15077BE463F, 0xFF4FED4AAC0BB555,	0xBE3A6C1B0C6B47B1, 0xBC3773BF7E8C6F62,
		0x901228F8C28CBB18,	0xA55AE31341000A65, 0x0196F931C77A57F2, 0xDDF463E5E9EC144B,
		0x777DE62AAAB8A862, 0x8AC376D282D6ED38, 0x64E67982428EBC83,	0x1D14348F6F2F9193,
		0xB5045AF2767164E1, 0xDFC967C1FB3F2E55,	0xA4BD1BFFE83B9C80, 0xD052B985D182EA0A,
		0xDB2A3B7313D3FE14,	0xC8484B1E052588B9, 0xB7D2BBD2DF016199, 0xECD06E1557CD0915,
		0xB3353BBB64E0EC37, 0x7FD028370DF92B52, 0xC7891428CDC67EB6,	0x184B523D1DB246C3,
		0x2F63078490F00EF8, 0xD647D148D4795451,	0x5E2327CFEF98C582, 0x664B4C0F6CC41659
	>(),
	mpi_const<uint64,
		0x8CF83642A709A097, 0xB447997640129DA2, 0x99B1A47D1EB3750B,	0xA308B0FE64F5FBD3
	>(),
}};


mpi generate_prime(vrng &&rng, int bits, int add, int rem) {
	int		checks	= prime_checker::num_checks(bits);
	uint16	*mods	= new uint16[num_elements(primes)];
	mpi		r;

	for (bool is_prime = false; !is_prime;) {
		r = mpi::random(rng, bits);
		r.set_bit(0);
		r.set_bit(bits - 1);

		r -= r % add;	// we need ((r-rem) % add) == 0
		int	delta = rem;

		for (int i = 1; i < num_elements(primes); i++)
			mods[i] = r % primes[i];

		// check that r is a prime
		for (int i = 1; i < num_elements(primes); i++) {
			if ((mods[i] + delta) % primes[i] <= 1) {
				delta += add;
				i = 0;
			}
		}

		r			+= delta;
		is_prime	= true;

		prime_checker	checker(r);
		for (int i = 0; is_prime && i < checks; i++)
			is_prime = !checker.check(rng);
	}
	delete[] mods;
	return r;
}

// for "safe prime" generation, check that (p-1)/2 is prime
mpi generate_safe_prime(vrng &&rng, int bits, int add, int rem) {
	int		checks	= prime_checker::num_checks(bits);
	uint16	*pmods	= new uint16[num_elements(primes)];
	uint16	*qmods	= new uint16[num_elements(primes)];
	int		qadd	= add >> 1;
	mpi		p;

	for (bool is_prime = false; !is_prime;) {
		mpi	q		= mpi::random(rng, bits - 1);
		q.set_bit(0);
		q.set_bit(bits - 1);

		q	-= q % qadd;	// we need ((rnd-rem) % add) == 0
		p	= q << 1;
		int	delta = rem;

		for (int i = 1; i < num_elements(primes); i++) {
			pmods[i] = p % primes[i];
			qmods[i] = q % primes[i];
		}

		// check that p and q are prime
		for (int i = 1; i < num_elements(primes); i++) {
			if ((pmods[i] + delta) % primes[i] == 0 || (qmods[i] + delta / 2) % primes[i] == 0) {
				delta += add;
				i = 0;
			}
		}

		p			+= delta;
		q			+= delta / 2;
		is_prime	= true;

		prime_checker	p_checker(p);
		prime_checker	q_checker(q);
		for (int i = 0; is_prime && i < checks; i++)
			is_prime = !p_checker.check(rng) && !q_checker.check(rng);
	}
	delete[] pmods;
	delete[] qmods;
	return p;
}

void DH::generate_private(vrng &&rng, param(mpi) q) {
	do
		priv_key = mpi::random_to(rng, q);
	while (priv_key <= 1);
}

void DH::generate_private(vrng &&rng, int subprime_len) {
	if (subprime_len == 0)
		subprime_len = p.num_bits() - 1;
	mpi	priv = mpi::random(rng, subprime_len);
	priv_key.set_bit(subprime_len - 1);
}

malloc_block DH::get_public() const {
	return exp(g, priv_key).save_all();
}

bool DH::check_public_key(param(mpi) key) const {
	return key > zero && key < p;
	// Check peer_key^q == 1 mod p
	//if (q != zero && exp(peer_key, q) != 1)
	//	return 0;
}

malloc_block DH::shared_secret(param(mpi) peer_pub_key) const {
/*	if (peer_key < 1 || peer_key > p)
		return 0;

	// Check peer_key^q == 1 mod p
	if (q != zero && exp(peer_key, q) != 1)
		return 0;
*/
	return exp(peer_pub_key, priv_key).save_all();
}

DH::DH(vrng &&rng, int prime_len, int subprime_len, int generator) {
	static const mpi primes[] = {
		MODP768,
		MODP1024,
		MODP1536,
		MODP2048,
		MODP3072,
		MODP4096,
		MODP6144,
		MODP8192,
	};

	if (generator == 0) {
		for (auto &i : dh_params) {
			if (i.p.num_bits() == prime_len && i.q.num_bits() == subprime_len) {
				init(i.p, i.g);
				generate_private(move(rng), i.q);
				return;
			}
		}
		generator = 2;
	}

	generate_private(move(rng), subprime_len);

	int add, rem;
	if (generator == 2) {
		for (auto &i : primes) {
			if (i.num_bits() == prime_len) {
				init(i, mpi(generator));
				return;
			}
		}
		add = 24;
		rem = 11;

	} else if (generator == 5) {
		add = 10;
		rem = 3;

	} else {
		add = 2;
		rem = 1;
	}
	init(generate_safe_prime(move(rng), prime_len, add, rem), mpi(generator));
}

} // namespace iso
