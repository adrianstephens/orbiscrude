#include "iso/iso_files.h"
#include "archive_help.h"
#include "filetypes/code/elf.h"

#include "codec/aes.h"
#include "codec/cbc.h"
#include "codec/cfb.h"

#include "hashes/sha.h"

using namespace iso;

enum sce_key {
	KEY_LV0,
	KEY_LV1,
	KEY_LV2,
	KEY_APP,
	KEY_ISO,
	KEY_LDR,
	KEY_PKG,
	KEY_SPP,
	_KEY_NUM
};

struct key_info {
	uint32	ctype;
	uint8	key[32];
	uint8	iv[16];
	uint8	pub[40];
	uint8	priv[21];
};

struct key_array {
	uint32		n;
	key_info	**keys;
	template<int N> key_array(key_info *(&_keys)[N]) : n(N), keys(_keys) {}
	const key_info&	operator[](int i) const { return *keys[i]; }
};

static uint8 curves[] = {
  0x54, 0x01, 0x2F, 0xE0, 0x18, 0x84, 0x93, 0x3D,  0x70, 0x43, 0x16, 0x6E, 0x26, 0x03, 0xB7, 0x25,  0xC2, 0xB5, 0x77, 0xE2, 0x54, 0x01, 0x2F, 0xE0,  0x18, 0x84, 0x93, 0x3D, 0x70, 0x43, 0x16, 0x6E,
  0x26, 0x03, 0xB7, 0x25, 0xC2, 0xB5, 0x77, 0xE5,  0x7E, 0xD5, 0x4B, 0x21, 0x53, 0x34, 0x87, 0x88,  0xB7, 0x7D, 0x44, 0xE3, 0x25, 0x69, 0x1C, 0x5D,  0xD6, 0xDA, 0xE6, 0xC9, 0xFF, 0x54, 0x01, 0x2F,
  0xE0, 0x18, 0x84, 0x93, 0x3D, 0x70, 0x43, 0xED,  0xF5, 0x66, 0x08, 0x72, 0xD1, 0x79, 0xA3, 0x29,  0x20, 0x8B, 0xBC, 0x1A, 0x83, 0x9D, 0xBC, 0x7F,  0x7B, 0x12, 0x8C, 0x61, 0xB1, 0xD4, 0xCC, 0xA2,
  0x92, 0x3A, 0x63, 0xB6, 0x18, 0x68, 0x81, 0xDF,  0x33, 0xC7, 0x9E, 0xEE, 0x04, 0xA7, 0x0E, 0x65,  0x45, 0xA6, 0xB6, 0x47, 0xFB, 0xEE, 0xA3, 0xD5,  0x26, 0x04, 0x41, 0x9A, 0xF4, 0x06, 0x34, 0x78,
  0x1C, 0x3E, 0x0E, 0x8A, 0x02, 0x1C, 0xA0, 0x0A,  0x85, 0x8E, 0xDD, 0xE3, 0xE4, 0x04, 0x41, 0x9A,  0xF4, 0x06, 0x34, 0x78, 0x1C, 0x3E, 0x0E, 0x8A,  0x02, 0x1C, 0xA0, 0x0A, 0x85, 0x8E, 0xDD, 0xE3,
  0xE7, 0x09, 0xF2, 0x5A, 0x8C, 0x7D, 0x7B, 0x8B,  0xB1, 0xCD, 0x13, 0xA4, 0x16, 0xF3, 0x0A, 0x3B,  0x61, 0x8E, 0x9D, 0x2D, 0x84, 0xFF, 0x04, 0x41,  0x9A, 0xF4, 0x06, 0x34, 0x78, 0x1C, 0x3E, 0x0C,
  0xEC, 0xFD, 0x48, 0x9A, 0x30, 0x1D, 0xEB, 0x27,  0xF4, 0x20, 0x50, 0x80, 0x10, 0x4F, 0x15, 0xDC,  0x38, 0x54, 0xCC, 0x8B, 0xC0, 0xF0, 0xD7, 0xF9,  0xCC, 0x9E, 0xBB, 0xCA, 0x6D, 0x0E, 0x5A, 0x04,
  0x39, 0x5A, 0x26, 0x3C, 0x5B, 0x29, 0xBC, 0xF2,  0x34, 0x08, 0xA7, 0x4D, 0x1B, 0xC8, 0xD8, 0x37,  0x68, 0x53, 0x05, 0xA8, 0xF7, 0xF8, 0xA7, 0xC9,  0x80, 0x27, 0xA0, 0x96, 0xC8, 0x47, 0x74, 0xC1,
  0x38, 0x71, 0x69, 0xA0, 0xC2, 0x8E, 0x05, 0xA8,  0xF7, 0xF8, 0xA7, 0xC9, 0x80, 0x27, 0xA0, 0x96,  0xC8, 0x47, 0x74, 0xC1, 0x38, 0x71, 0x69, 0xA0,  0xC2, 0x91, 0x84, 0x36, 0x95, 0x3C, 0xD2, 0xBC,
  0xEB, 0xC6, 0x7D, 0x0F, 0x7F, 0x0A, 0xA4, 0x89,  0x33, 0x08, 0x0C, 0xDB, 0x64, 0x35, 0xFF, 0x05,  0xA8, 0xF7, 0xF8, 0xA7, 0xC9, 0x80, 0x27, 0xA0,  0x96, 0xD7, 0x32, 0x79, 0x79, 0x19, 0x33, 0x36,
  0x3D, 0x6E, 0xDE, 0xAA, 0xD7, 0xC6, 0x03, 0x2B,  0xD8, 0x71, 0xA9, 0x78, 0x4F, 0xF0, 0xCD, 0xEB,  0x75, 0x84, 0xAB, 0x7A, 0xCF, 0x31, 0x8D, 0x62,  0xFF, 0x85, 0x2C, 0x61, 0xEE, 0x50, 0x3E, 0x5C,
  0xC7, 0x82, 0x8C, 0x48, 0x85, 0xB3, 0xDA, 0x0E,  0x6B, 0x54, 0xC5, 0x46, 0x08, 0xF3, 0x18, 0x3F,  0xED, 0xBE, 0x13, 0x17, 0xC9, 0x8F, 0x31, 0x33,  0x67, 0x52, 0x72, 0xE2, 0xC9, 0xCC, 0x4C, 0x46,
  0x08, 0xF3, 0x18, 0x3F, 0xED, 0xBE, 0x13, 0x17,  0xC9, 0x8F, 0x31, 0x33, 0x67, 0x52, 0x72, 0xE2,  0xC9, 0xCC, 0x4F, 0xC2, 0xA9, 0x6E, 0x70, 0x93,  0x63, 0x06, 0xC3, 0xDB, 0xF4, 0xBC, 0xA9, 0xAC,
  0xBB, 0xE2, 0xD7, 0x89, 0x36, 0x1E, 0xB4, 0xFF,  0x46, 0x08, 0xF3, 0x18, 0x3F, 0xED, 0xBE, 0x13,  0x17, 0xCA, 0xB9, 0x12, 0xD8, 0x74, 0xFF, 0x08,  0x7A, 0x7B, 0xF2, 0x68, 0x80, 0x12, 0x99, 0x13,
  0x82, 0x7F, 0x8A, 0xBE, 0x85, 0x38, 0x91, 0xA4,  0xCE, 0x4C, 0xFF, 0xBC, 0xE6, 0x9C, 0x70, 0xF1,  0xA8, 0x84, 0xD0, 0xB8, 0x3C, 0x23, 0x21, 0xC0,  0x3D, 0x6C, 0xEB, 0xAB, 0xAC, 0x45, 0x91, 0xDD,
  0x96, 0x06, 0xD1, 0x29, 0x2E, 0x27, 0x12, 0xC5,  0x11, 0x9A, 0x3D, 0x5F, 0x80, 0x73, 0x6A, 0x2D,  0x72, 0x31, 0x92, 0x6D, 0x46, 0x63, 0x5C, 0xF2,  0x2E, 0x27, 0x12, 0xC5, 0x11, 0x9A, 0x3D, 0x5F,
  0x80, 0x73, 0x6A, 0x2D, 0x72, 0x31, 0x92, 0x6D,  0x46, 0x63, 0x5C, 0xF5, 0x44, 0xFE, 0xBA, 0xA3,  0xAA, 0xEF, 0x5D, 0x19, 0x62, 0xA9, 0x8D, 0x2E,  0xE7, 0x86, 0xF3, 0x48, 0x80, 0xAF, 0x00, 0x0C,
  0xFF, 0x2E, 0x27, 0x12, 0xC5, 0x11, 0x9A, 0x3D,  0x5F, 0x80, 0x74, 0xBF, 0x81, 0x9B, 0xC7, 0x43,  0xD4, 0xB8, 0x96, 0x94, 0x7A, 0xC8, 0xAD, 0x27,  0xEA, 0xF1, 0xCF, 0x7D, 0xEF, 0x09, 0x00, 0xA9,
  0x6B, 0x18, 0x88, 0xDF, 0xD6, 0x1B, 0x83, 0xA2,  0xC6, 0x4B, 0x54, 0x21, 0xFE, 0xFA, 0x04, 0xA7,  0xFF, 0xE6, 0x15, 0x3E, 0x42, 0x55, 0xD5, 0x8E,  0x2B, 0x79, 0x6D, 0x0C, 0x73, 0x7F, 0x29, 0xC7,
  0xA6, 0x51, 0x48, 0xA0, 0xAC, 0xED, 0xC2, 0xBE,  0xB1, 0x01, 0xD7, 0x15, 0x09, 0xE0, 0xBB, 0xE3,  0xBC, 0x7F, 0x29, 0xC7, 0xA6, 0x51, 0x48, 0xA0,  0xAC, 0xED, 0xC2, 0xBE, 0xB1, 0x01, 0xD7, 0x15,
  0x09, 0xE0, 0xBB, 0xE3, 0xBF, 0x88, 0x49, 0xC4,  0xE1, 0xA9, 0x46, 0x60, 0xFA, 0x4F, 0x56, 0x55,  0xF7, 0x64, 0x4C, 0x65, 0xBF, 0x32, 0x0B, 0xCF,  0xF0, 0xFF, 0x7F, 0x29, 0xC7, 0xA6, 0x51, 0x48,
  0xA0, 0xAC, 0xED, 0xC3, 0x6F, 0xDF, 0xB9, 0xCA,  0x2E, 0x81, 0x6C, 0x1F, 0xA6, 0x06, 0x89, 0xED,  0x20, 0x48, 0xC5, 0x54, 0xA1, 0xB6, 0x0E, 0xC9,  0x1F, 0xFE, 0x8C, 0x91, 0x4E, 0x4F, 0x4B, 0x73,
  0xE1, 0x34, 0xC4, 0x10, 0x08, 0xE6, 0xC0, 0xAC,  0xD4, 0xB8, 0x0D, 0xB4, 0xE1, 0xCF, 0x1A, 0xCC,  0x86, 0x8D, 0x3D, 0xFD, 0xEA, 0x21, 0x3D, 0xFE,  0x7E, 0xCF, 0x04, 0x4F, 0xB5, 0x43, 0x6A, 0x60,
  0xFF, 0x02, 0x4E, 0x0B, 0xB9, 0x8A, 0x75, 0xDB,  0xDE, 0x44, 0x3D, 0xFE, 0x7E, 0xCF, 0x04, 0x4F,  0xB5, 0x43, 0x6A, 0x60, 0xFF, 0x02, 0x4E, 0x0B,  0xB9, 0x8A, 0x75, 0xDB, 0xDE, 0x47, 0xF5, 0xB0,
  0xE0, 0x53, 0x21, 0xAB, 0xFA, 0x17, 0xF1, 0xBB,  0xCF, 0x38, 0x2C, 0x03, 0xA6, 0xC5, 0x47, 0x85,  0x69, 0x58, 0xFF, 0x3D, 0xFE, 0x7E, 0xCF, 0x04,  0x4F, 0xB5, 0x43, 0x6A, 0x60, 0xED, 0x98, 0xAE,
  0x8A, 0x0B, 0xBB, 0x83, 0xAE, 0x3D, 0xDC, 0xD7,  0xAD, 0x12, 0x7D, 0xB6, 0xCE, 0xC8, 0x61, 0x61,  0x3D, 0x1B, 0xE7, 0x3F, 0xA9, 0xC6, 0x2E, 0x20,  0xEA, 0x45, 0x5F, 0xD0, 0x81, 0x9F, 0x6C, 0xDF,
  0x20, 0xFF, 0x70, 0xCE, 0xA5, 0xDB, 0xAD, 0x3A,  0xE4, 0xF9, 0xF2, 0x3C, 0xE7, 0x53, 0x91, 0x2F,  0x32, 0x8C, 0x75, 0xA9, 0xF1, 0xB6, 0x06, 0xA1,  0xB7, 0x68, 0xD4, 0xFE, 0x6D, 0xED, 0xEB, 0x79,
  0x7E, 0xE8, 0x1C, 0x2F, 0x32, 0x8C, 0x75, 0xA9,  0xF1, 0xB6, 0x06, 0xA1, 0xB7, 0x68, 0xD4, 0xFE,  0x6D, 0xED, 0xEB, 0x79, 0x7E, 0xE8, 0x1F, 0x4D,  0xAE, 0x43, 0x7D, 0x13, 0x64, 0xEE, 0x30, 0xF4,
  0xEB, 0x90, 0x2D, 0x44, 0xB4, 0x12, 0x88, 0xF6,  0x1E, 0x0F, 0x74, 0xFF, 0x2F, 0x32, 0x8C, 0x75,  0xA9, 0xF1, 0xB6, 0x06, 0xA1, 0xB8, 0x4B, 0x44,  0xBA, 0x1E, 0xBA, 0x22, 0x7B, 0x99, 0x31, 0x62,
  0x95, 0x40, 0xB8, 0x2E, 0xF6, 0x77, 0xB1, 0xAA,  0x94, 0x08, 0xFC, 0xE3, 0xEA, 0x07, 0x0B, 0x9B,  0x93, 0x78, 0x76, 0xB2, 0xB2, 0xA1, 0xA4, 0xAB,  0x8F, 0xCE, 0x90, 0xB4, 0x94, 0x72, 0xC9, 0xA2,
  0xA7, 0x09, 0xC3, 0x0D, 0x6B, 0xB5, 0x61, 0xD7,  0x13, 0x2A, 0xAF, 0xE9, 0xCB, 0xC1, 0xA7, 0x12,  0x54, 0x20, 0xD8, 0xF5, 0x52, 0xA9, 0x72, 0xD9,  0xE5, 0xD3, 0xFB, 0xD4, 0x13, 0x2A, 0xAF, 0xE9,
  0xCB, 0xC1, 0xA7, 0x12, 0x54, 0x20, 0xD8, 0xF5,  0x52, 0xA9, 0x72, 0xD9, 0xE5, 0xD3, 0xFB, 0xD7,  0xBF, 0x28, 0x42, 0xAF, 0x8F, 0x82, 0x59, 0x9A,  0xB3, 0x81, 0x13, 0xCE, 0xC9, 0xC3, 0xEC, 0x5C,
  0x81, 0x9A, 0xA6, 0x57, 0xFF, 0x13, 0x2A, 0xAF,  0xE9, 0xCB, 0xC1, 0xA7, 0x12, 0x54, 0x20, 0xF0,  0x62, 0x2D, 0xDC, 0x2C, 0xA4, 0x05, 0x7C, 0x1B,  0x28, 0xB8, 0xF0, 0x0C, 0xE2, 0x47, 0xCE, 0xEB,
  0x43, 0x21, 0x6B, 0x27, 0x47, 0xDD, 0x67, 0x6A,  0xEC, 0x81, 0x0C, 0xB2, 0x21, 0x8B, 0x0B, 0x8A,  0xA0, 0x05, 0xE2, 0x22, 0x41, 0xD6, 0xC7, 0xC5,  0x0A, 0xBD, 0xB9, 0xE7, 0xCA, 0x88, 0xC8, 0x5E,
  0x80, 0x3B, 0x7A, 0xBB, 0x96, 0xFD, 0x10, 0x46,  0x15, 0x9B, 0x72, 0xFA, 0x47, 0xBC, 0x2F, 0xDD,  0xA8, 0x55, 0x9C, 0x8E, 0xE2, 0x3B, 0x7A, 0xBB,  0x96, 0xFD, 0x10, 0x46, 0x15, 0x9B, 0x72, 0xFA,
  0x47, 0xBC, 0x2F, 0xDD, 0xA8, 0x55, 0x9C, 0x8E,  0xE5, 0x94, 0x85, 0x2B, 0x9F, 0x39, 0xD8, 0xB0,  0x80, 0xBE, 0x57, 0x16, 0x72, 0x26, 0x37, 0x91,  0xF0, 0x66, 0x43, 0x0F, 0x3A, 0xFF, 0x3B, 0x7A,
  0xBB, 0x96, 0xFD, 0x10, 0x46, 0x15, 0x9B, 0x73,  0x00, 0x01, 0x25, 0xDD, 0x35, 0x2E, 0xA6, 0x4D,  0xBF, 0x80, 0x82, 0x60, 0x67, 0xBA, 0x31, 0xB2,  0x5C, 0x33, 0xAD, 0x8F, 0xCF, 0x99, 0x9A, 0xE6,
  0x96, 0x28, 0x0B, 0x05, 0x73, 0xEF, 0xCA, 0x66,  0xD3, 0xBB, 0x46, 0x27, 0xB7, 0xE0, 0xED, 0x34,  0x8A, 0x1C, 0x39, 0x47, 0x6C, 0x1B, 0x06, 0xD2,  0xDE, 0x21, 0x52, 0xD9, 0x26, 0xE5, 0xFA, 0xCB,
  0x8A, 0xAA, 0x0D, 0xF4, 0x53, 0x71, 0x8D, 0xCF,  0x21, 0x75, 0xE7, 0xD7, 0xDF, 0xDC, 0x52, 0xD9,  0x26, 0xE5, 0xFA, 0xCB, 0x8A, 0xAA, 0x0D, 0xF4,  0x53, 0x71, 0x8D, 0xCF, 0x21, 0x75, 0xE7, 0xD7,
  0xDF, 0xDF, 0x6D, 0xAC, 0x56, 0xE8, 0x4E, 0x25,  0x16, 0xF4, 0xDA, 0xF4, 0xC6, 0x8A, 0x34, 0x7E,  0xDB, 0xBC, 0x79, 0x83, 0xE7, 0xD1, 0xFF, 0x52,  0xD9, 0x26, 0xE5, 0xFA, 0xCB, 0x8A, 0xAA, 0x0D,
  0xF3, 0x80, 0xC3, 0x49, 0x43, 0xE3, 0xEB, 0xEE,  0xD2, 0xA0, 0x9E, 0xC3, 0x38, 0x51, 0xCB, 0x13,  0x34, 0xF7, 0x41, 0x2E, 0x09, 0x68, 0x7D, 0x3D,  0xDC, 0x2D, 0xA3, 0x45, 0x9E, 0xC6, 0x21, 0xEF,
  0xF7, 0xC9, 0xE5, 0x5D, 0x43, 0xAD, 0xAF, 0x49,  0xF7, 0x19, 0x89, 0x6B, 0x31, 0x4C, 0x58, 0x24,  0x6C, 0x6E, 0x00, 0x3F, 0x61, 0x2B, 0x1A, 0xD8,  0xAE, 0x5B, 0x14, 0xA5, 0xB1, 0xB3, 0xF9, 0xE5,
  0xD7, 0x71, 0x1F, 0x98, 0xBE, 0x74, 0x24, 0x3F,  0x61, 0x2B, 0x1A, 0xD8, 0xAE, 0x5B, 0x14, 0xA5,  0xB1, 0xB3, 0xF9, 0xE5, 0xD7, 0x71, 0x1F, 0x98,  0xBE, 0x74, 0x27, 0x5D, 0x19, 0x65, 0x86, 0xD2,
  0x62, 0xD7, 0x9F, 0x65, 0x40, 0x19, 0x0F, 0x4F,  0x5B, 0xE2, 0xC7, 0xF9, 0x1C, 0x0A, 0x61, 0xFF,  0x3F, 0x61, 0x2B, 0x1A, 0xD8, 0xAE, 0x5B, 0x14,  0xA5, 0xB1, 0xBF, 0x53, 0x6F, 0xFA, 0x32, 0x4F,
  0x08, 0x58, 0x5B, 0x94, 0xC1, 0x4B, 0x3B, 0x41,  0xCA, 0xDC, 0xC6, 0x82, 0x53, 0xE0, 0xB1, 0x6F,  0x1F, 0x6B, 0x70, 0xBE, 0xD1, 0x09, 0xAF, 0x4B,  0xDF, 0xD6, 0xDF, 0x69, 0x4E, 0x5A, 0x0A, 0xFB,
  0x17, 0x5E, 0x24, 0xEB, 0x21, 0x76, 0xF7, 0x13,  0xE6, 0xBF, 0x5D, 0xA2, 0x16, 0xB7, 0x6E, 0x25,  0xB6, 0x45, 0x41, 0x6E, 0x56, 0x6D, 0xB6, 0x11,  0xD5, 0x6A, 0x2D, 0xB0, 0xA6, 0x1D, 0xD5, 0xDE,
  0x16, 0xB7, 0x6E, 0x25, 0xB6, 0x45, 0x41, 0x6E,  0x56, 0x6D, 0xB6, 0x11, 0xD5, 0x6A, 0x2D, 0xB0,  0xA6, 0x1D, 0xD5, 0xE1, 0xAA, 0xF8, 0xB3, 0xE7,  0x1A, 0x86, 0x92, 0x62, 0x1B, 0x6D, 0xD8, 0x42,
  0x89, 0x4C, 0x4C, 0x11, 0xBA, 0x92, 0x44, 0x51,  0xFF, 0x16, 0xB7, 0x6E, 0x25, 0xB6, 0x45, 0x41,  0x6E, 0x56, 0x6D, 0xCA, 0xB1, 0xB6, 0x5E, 0xED,  0x9A, 0x3E, 0x17, 0xDC, 0xFE, 0xF9, 0x00, 0x81,
  0x45, 0x4C, 0xC6, 0xFF, 0x78, 0xCF, 0xDA, 0xE1,  0x49, 0x20, 0xB2, 0xF7, 0xF6, 0xC4, 0x57, 0x10,  0xAB, 0xF8, 0xFC, 0x92, 0xC7, 0x60, 0x72, 0x06,  0x40, 0x12, 0xD1, 0x04, 0x63, 0x56, 0x8E, 0xA9,
  0x11, 0x0B, 0x49, 0xDD, 0xB3, 0x7B, 0xF4, 0xE2,  0x36, 0xCF, 0x48, 0x9D, 0x7A, 0xE5, 0xC1, 0xCA,  0x80, 0x32, 0x99, 0xC9, 0x0F, 0xCA, 0xCF, 0x38,  0xAC, 0x7B, 0xF4, 0xE2, 0x36, 0xCF, 0x48, 0x9D,
  0x7A, 0xE5, 0xC1, 0xCA, 0x80, 0x32, 0x99, 0xC9,  0x0F, 0xCA, 0xCF, 0x38, 0xAF, 0x99, 0xBF, 0xC9,  0x21, 0xA2, 0x97, 0x32, 0xD7, 0x72, 0x2C, 0x83,  0xCD, 0x61, 0xE8, 0xDF, 0x2E, 0xC9, 0xE8, 0x4D,
  0xD4, 0xFF, 0x7B, 0xF4, 0xE2, 0x36, 0xCF, 0x48,  0x9D, 0x7A, 0xE5, 0xC2, 0x46, 0x86, 0x3C, 0x51,  0xA4, 0x90, 0x32, 0x2B, 0x16, 0x26, 0xC0, 0xAA,  0xD4, 0x4E, 0x58, 0x42, 0x4D, 0xEF, 0x8C, 0x4F,
  0x0C, 0x56, 0x52, 0xCB, 0x80, 0x6F, 0xC9, 0x2F,  0x82, 0x6F, 0xAC, 0x90, 0x64, 0x49, 0x0D, 0xA5,  0x0F, 0x38, 0xA3, 0xAC, 0xC5, 0xD2, 0x44, 0xE0,  0x60, 0x1F, 0x68, 0x62, 0x8D, 0x61, 0x06, 0x9D,
  0x18, 0x1E, 0x94, 0x65, 0x9B, 0x72, 0xD3, 0xD6,  0x4B, 0x50, 0x52, 0xAD, 0xEB, 0x2E, 0x77, 0x91,  0xBA, 0xE6, 0x06, 0x9D, 0x18, 0x1E, 0x94, 0x65,  0x9B, 0x72, 0xD3, 0xD6, 0x4B, 0x50, 0x52, 0xAD,
  0xEB, 0x2E, 0x77, 0x91, 0xBA, 0xE9, 0x2C, 0xD5,  0x0D, 0x6C, 0xB2, 0x9C, 0x29, 0xCA, 0x7C, 0x7D,  0x5D, 0x45, 0x94, 0xE9, 0x9E, 0xBF, 0x75, 0x31,  0x19, 0xC9, 0xFF, 0x06, 0x9D, 0x18, 0x1E, 0x94,
  0x65, 0x9B, 0x72, 0xD3, 0xD4, 0xCD, 0xDC, 0x30,  0x3E, 0xAB, 0xAE, 0x86, 0xD2, 0x5C, 0x84, 0xB5,  0xA6, 0xB8, 0x02, 0x4C, 0xE1, 0x55, 0x47, 0x0B,  0x97, 0xCD, 0x53, 0xE3, 0x5A, 0x3C, 0x27, 0x24,
  0xA1, 0xA4, 0xFB, 0x66, 0x21, 0x59, 0xD5, 0x12,  0x8F, 0x37, 0x68, 0x6A, 0xF9, 0x8F, 0xD9, 0x0D,  0x21, 0x03, 0xE4, 0x02, 0x2B, 0x85, 0xFF, 0x41,  0x29, 0x45, 0x5D, 0x9E, 0xBA, 0xB5, 0x29, 0x47,
  0x9B, 0x7A, 0xF7, 0x80, 0xBB, 0xDD, 0xC1, 0xD7,  0x95, 0x24, 0x12, 0x41, 0x29, 0x45, 0x5D, 0x9E,  0xBA, 0xB5, 0x29, 0x47, 0x9B, 0x7A, 0xF7, 0x80,  0xBB, 0xDD, 0xC1, 0xD7, 0x95, 0x24, 0x15, 0x45,
  0x4D, 0xCB, 0xC8, 0x51, 0x80, 0x71, 0xA8, 0x5B,  0x25, 0x4B, 0x0B, 0x2C, 0x2C, 0xDA, 0x98, 0x6D,  0x18, 0xF7, 0x88, 0xFF, 0x41, 0x29, 0x45, 0x5D,  0x9E, 0xBA, 0xB5, 0x29, 0x47, 0x9A, 0x01, 0x19,
  0xAE, 0xB7, 0x1A, 0x47, 0x57, 0xB1, 0x7C, 0xBE,  0xB0, 0xD9, 0x37, 0xEA, 0x56, 0x0C, 0x45, 0x8D,  0x29, 0xD9, 0x6D, 0x36, 0xBA, 0x33, 0x18, 0x1D,  0x73, 0x93, 0x0D, 0x0D, 0xED, 0x9B, 0xD9, 0xA5,
  0xBE, 0x57, 0xED, 0xFC, 0x2B, 0x04, 0xF6, 0x64,  0x91, 0xCA, 0xA2, 0xFE, 0x97, 0xE6, 0xC5, 0x0F,  0x17, 0xEF, 0x70, 0x11, 0x79, 0x23, 0x32, 0xB4,  0x9E, 0x47, 0x20, 0x4F, 0x53, 0x40, 0x2A, 0x77,
  0x6E, 0x10, 0x95, 0x7E, 0x17, 0xEF, 0x70, 0x11,  0x79, 0x23, 0x32, 0xB4, 0x9E, 0x47, 0x20, 0x4F,  0x53, 0x40, 0x2A, 0x77, 0x6E, 0x10, 0x95, 0x81,  0xBE, 0x51, 0x05, 0xC0, 0x36, 0xFC, 0x15, 0xA8,
  0xB8, 0xAC, 0x1F, 0xA6, 0x6C, 0xAF, 0x67, 0x27,  0x7B, 0x23, 0x48, 0x4E, 0xFF, 0x17, 0xEF, 0x70,  0x11, 0x79, 0x23, 0x32, 0xB4, 0x9E, 0x47, 0xFB,  0x2B, 0xFB, 0xCD, 0x6A, 0xF3, 0x38, 0x70, 0xD6,
  0x88, 0x18, 0x4D, 0x1E, 0x1C, 0x16, 0xF4, 0x41,  0xC2, 0x66, 0x39, 0x50, 0x89, 0xF2, 0x27, 0x18,  0xC3, 0x4A, 0x9B, 0x87, 0x7B, 0x8E, 0x57, 0x6D,  0x05, 0x16, 0x64, 0x8B, 0x1A, 0x15, 0x29, 0x2D,
  0x0F, 0x63, 0x59, 0x2D, 0x59, 0x8A, 0xAF, 0xC4,  0x1F, 0x4F, 0x18, 0x35, 0x00, 0x37, 0x21, 0x11,  0x75, 0xAA, 0x5C, 0x89, 0x24, 0xB7, 0xBC, 0x22,  0x54, 0xD5, 0xE0, 0x85, 0x1A, 0x4F, 0x18, 0x35,
  0x00, 0x37, 0x21, 0x11, 0x75, 0xAA, 0x5C, 0x89,  0x24, 0xB7, 0xBC, 0x22, 0x54, 0xD5, 0xE0, 0x85,  0x1D, 0x4F, 0xC4, 0x43, 0x37, 0xDE, 0x5A, 0x31,  0x61, 0x3D, 0x23, 0xE6, 0xF7, 0xFB, 0xB3, 0xB5,
  0xBD, 0xE8, 0xCC, 0x61, 0x0E, 0xFF, 0x4F, 0x18,  0x35, 0x00, 0x37, 0x21, 0x11, 0x75, 0xAA, 0x5C,  0xFA, 0xF2, 0x7F, 0x65, 0x20, 0x1C, 0x70, 0x5F,  0xE2, 0x54, 0x55, 0x6E, 0x92, 0x8E, 0xD6, 0x42,
  0xCF, 0x95, 0x9E, 0x04, 0xA0, 0x2E, 0x32, 0x4F,  0x69, 0x29, 0xF3, 0xEB, 0x0C, 0x49, 0xBB, 0x49,  0x92, 0xBA, 0x28, 0x83, 0x3E, 0x4B, 0x75, 0xE8,  0x78, 0xE4, 0x76, 0xB3, 0x3F, 0x33, 0x13, 0x2C,
  0x44, 0xF5, 0x38, 0xBB, 0xAE, 0xD8, 0xAA, 0xFA,  0x29, 0xEB, 0xE4, 0x1F, 0x91, 0xFA, 0x89, 0xFC,  0x66, 0x34, 0x88, 0xB1, 0x3D, 0x54, 0x38, 0xBB,  0xAE, 0xD8, 0xAA, 0xFA, 0x29, 0xEB, 0xE4, 0x1F,
  0x91, 0xFA, 0x89, 0xFC, 0x66, 0x34, 0x88, 0xB1,  0x3D, 0x57, 0x99, 0xE6, 0xF8, 0x69, 0x5A, 0x6B,  0x52, 0xED, 0x5B, 0xF5, 0x91, 0x14, 0x53, 0xB4,  0x78, 0xE7, 0xF8, 0xA8, 0xFA, 0x0F, 0xFF, 0x38,
  0xBB, 0xAE, 0xD8, 0xAA, 0xFA, 0x29, 0xEB, 0xE4,  0x20, 0x75, 0x07, 0x4F, 0x5A, 0xD1, 0x52, 0x1B,  0xCA, 0xE1, 0x38, 0xDE, 0x1C, 0x25, 0x55, 0xB4,  0x0D, 0xCE, 0x41, 0xA6, 0x80, 0x43, 0x67, 0xEC,
  0x63, 0xC7, 0xA7, 0xB4, 0x75, 0xC3, 0x5D, 0x7B,  0x26, 0x2C, 0x5E, 0x74, 0xB2, 0x3E, 0xD1, 0x8A,  0x18, 0xF2, 0xB7, 0xCB, 0x1B, 0x6E, 0x3D, 0x0E,  0x8F, 0x49, 0x25, 0x68, 0xF9, 0x77, 0xE3, 0x3A,
  0xF7, 0xFA, 0x52, 0x8D, 0xB5, 0x76, 0x6B, 0x97,  0x82, 0xAF, 0xAA, 0xEE, 0xA5, 0xD3, 0xE6, 0x68,  0xF9, 0x77, 0xE3, 0x3A, 0xF7, 0xFA, 0x52, 0x8D,  0xB5, 0x76, 0x6B, 0x97, 0x82, 0xAF, 0xAA, 0xEE,
  0xA5, 0xD3, 0xE9, 0xB3, 0x0B, 0xAE, 0x22, 0xC6,  0x05, 0x68, 0x1B, 0xA7, 0x6C, 0x51, 0xCA, 0xA8,  0xA9, 0x12, 0xC1, 0xFE, 0xA8, 0x36, 0xDB, 0xFF,  0x68, 0xF9, 0x77, 0xE3, 0x3A, 0xF7, 0xFA, 0x52,
  0x8D, 0xB5, 0x6F, 0x7D, 0xA9, 0x3F, 0xD1, 0x06,  0xDE, 0x13, 0x9C, 0x14, 0xE5, 0x86, 0xC4, 0x08,  0xED, 0xEE, 0x2C, 0x52, 0xFF, 0x04, 0xAF, 0xFB,  0x91, 0xD0, 0xD7, 0x22, 0x3D, 0x99, 0x1B, 0xAF,
  0x6E, 0x58, 0x1E, 0x98, 0x0A, 0x13, 0xDE, 0xCC,  0xC0, 0x80, 0xE6, 0x5C, 0x03, 0x93, 0x92, 0xF1,  0xBA, 0x5A, 0x2B, 0x9E, 0x2A, 0x74, 0x7D, 0x44,  0x20, 0xEA, 0x46, 0xED, 0xDF, 0x42, 0xD0, 0xF3,
  0x3A, 0xFE, 0x6C, 0xBE, 0x5B, 0x38, 0x30, 0x8C,  0x2A, 0x74, 0x7D, 0x44, 0x20, 0xEA, 0x46, 0xED,  0xDF, 0x42, 0xD0, 0xF3, 0x3A, 0xFE, 0x6C, 0xBE,  0x5B, 0x38, 0x30, 0x8F, 0xAE, 0xA8, 0xE8, 0xC9,
  0x13, 0x62, 0xB0, 0xA5, 0x5B, 0x2A, 0xFE, 0x06,  0x58, 0xCA, 0x2C, 0x50, 0x56, 0x8F, 0xFC, 0xCD,  0xFF, 0x2A, 0x74, 0x7D, 0x44, 0x20, 0xEA, 0x46,  0xED, 0xDF, 0x43, 0xAB, 0x29, 0x8B, 0xAD, 0xCB,
  0xC9, 0x5B, 0x14, 0x59, 0xD8, 0x3E, 0x6C, 0x21,  0x19, 0x7A, 0x33, 0xC6, 0x50, 0x63, 0x79, 0x42,  0x7C, 0x2E, 0xC5, 0x2F, 0xFF, 0xF1, 0x24, 0xD8,  0x50, 0xD3, 0x6B, 0x69, 0x2D, 0x8B, 0x0F, 0xF9,
  0x9D, 0x54, 0xAA, 0x43, 0x69, 0x5E, 0x06, 0x8A,  0xEE, 0xCD, 0x5E, 0x43, 0x64, 0x45, 0x70, 0x5D,  0x82, 0xA9, 0xE4, 0x4D, 0xBC, 0x41, 0x00, 0x89,  0x50, 0x41, 0x97, 0x45, 0x3F, 0x86, 0xBB, 0x53,
  0x86, 0x45, 0x70, 0x5D, 0x82, 0xA9, 0xE4, 0x4D,  0xBC, 0x41, 0x00, 0x89, 0x50, 0x41, 0x97, 0x45,  0x3F, 0x86, 0xBB, 0x53, 0x89, 0xB3, 0xC1, 0xF5,  0xB6, 0x03, 0xDD, 0x08, 0xEF, 0x0A, 0x38, 0x18,
  0xF6, 0xD8, 0x73, 0x38, 0x5B, 0x7F, 0x66, 0x2B,  0xD7, 0xFF, 0x45, 0x70, 0x5D, 0x82, 0xA9, 0xE4,  0x4D, 0xBC, 0x40, 0xFF, 0xA1, 0xCD, 0xA5, 0x3F,  0x8E, 0x1C, 0xE9, 0xCB, 0xF7, 0x7A, 0xDB, 0x41,
  0x43, 0xDF, 0x74, 0x2F, 0x6D, 0x9D, 0x44, 0xC0,  0x6F, 0x46, 0xAF, 0x98, 0xB9, 0xC3, 0xEB, 0x59,  0x5F, 0x1B, 0xB6, 0xF8, 0xDD, 0xDF, 0x39, 0x24,  0x1E, 0xA1, 0x73, 0x05, 0x60, 0xF4, 0x03, 0xC0,
  0xA6, 0x1C, 0x3E, 0x4F, 0xF2, 0x68, 0x1E, 0xA9,  0xB7, 0x81, 0x75, 0x9D, 0xB0, 0xBE, 0x44, 0x0C,  0xEF, 0x9E, 0xC6, 0x2C, 0x96, 0x4A, 0x7B, 0x16,  0xDD, 0x94, 0x1E, 0xA9, 0xB7, 0x81, 0x75, 0x9D,
  0xB0, 0xBE, 0x44, 0x0C, 0xEF, 0x9E, 0xC6, 0x2C,  0x96, 0x4A, 0x7B, 0x16, 0xDD, 0x97, 0x98, 0x69,  0xEC, 0xA3, 0xCE, 0xE5, 0xB3, 0x42, 0x15, 0x4C,  0xD1, 0x34, 0xBD, 0x1A, 0xE0, 0x61, 0xAC, 0x3E,
  0xFB, 0x2D, 0xFF, 0x1E, 0xA9, 0xB7, 0x81, 0x75,  0x9D, 0xB0, 0xBE, 0x44, 0x0C, 0x78, 0x36, 0x12,  0x11, 0x08, 0x91, 0x62, 0xBD, 0xB8, 0x3A, 0x23,  0x4C, 0xA5, 0x42, 0xDE, 0x97, 0x50, 0xB3, 0x1C,
  0x9C, 0x2F, 0x6B, 0x73, 0x56, 0xB6, 0x1D, 0xAB,  0x4C, 0x44, 0x6D, 0x52, 0x04, 0x5B, 0x97, 0x79,  0x9E, 0x97, 0x55, 0x59, 0x4B, 0x1E, 0x6B, 0x98,  0xD4, 0xEA, 0x9E, 0x4C, 0x3D, 0xA9, 0x59, 0x20,
  0x28, 0x1F, 0x62, 0xAF, 0x6D, 0x18, 0x5A, 0x2D,  0xB0, 0x2D, 0x01, 0x3B, 0xDC, 0x08, 0xFE, 0xDB,  0xCF, 0x51, 0x62, 0x20, 0x28, 0x1F, 0x62, 0xAF,  0x6D, 0x18, 0x5A, 0x2D, 0xB0, 0x2D, 0x01, 0x3B,
  0xDC, 0x08, 0xFE, 0xDB, 0xCF, 0x51, 0x65, 0xFE,  0x6E, 0xB2, 0x3A, 0x0C, 0x62, 0x92, 0x5C, 0x4E,  0x05, 0x7B, 0xE0, 0x23, 0x76, 0xE9, 0x8B, 0x05,  0xBC, 0x64, 0x2B, 0xFF, 0x20, 0x28, 0x1F, 0x62,
  0xAF, 0x6D, 0x18, 0x5A, 0x2D, 0xAE, 0x98, 0x13,  0x03, 0x02, 0x16, 0x6D, 0x14, 0x07, 0x13, 0x52,  0x8F, 0x11, 0x84, 0x6B, 0x08, 0x2A, 0xD1, 0x29,  0x4E, 0x5E, 0x2C, 0xDF, 0xE1, 0xD2, 0x7A, 0x2C,
  0x47, 0xD5, 0x67, 0xEF, 0xF4, 0xDC, 0x7D, 0xC3,  0x29, 0x23, 0xC2, 0x0D, 0xF6, 0x86, 0xC8, 0xC1,  0xA9, 0x9D, 0x08, 0xF7, 0xC0, 0x95, 0x5A, 0x90,  0x52, 0x45, 0x86, 0xDB, 0x30, 0x74, 0x52, 0x1B,
  0x72, 0x7C, 0x10, 0xA2, 0xEE, 0xD3, 0x65, 0xDE,  0xC8, 0xAB, 0xC6, 0xAA, 0x52, 0x45, 0x86, 0xDB,  0x30, 0x74, 0x52, 0x1B, 0x72, 0x7C, 0x10, 0xA2,  0xEE, 0xD3, 0x65, 0xDE, 0xC8, 0xAB, 0xC6, 0xAD,
  0x6C, 0x2D, 0x56, 0x48, 0x0D, 0xD6, 0x98, 0xA1,  0x5C, 0xD5, 0xBB, 0x7D, 0x34, 0x5F, 0x8A, 0x65,  0x10, 0x4F, 0x35, 0x86, 0xFF, 0x52, 0x45, 0x86,  0xDB, 0x30, 0x74, 0x52, 0x1B, 0x72, 0x7B, 0xC6,
  0xBE, 0x64, 0x10, 0xAA, 0x49, 0x5D, 0xD1, 0xFF,  0x0E, 0xC4, 0xF0, 0xD3, 0x5A, 0x93, 0xE9, 0xA4,  0x6D, 0x5C, 0xA2, 0xDC, 0x04, 0xB9, 0x4D, 0x1D,  0x3B, 0x61, 0xC1, 0xB9, 0xA1, 0xD2, 0x9D, 0x51,
  0x23, 0xB5, 0x50, 0x4B, 0x3A, 0x38, 0xE2, 0xE4,  0xBB, 0x30, 0x27, 0x26, 0x78, 0x8B, 0x6C, 0x2B,  0x45, 0x67, 0x99, 0x0F, 0x9E, 0x30, 0xA0, 0x3D,  0x56, 0x4F, 0xD9, 0x74, 0xA2, 0x5F, 0xB3, 0x7F,
  0x52, 0xC8, 0xE1, 0xF8, 0x76, 0x67, 0x99, 0x0F,  0x9E, 0x30, 0xA0, 0x3D, 0x56, 0x4F, 0xD9, 0x74,  0xA2, 0x5F, 0xB3, 0x7F, 0x52, 0xC8, 0xE1, 0xF8,  0x79, 0x83, 0x81, 0x48, 0x9A, 0x81, 0x0A, 0x29,
  0xFE, 0xCE, 0x9B, 0x20, 0xBA, 0xD2, 0x70, 0xA2,  0xFE, 0xCF, 0x6A, 0x96, 0xF1, 0xFF, 0x67, 0x99,  0x0F, 0x9E, 0x30, 0xA0, 0x3D, 0x56, 0x4F, 0xD8,  0x4F, 0x49, 0x41, 0xB8, 0x89, 0xB2, 0xA2, 0x3C,
  0x54, 0xC6, 0xFD, 0xFC, 0x70, 0xFD, 0x6C, 0x57,  0xA0, 0xF5, 0xB8, 0x31, 0x2B, 0xB8, 0xDB, 0x83,  0x7C, 0x54, 0xC2, 0x18, 0x4A, 0xF7, 0xB0, 0x47,  0x80, 0x1F, 0xB8, 0x96, 0x90, 0xF7, 0x56, 0xBD,
  0x10, 0xB4, 0x5A, 0xA5, 0x44, 0x16, 0x31, 0x68,  0x52, 0xDF, 0x60, 0x04, 0x5C, 0x24, 0x22, 0x5F,  0x3F, 0x13, 0x93, 0xDA, 0x30, 0x91, 0x33, 0x66,  0xF0, 0xEF, 0x7B, 0xF8, 0xE3, 0xEA, 0x60, 0x04,
  0x5C, 0x24, 0x22, 0x5F, 0x3F, 0x13, 0x93, 0xDA,  0x30, 0x91, 0x33, 0x66, 0xF0, 0xEF, 0x7B, 0xF8,  0xE3, 0xED, 0xDB, 0x84, 0x0E, 0xB3, 0xFA, 0x7A,  0x61, 0x16, 0xE6, 0x97, 0x77, 0x27, 0x5D, 0x5C,
  0xC9, 0x08, 0xDE, 0xB0, 0x4E, 0x6F, 0xFF, 0x60,  0x04, 0x5C, 0x24, 0x22, 0x5F, 0x3F, 0x13, 0x93,  0xD8, 0xE4, 0x07, 0x3D, 0x2F, 0x3A, 0x71, 0xCB,  0xEA, 0x03, 0x6A, 0x85, 0x24, 0xAA, 0x75, 0x09,
  0xD8, 0xB6, 0x36, 0x67, 0x54, 0x7B, 0x18, 0xAE,  0x99, 0x17, 0xCB, 0x5F, 0x58, 0x2F, 0x1C, 0xB3,  0x05, 0x5D, 0xBD, 0x51, 0xF5, 0xDD, 0x6A, 0xCF,  0x8A, 0x87, 0x8A, 0xCC, 0x1B, 0x4D, 0xD6, 0x3C,
  0x6A, 0x66, 0xD2, 0x1E, 0xDE, 0x20, 0xA8, 0x3D,  0xD7, 0xBC, 0xD0, 0xF9, 0xCF, 0x15, 0x47, 0x27,  0x22, 0x53, 0x00, 0xB6, 0xFD, 0x08, 0x28, 0x1E,  0xDE, 0x20, 0xA8, 0x3D, 0xD7, 0xBC, 0xD0, 0xF9,
  0xCF, 0x15, 0x47, 0x27, 0x22, 0x53, 0x00, 0xB6,  0xFD, 0x08, 0x2B, 0xA5, 0x3D, 0xF7, 0x8E, 0x49,  0xDB, 0x8D, 0x1F, 0xA5, 0x1C, 0x8A, 0x50, 0x48,  0xDC, 0x02, 0x51, 0x4C, 0xF5, 0x02, 0x58, 0xFF,
  0x1E, 0xDE, 0x20, 0xA8, 0x3D, 0xD7, 0xBC, 0xD0,  0xF9, 0xCF, 0x19, 0x15, 0x2F, 0x9F, 0x7B, 0xB0,  0xFD, 0xDD, 0x1E, 0xC6, 0x98, 0x97, 0xDF, 0x85,  0x7B, 0x79, 0x42, 0x4A, 0xEC, 0xA0, 0xB5, 0x41,
  0x6D, 0x77, 0xE7, 0x00, 0xD7, 0x97, 0xB1, 0xF2,  0x97, 0x05, 0x61, 0xFC, 0x95, 0x27, 0xD6, 0x49,  0xFF, 0xB5, 0x16, 0x24, 0xB3, 0xA7, 0xF7, 0xBD,  0xEE, 0x07, 0x56, 0x47, 0x67, 0x07, 0xAB, 0x24,
  0xE1, 0x45, 0xFC, 0xD7, 0xBE, 0xCB, 0x90, 0x25,  0xDA, 0xFD, 0xE0, 0xFF, 0x92, 0x76, 0xA9, 0x74,  0x67, 0x07, 0xAB, 0x24, 0xE1, 0x45, 0xFC, 0xD7,  0xBE, 0xCB, 0x90, 0x25, 0xDA, 0xFD, 0xE0, 0xFF,
  0x92, 0x76, 0xA9, 0x77, 0x9B, 0x34, 0x7E, 0x85,  0xDB, 0xA9, 0x57, 0xD8, 0xFC, 0xA9, 0x47, 0x5F,  0x35, 0x0B, 0xF9, 0x93, 0x9A, 0xF7, 0x06, 0x4F,  0xFF, 0x67, 0x07, 0xAB, 0x24, 0xE1, 0x45, 0xFC,
  0xD7, 0xBE, 0xCC, 0x5D, 0xA7, 0xED, 0x94, 0xFF,  0x70, 0x66, 0x75, 0x7E, 0xA0, 0xD2, 0x5A, 0x19,  0xA2, 0x53, 0x6A, 0xDC, 0xEA, 0x68, 0xB1, 0x7B,  0xA4, 0xCE, 0x1E, 0xCD, 0xDD, 0x64, 0xB0, 0x3C,
  0x4C, 0xBD, 0x1F, 0x17, 0x19, 0xF4, 0xF3, 0xEA,  0x54, 0xD2, 0xA3, 0xEC, 0x04, 0xBD, 0xB5, 0xBD,  0x6F, 0xE8, 0xB2, 0xF1, 0x6C, 0x57, 0x51, 0x56,  0x34, 0x97, 0x13, 0xBC, 0x1D, 0xCE, 0x6A, 0xC0,
  0x7B, 0x38, 0x8A, 0x5E, 0xFD, 0xA7, 0x3B, 0x22,  0x16, 0x57, 0x51, 0x56, 0x34, 0x97, 0x13, 0xBC,  0x1D, 0xCE, 0x6A, 0xC0, 0x7B, 0x38, 0x8A, 0x5E,  0xFD, 0xA7, 0x3B, 0x22, 0x19, 0xB1, 0x22, 0xEE,
  0xE5, 0x39, 0x23, 0x85, 0xB2, 0x35, 0x5F, 0xEE,  0x34, 0x4B, 0xC6, 0x45, 0xE3, 0x32, 0xA6, 0x3E,  0x1A, 0xFF, 0x57, 0x51, 0x56, 0x34, 0x97, 0x13,  0xBC, 0x1D, 0xCE, 0x6A, 0x0F, 0xAF, 0xDF, 0xB8,
  0xAC, 0x9A, 0x58, 0x06, 0x86, 0xAA, 0x57, 0x6B,  0x35, 0x29, 0x2E, 0x84, 0x30, 0x3F, 0x74, 0x69,  0x39, 0x47, 0xFC, 0xD4, 0x06, 0xA1, 0xB2, 0xB1,  0xA2, 0x47, 0x5A, 0x79, 0x27, 0xF2, 0x4D, 0x32,
  0xE4, 0x65, 0x37, 0xB5, 0x59, 0xAD, 0xD8, 0x0D,  0x92, 0x72, 0x42, 0x56, 0x77, 0xED, 0x05, 0x5D,  0x74, 0xDF, 0xB1, 0x30, 0x7C, 0xF0, 0x9B, 0xEB,  0x00, 0xC0, 0x21, 0x0F, 0xFF, 0x50, 0x62, 0x53,
  0xB3, 0xB0, 0x05, 0x5D, 0x74, 0xDF, 0xB1, 0x30,  0x7C, 0xF0, 0x9B, 0xEB, 0x00, 0xC0, 0x21, 0x0F,  0xFF, 0x50, 0x62, 0x53, 0xB3, 0xB3, 0x32, 0x0B,  0x9A, 0x71, 0xF7, 0x81, 0x62, 0xF8, 0x56, 0x35,
  0x3B, 0xA6, 0x84, 0x86, 0xEC, 0x00, 0xE8, 0xC5,  0x8A, 0xEF, 0xFF, 0x05, 0x5D, 0x74, 0xDF, 0xB1,  0x30, 0x7C, 0xF0, 0x9B, 0xEA, 0x5D, 0x3E, 0xA9,  0x51, 0x2B, 0xD6, 0x91, 0x83, 0x8D, 0x3A, 0xDB,
  0x7B, 0x85, 0x7C, 0xFD, 0x99, 0xC0, 0x42, 0x49,  0x4F, 0x07, 0x64, 0xBA, 0xCD, 0xED, 0x89, 0x53,  0x16, 0x69, 0xB2, 0xD4, 0x26, 0xE7, 0x3A, 0xF5,  0xBE, 0x09, 0x55, 0xC7, 0xE0, 0x1C, 0x32, 0xE6,
  0x50, 0xB5, 0x00, 0xEC, 0x38, 0x6E, 0xBF, 0x1F,  0xD7, 0x2B, 0x56, 0xAA, 0x9A, 0xE6, 0xCD, 0x30,  0xD5, 0xE6, 0x08, 0x39, 0x0B, 0xD0, 0x01, 0xBD,  0xF9, 0x0A, 0xE0, 0x1F, 0xD7, 0x2B, 0x56, 0xAA,
  0x9A, 0xE6, 0xCD, 0x30, 0xD5, 0xE6, 0x08, 0x39,  0x0B, 0xD0, 0x01, 0xBD, 0xF9, 0x0A, 0xE3, 0x87,  0x6D, 0x09, 0x3D, 0xFA, 0x41, 0x68, 0x1E, 0x94,  0xCE, 0xB3, 0x98, 0x13, 0x94, 0xE7, 0x1D, 0x4F,
  0xC5, 0x4F, 0x29, 0xFF, 0x1F, 0xD7, 0x2B, 0x56,  0xAA, 0x9A, 0xE6, 0xCD, 0x30, 0xD7, 0x6C, 0xAA,  0x4A, 0x5E, 0x99, 0xA8, 0x7B, 0x84, 0xC0, 0x2E,  0xF9, 0xC6, 0xBF, 0x84, 0xD4, 0x17, 0x31, 0xC0,
  0x37, 0x77, 0x0D, 0x61, 0x5B, 0x60, 0xDB, 0x7C,  0xAE, 0x70, 0xCA, 0xF9, 0xF8, 0x26, 0xEF, 0xA9,  0xB6, 0x8B, 0x89, 0x4E, 0x14, 0x44, 0x22, 0xAE,  0x30, 0x95, 0xF7, 0x7E, 0x3F, 0x92, 0x74, 0x20,
  0x1E, 0xC5, 0x81, 0x43, 0xC5, 0x33, 0x14, 0xE3,  0x4A, 0x93, 0xF7, 0x68, 0x11, 0x84, 0xC6, 0x45,  0xE6, 0x44, 0xBC, 0xD2, 0x1E, 0xC5, 0x81, 0x43,  0xC5, 0x33, 0x14, 0xE3, 0x4A, 0x93, 0xF7, 0x68,
  0x11, 0x84, 0xC6, 0x45, 0xE6, 0x44, 0xBC, 0xD5,  0xE1, 0x6C, 0xD1, 0xBF, 0xBF, 0x05, 0xDF, 0x57,  0xA3, 0xB2, 0x17, 0xDA, 0x58, 0x90, 0xC5, 0xF0,  0xE9, 0xCA, 0x8D, 0x95, 0xFF, 0x1E, 0xC5, 0x81,
  0x43, 0xC5, 0x33, 0x14, 0xE3, 0x4A, 0x93, 0x37,  0x9F, 0x03, 0x54, 0x24, 0x95, 0xFB, 0x73, 0xAA,  0x1E, 0x2A, 0x23, 0xF2, 0x8F, 0x5C, 0xB9, 0x1C,  0xEE, 0x61, 0x63, 0x69, 0x03, 0x9B, 0x9E, 0x06,
  0xF3, 0xF2, 0x86, 0xA7, 0xF3, 0x8B, 0xBA, 0x99,  0x0F, 0x0D, 0xEF, 0xCC, 0xB4, 0x53, 0x42, 0xC8,  0xE5, 0x95, 0xE9, 0xF4, 0x93, 0x1E, 0x1D, 0xB6,  0x89, 0x7E, 0xF6, 0x19, 0xDF, 0x2D, 0xF9, 0xBC,
  0x2A, 0xC9, 0x47, 0xE3, 0xA9, 0x10, 0x48, 0xDD,  0xC2, 0xA1, 0x47, 0xCE, 0x06, 0x7E, 0xF6, 0x19,  0xDF, 0x2D, 0xF9, 0xBC, 0x2A, 0xC9, 0x47, 0xE3,  0xA9, 0x10, 0x48, 0xDD, 0xC2, 0xA1, 0x47, 0xCE,
  0x09, 0xE3, 0x57, 0xCA, 0xC0, 0x71, 0x9F, 0xAF,  0x0F, 0xFF, 0x34, 0x6C, 0x4D, 0xD8, 0x21, 0xA3,  0xA4, 0xFB, 0x1E, 0x5A, 0x2F, 0xFF, 0x7E, 0xF6,  0x19, 0xDF, 0x2D, 0xF9, 0xBC, 0x2A, 0xC9, 0x48,
  0xEF, 0xD2, 0x9C, 0x80, 0xC7, 0x19, 0x49, 0xD3,  0x16, 0xA6, 0xF8, 0xB4, 0x7B, 0x98, 0x65, 0x9A,  0x8D, 0xC9, 0xA6, 0x1D, 0x5D, 0xDC, 0xDC, 0xEB,  0xC0, 0x66, 0x8F, 0x75, 0x71, 0xBA, 0xBC, 0xBB,
  0x64, 0xDC, 0xBC, 0xFC, 0x08, 0xF1, 0x56, 0x8A,  0x71, 0xBF, 0x6D, 0xE0, 0xBB, 0x0A, 0xC2, 0x84,  0x8F, 0xAD, 0x38, 0xE8, 0x78, 0x4E, 0x34, 0x13,  0x59, 0x77, 0xC1, 0x57, 0xDA, 0xBB, 0x22, 0xF7,
  0x52, 0xB3, 0x69, 0xF4, 0xBD, 0x7E, 0x38, 0xE8,  0x78, 0x4E, 0x34, 0x13, 0x59, 0x77, 0xC1, 0x57,  0xDA, 0xBB, 0x22, 0xF7, 0x52, 0xB3, 0x69, 0xF4,  0xBD, 0x81, 0xF5, 0x71, 0x82, 0x68, 0x0C, 0xCE,
  0x7C, 0x30, 0xF3, 0x3B, 0x0A, 0x96, 0x68, 0x83,  0x02, 0x48, 0xB3, 0x95, 0x8B, 0xB0, 0xFF, 0x38,  0xE8, 0x78, 0x4E, 0x34, 0x13, 0x59, 0x77, 0xC1,  0x57, 0x6B, 0xB6, 0xF7, 0xAA, 0x04, 0x17, 0x41,
  0x40, 0x6F, 0xC6, 0x75, 0x1B, 0x87, 0x84, 0xFE,  0xD4, 0x22, 0x94, 0x5B, 0xB8, 0x3C, 0x19, 0x7B,  0xC5, 0x46, 0xD2, 0xEA, 0xAE, 0xCB, 0x83, 0x6A,  0xC4, 0x22, 0xAD, 0x53, 0x08, 0x22, 0x74, 0x17,
  0x87, 0xFD, 0x2D, 0x38, 0x90, 0xD9, 0x13, 0x6B,  0xDA, 0x91, 0xB2, 0x3E, 0x39, 0xD8, 0x1E, 0x9C,  0x70, 0x23, 0x71, 0xDB, 0xD6, 0x64, 0x4F, 0xBE,  0x1B, 0x1D, 0xC5, 0x0B, 0x44, 0xAB, 0xD8, 0x3E,
  0x39, 0xD8, 0x1E, 0x9C, 0x70, 0x23, 0x71, 0xDB,  0xD6, 0x64, 0x4F, 0xBE, 0x1B, 0x1D, 0xC5, 0x0B,  0x44, 0xAB, 0xDB, 0x78, 0x85, 0x92, 0x7B, 0xEA,  0xA5, 0xE2, 0x1C, 0x8B, 0x48, 0xD2, 0x60, 0x62,
  0x6C, 0x4C, 0x94, 0x4A, 0x9C, 0x4D, 0x54, 0xFF,  0x3E, 0x39, 0xD8, 0x1E, 0x9C, 0x70, 0x23, 0x71,  0xDB, 0xD6, 0x02, 0x86, 0xDA, 0xFD, 0xC1, 0xD2,  0x91, 0x57, 0xAF, 0x2E, 0xFE, 0xF5, 0x00, 0x7D,
  0x4C, 0x53, 0x8D, 0xA9, 0x65, 0x19, 0xBA, 0x50,  0xC4, 0xAD, 0x84, 0x1E, 0xCC, 0xBB, 0xDE, 0xCE,  0xB9, 0x47, 0x13, 0xE1, 0x92, 0x8E, 0x1A, 0x13,  0x4A, 0xB6, 0x9E, 0xB7, 0x78, 0x2A, 0x85, 0xD7,
  0x82, 0x0A, 0x8C, 0x33, 0x6A, 0x0F, 0xEA, 0x25,  0x55, 0x35, 0xFA, 0x17, 0x4C, 0x25, 0x83, 0xFC,  0x46, 0x2E, 0x14, 0xC1, 0x0F, 0x10, 0xAC, 0xD0,  0x6A, 0x0F, 0xEA, 0x25, 0x55, 0x35, 0xFA, 0x17,
  0x4C, 0x25, 0x83, 0xFC, 0x46, 0x2E, 0x14, 0xC1,  0x0F, 0x10, 0xAC, 0xD3, 0x81, 0xB4, 0x97, 0xEA,  0xC9, 0x5C, 0x1B, 0xE0, 0x3C, 0xAA, 0x73, 0xCF,  0x38, 0x6C, 0x03, 0x0A, 0x7E, 0x3A, 0x90, 0xAD,
  0xFF, 0x6A, 0x0F, 0xEA, 0x25, 0x55, 0x35, 0xFA,  0x17, 0x4C, 0x25, 0xE9, 0x6E, 0x3A, 0x4C, 0x00,  0x32, 0x40, 0xDF, 0x78, 0x84, 0xBF, 0x29, 0x7D,  0x1D, 0xB7, 0x11, 0x02, 0xF2, 0x09, 0x5E, 0x11,
  0x30, 0xDA, 0xF6, 0xCB, 0x71, 0x59, 0x1C, 0xE2,  0x57, 0xE3, 0xDA, 0x10, 0xB7, 0x49, 0xDB, 0x68,  0x8A, 0x07, 0x35, 0x27, 0x22, 0x9F, 0x75, 0x21,  0x74, 0xF5, 0x04, 0x0A, 0xFA, 0x72, 0xE8, 0x47,
  0x29, 0x89, 0xDD, 0x44, 0x85, 0xED, 0xAD, 0x05,  0xAB, 0x80, 0x3B, 0x5A, 0x2A, 0xD3, 0xED, 0x09,  0xD6, 0x72, 0xE8, 0x47, 0x29, 0x89, 0xDD, 0x44,  0x85, 0xED, 0xAD, 0x05, 0xAB, 0x80, 0x3B, 0x5A,
  0x2A, 0xD3, 0xED, 0x09, 0xD9, 0xD0, 0x60, 0x0B,  0x81, 0x07, 0xFA, 0x47, 0xA3, 0xE2, 0xA2, 0x37,  0x10, 0x8F, 0xA2, 0x1C, 0x29, 0x05, 0xA8, 0x1D,  0xBC, 0xFF, 0x72, 0xE8, 0x47, 0x29, 0x89, 0xDD,
  0x44, 0x85, 0xED, 0xAD, 0x21, 0xB8, 0xC5, 0xC7,  0xC8, 0x54, 0x1C, 0x48, 0xB2, 0xF6, 0xB7, 0xC8,  0x97, 0xB6, 0xCA, 0x45, 0xAF, 0xE5, 0x56, 0xC7,  0xF0, 0xD6, 0xBB, 0xDD, 0xD0, 0x8C, 0xD4, 0x41,
  0x1D, 0x5B, 0x96, 0x02, 0x96, 0x76, 0xC2, 0xF7,  0xEB, 0x04, 0xA4, 0xBB, 0xC7, 0xE3, 0x2C, 0x75,  0x53, 0x3C, 0x7C, 0x45, 0x65, 0x47, 0x79, 0x84,  0x2C, 0xF9, 0xC4, 0xDF, 0xF2, 0xC1, 0x12, 0xA2,
  0x64, 0x15, 0x40, 0xC8, 0x23, 0xC4, 0x59, 0x63,  0x17, 0x9C, 0x79, 0x84, 0x2C, 0xF9, 0xC4, 0xDF,  0xF2, 0xC1, 0x12, 0xA2, 0x64, 0x15, 0x40, 0xC8,  0x23, 0xC4, 0x59, 0x63, 0x17, 0x9F, 0xA6, 0x99,
  0xA6, 0xE2, 0x5E, 0x5A, 0x2D, 0x0D, 0xFA, 0x87,  0xCA, 0x9A, 0x27, 0xFF, 0x25, 0x11, 0x4C, 0x7C,  0xA9, 0x47, 0xFF, 0x79, 0x84, 0x2C, 0xF9, 0xC4,  0xDF, 0xF2, 0xC1, 0x12, 0xA3, 0x79, 0x79, 0x37,
  0xB7, 0x7F, 0x50, 0x6C, 0x93, 0x7D, 0xE0, 0x7E,  0x59, 0x26, 0x4F, 0x15, 0x63, 0x9A, 0x4E, 0x86,  0x1E, 0x0A, 0x7E, 0x75, 0x58, 0xCA, 0x97, 0x0E,  0xB9, 0x80, 0x53, 0xB2, 0x58, 0x8E, 0x8C, 0xBE,
  0xCE, 0x14, 0x83, 0x82, 0x99, 0xA9, 0xAD, 0xD8,  0xC6, 0x6D, 0x6E, 0x49, 0x4F, 0x8E, 0x0D, 0x64,  0x1A, 0x64, 0x3D, 0xED, 0xD9, 0x07, 0x5E, 0xBB,  0xCE, 0xC4, 0xDC, 0xA1, 0x76, 0x56, 0x37, 0x65,
  0x96, 0x35, 0x44, 0x64, 0x1A, 0x64, 0x3D, 0xED,  0xD9, 0x07, 0x5E, 0xBB, 0xCE, 0xC4, 0xDC, 0xA1,  0x76, 0x56, 0x37, 0x65, 0x96, 0x35, 0x47, 0xD1,  0x9D, 0x8A, 0x16, 0xA0, 0x73, 0x6F, 0x08, 0x76,
  0x36, 0x30, 0xE5, 0x62, 0xCA, 0x50, 0x12, 0xCA,  0x9B, 0x83, 0x7C, 0xFF, 0x64, 0x1A, 0x64, 0x3D,  0xED, 0xD9, 0x07, 0x5E, 0xBB, 0xCF, 0xB9, 0xC7,  0x26, 0x94, 0x1C, 0xDC, 0xB6, 0x9A, 0x41, 0x9A,
  0xB9, 0x7A, 0xCF, 0xAF, 0x1F, 0xCB, 0xD1, 0x8B,  0x83, 0x25, 0xC8, 0x43, 0xBC, 0x82, 0xAC, 0x56,  0xFD, 0x6F, 0x57, 0x54, 0xC6, 0x69, 0x16, 0xC0,  0x85, 0xF1, 0x19, 0xDC, 0xD0, 0xE7, 0x15, 0x40,
  0xCB, 0x30, 0xA7, 0xFA, 0x26, 0xB0, 0x24, 0x93,  0x4E, 0x94, 0xC6, 0xA8, 0x66, 0x80, 0xDF, 0x64,  0x3A, 0x54, 0xA1, 0x99, 0xF4, 0x03, 0xFD, 0x16,  0x15, 0x11, 0x5C, 0x3A, 0x4E, 0x94, 0xC6, 0xA8,
  0x66, 0x80, 0xDF, 0x64, 0x3A, 0x54, 0xA1, 0x99,  0xF4, 0x03, 0xFD, 0x16, 0x15, 0x11, 0x5C, 0x3D,  0xB9, 0xA4, 0x1D, 0xBC, 0x68, 0xE9, 0xDE, 0xC8,  0x18, 0xA5, 0xEC, 0x28, 0xC6, 0xAB, 0x73, 0xBF,
  0x49, 0x17, 0xD6, 0x73, 0xFF, 0x4E, 0x94, 0xC6,  0xA8, 0x66, 0x80, 0xDF, 0x64, 0x3A, 0x55, 0x8B,  0x4B, 0x88, 0xF7, 0xCD, 0x16, 0x71, 0x70, 0x4D,  0x32, 0xBE, 0xE9, 0x28, 0x1F, 0xDE, 0x9F, 0x43,
  0xC9, 0xC4, 0x39, 0x84, 0x6C, 0x50, 0x49, 0x36,  0x92, 0xF0, 0x81, 0x73, 0xE9, 0x59, 0x1C, 0x86,  0x8B, 0x2D, 0x94, 0x80, 0x5D, 0x6E, 0xD7, 0xDF,  0xDE, 0xCE, 0x0B, 0x40, 0x5E, 0x9C, 0x66, 0x37,
  0x6B, 0x55, 0x1B, 0x37, 0x76, 0xA2, 0x8A, 0x05,  0x50, 0x65, 0x81, 0x4C, 0x84, 0x2B, 0xDE, 0x67,  0x80, 0x5E, 0x7B, 0xED, 0x56, 0x55, 0x1B, 0x37,  0x76, 0xA2, 0x8A, 0x05, 0x50, 0x65, 0x81, 0x4C,
  0x84, 0x2B, 0xDE, 0x67, 0x80, 0x5E, 0x7B, 0xED,  0x59, 0xF5, 0x21, 0x87, 0xB2, 0xE1, 0x35, 0x70,  0x02, 0x1B, 0x0E, 0xD9, 0x32, 0x99, 0x92, 0xD1,  0x48, 0xC2, 0x6F, 0x32, 0x4B, 0xFF, 0x55, 0x1B,
  0x37, 0x76, 0xA2, 0x8A, 0x05, 0x50, 0x65, 0x7F,  0xB7, 0x18, 0x8B, 0x98, 0x04, 0x7A, 0x7C, 0x9C,  0xB6, 0x84, 0x6B, 0x92, 0x77, 0xC7, 0x5E, 0xBB,  0xC8, 0x72, 0x7B, 0xA1, 0x9F, 0x19, 0x0B, 0x43,
  0x23, 0x44, 0x32, 0xF4, 0xE4, 0xFF, 0x70, 0x2B,  0xAC, 0x21, 0xA6, 0x0C, 0xF1, 0x6A, 0x12, 0x28,  0xE1, 0x2A, 0xDC, 0x30, 0xF8, 0x0C, 0x1D, 0xFB,  0xBD, 0x6E, 0x37, 0x8B, 0x01, 0x19, 0x48, 0x7A,
  0x02, 0xD3, 0xE1, 0xED, 0x10, 0xF5, 0x82, 0x1F,  0x08, 0xAE, 0x07, 0x33, 0x99, 0xD2, 0x37, 0x8B,  0x01, 0x19, 0x48, 0x7A, 0x02, 0xD3, 0xE1, 0xED,  0x10, 0xF5, 0x82, 0x1F, 0x08, 0xAE, 0x07, 0x33,
  0x99, 0xD5, 0x67, 0x0C, 0x7D, 0xE4, 0xF6, 0x69,  0xF4, 0x19, 0x61, 0x74, 0xAD, 0x2F, 0x5F, 0x2B,  0x66, 0xD1, 0x1A, 0x20, 0x98, 0x8B, 0xFF, 0x37,  0x8B, 0x01, 0x19, 0x48, 0x7A, 0x02, 0xD3, 0xE1,
  0xED, 0x51, 0xA7, 0x70, 0xB2, 0x6D, 0x06, 0x1C,  0xDF, 0xDB, 0x04, 0x54, 0x25, 0xDB, 0x39, 0xA2,  0x2E, 0xB5, 0xA0, 0x8D, 0x8E, 0xF7, 0xA9, 0x55,  0x37, 0xA1, 0x19, 0x35, 0xF4, 0x99, 0xFB, 0x8E,
  0x8F, 0x92, 0x74, 0x14, 0x9C, 0x05, 0x3E, 0xE2,  0xE5, 0xCD, 0x2A, 0x82, 0x71, 0x0D, 0x03, 0xE3,  0xEA, 0x4B, 0xE7, 0x5D, 0xCD, 0x3C, 0x90, 0x1C,  0x77, 0xF7, 0xBE, 0x41, 0x32, 0x76, 0xC3, 0x04,
  0xCC, 0x09, 0xDC, 0x84, 0xCD, 0xB9, 0x9A, 0x5D,  0xCD, 0x3C, 0x90, 0x1C, 0x77, 0xF7, 0xBE, 0x41,  0x32, 0x76, 0xC3, 0x04, 0xCC, 0x09, 0xDC, 0x84,  0xCD, 0xB9, 0x9D, 0x82, 0xF8, 0x73, 0x2D, 0x3D,
  0xA2, 0x61, 0x9F, 0xA0, 0x4F, 0x6B, 0x2D, 0x14,  0x17, 0x17, 0x17, 0xDF, 0xFE, 0x8D, 0x4C, 0xFF,  0x5D, 0xCD, 0x3C, 0x90, 0x1C, 0x77, 0xF7, 0xBE,  0x41, 0x32, 0x94, 0xCB, 0x06, 0xB7, 0x80, 0xCF,
  0xBE, 0xEF, 0x58, 0x36, 0xCD, 0xA6, 0x2C, 0x76,  0x86, 0x58, 0xFF, 0x52, 0x39, 0x79, 0x18, 0x03,  0x99, 0x22, 0x0D, 0xBD, 0xBF, 0x25, 0xC1, 0x5F,  0xC1, 0x75, 0xAE, 0x4E, 0xF2, 0x1A, 0xC2, 0xAB,
  0xB0, 0x98, 0x8C, 0x3E, 0xF4, 0xBD, 0xD2, 0x53,  0x03, 0x91, 0x11, 0x06, 0x13, 0x2E, 0x71, 0xFA,  0xE5, 0x9A, 0xD4, 0x8B, 0xA6, 0xED, 0xC3, 0x32,  0xE0, 0x0D, 0x4A, 0xC4, 0x25, 0xF0, 0xCB, 0x0A,
  0x13, 0x2E, 0x71, 0xFA, 0xE5, 0x9A, 0xD4, 0x8B,  0xA6, 0xED, 0xC3, 0x32, 0xE0, 0x0D, 0x4A, 0xC4,  0x25, 0xF0, 0xCB, 0x0D, 0xD4, 0x49, 0x7C, 0xB9,  0x30, 0x03, 0x2C, 0x93, 0xE0, 0x24, 0x7F, 0x53,
  0x29, 0x79, 0x2C, 0xF8, 0x0E, 0x0B, 0x90, 0x5F,  0xFF, 0x13, 0x2E, 0x71, 0xFA, 0xE5, 0x9A, 0xD4,  0x8B, 0xA6, 0xEF, 0x6D, 0xB9, 0xB2, 0x9B, 0x87,  0xB4, 0x24, 0x9B, 0x6D, 0x4E, 0x84, 0x5E, 0xF0,
  0x04, 0xB3, 0x4A, 0x52, 0x6F, 0x24, 0x57, 0x37,  0x51, 0x67, 0xD8, 0x7E, 0xCF, 0xD8, 0xAF, 0x5F,  0x42, 0x29, 0x4B, 0x8C, 0x46, 0x3E, 0xC0, 0xC8,  0x95, 0x41, 0x3E, 0xDA, 0x45, 0xBB, 0xA5, 0x71,
  0x6C, 0x9A, 0x86, 0x1A, 0x45, 0x33, 0x5B, 0x84,  0x2A, 0x06, 0xE5, 0xF7, 0x76, 0xF1, 0xE2, 0xA3,  0x37, 0x21, 0x46, 0x93, 0x82, 0xF8, 0xD8, 0x30,  0x6E, 0x33, 0x5B, 0x84, 0x2A, 0x06, 0xE5, 0xF7,
  0x76, 0xF1, 0xE2, 0xA3, 0x37, 0x21, 0x46, 0x93,  0x82, 0xF8, 0xD8, 0x30, 0x71, 0xBF, 0x4C, 0xCE,  0xB1, 0xD5, 0xAD, 0xE9, 0x26, 0xBD, 0xC4, 0x52,  0x0A, 0x18, 0xFE, 0x55, 0x6C, 0xB6, 0xE7, 0xBB,
  0xF0, 0xFF, 0x33, 0x5B, 0x84, 0x2A, 0x06, 0xE5,  0xF7, 0x76, 0xF1, 0xE2, 0xB7, 0xBA, 0x1D, 0xDC,  0xD9, 0xE3, 0xCE, 0x46, 0x6A, 0xA2, 0x89, 0x98,  0x5F, 0xC6, 0xD6, 0x6D, 0x0D, 0xC6, 0x10, 0x92,
  0x0C, 0x63, 0x66, 0x2D, 0xBE, 0x25, 0x05, 0xF7,  0x7C, 0x9C, 0x66, 0xC8, 0x00, 0xE4, 0xBF, 0x40,  0x3F, 0x74, 0xC3, 0x0C, 0x08, 0x21, 0x94, 0xFB,  0x70, 0x99, 0x97, 0x0F, 0xB0, 0x9F, 0x1D, 0x24,
  0xB2, 0xFD, 0xB3, 0xC0, 0x95, 0xE2, 0x46, 0xF6,  0x53, 0x78, 0x3F, 0x7D, 0xA8, 0xE3, 0x93, 0xDC,  0x7A, 0x18, 0x1D, 0x24, 0xB2, 0xFD, 0xB3, 0xC0,  0x95, 0xE2, 0x46, 0xF6, 0x53, 0x78, 0x3F, 0x7D,
  0xA8, 0xE3, 0x93, 0xDC, 0x7A, 0x1B, 0xFD, 0x70,  0xC8, 0xCD, 0x75, 0x17, 0x34, 0x06, 0xB8, 0xC9,  0x36, 0x5C, 0xBF, 0x3B, 0x2F, 0x3F, 0x75, 0xDF,  0x4F, 0x7F, 0xFF, 0x1D, 0x24, 0xB2, 0xFD, 0xB3,
  0xC0, 0x95, 0xE2, 0x46, 0xF6, 0xCF, 0x06, 0xDB,  0xB8, 0xC7, 0x4C, 0x6B, 0xA4, 0xA3, 0x46, 0x4E,  0xA9, 0x28, 0x36, 0x7C, 0xA3, 0x6E, 0xCC, 0xB6,  0xFE, 0x47, 0x0E, 0xA7, 0xDF, 0x51, 0x3D, 0x00,
  0x9B, 0xF6, 0x48, 0xEC, 0x4A, 0xA7, 0x93, 0x19,  0x3C, 0x79, 0xD2, 0xA8, 0xBD, 0xD5, 0x03, 0x9F,  0xF2, 0x7E, 0x99, 0x0A, 0xCF, 0x1B, 0x73, 0x1C,  0xBA, 0x68, 0x28, 0x87, 0x45, 0xB4, 0x29, 0xB1,
  0xAD, 0x61, 0x19, 0xE0, 0xB0, 0x33, 0x0D, 0xD3,  0x5A, 0x1A, 0x14, 0x1C, 0xBA, 0x68, 0x28, 0x87,  0x45, 0xB4, 0x29, 0xB1, 0xAD, 0x61, 0x19, 0xE0,  0xB0, 0x33, 0x0D, 0xD3, 0x5A, 0x1A, 0x17, 0x39,
  0xEC, 0x9B, 0x4A, 0x59, 0xB5, 0x20, 0xF0, 0x6D,  0xE6, 0x86, 0x8D, 0xC6, 0x95, 0xBD, 0x91, 0x0B,  0x74, 0xC7, 0xC7, 0xFF, 0x1C, 0xBA, 0x68, 0x28,  0x87, 0x45, 0xB4, 0x29, 0xB1, 0xAE, 0x8F, 0x3E,
  0x6C, 0x70, 0x6A, 0xF9, 0xE3, 0x70, 0x62, 0xF0,  0xD1, 0x6F, 0x72, 0x40, 0x11, 0x3C, 0xF9, 0x05,  0xF4, 0x96, 0xC3, 0xEB, 0x1A, 0xB2, 0x5E, 0x8A,  0x70, 0x78, 0xD0, 0x25, 0xE2, 0xC5, 0xD3, 0x9B,
  0x35, 0xF9, 0xD1, 0x91, 0x7B, 0x7A, 0x36, 0x72,  0x6A, 0x77, 0x4F, 0x0E, 0xDF, 0x57, 0xC3, 0x33,  0x2A, 0x4F, 0x92, 0x22, 0x51, 0x25, 0xEA, 0x89,  0xB1, 0x35, 0x9B, 0x7C, 0x30, 0xC5, 0x0D, 0x51,
  0x5F, 0x6A, 0x0E, 0x60, 0x2A, 0x4F, 0x92, 0x22,  0x51, 0x25, 0xEA, 0x89, 0xB1, 0x35, 0x9B, 0x7C,  0x30, 0xC5, 0x0D, 0x51, 0x5F, 0x6A, 0x0E, 0x63,  0x61, 0xC1, 0x81, 0x54, 0xD4, 0x62, 0xD8, 0x85,
  0x71, 0x21, 0xD0, 0xF3, 0x0D, 0xFC, 0xF0, 0xC0,  0x68, 0x61, 0xC2, 0x9D, 0xFF, 0x2A, 0x4F, 0x92,  0x22, 0x51, 0x25, 0xEA, 0x89, 0xB1, 0x36, 0x6A,  0x59, 0x9C, 0x11, 0x73, 0x95, 0xFE, 0x10, 0x26,
  0x02, 0x3C, 0xC4, 0xFC, 0x47, 0x60, 0xAA, 0x83,  0xAD, 0x7D, 0x7D, 0x5B, 0x1C, 0x4D, 0xE5, 0x57,  0x38, 0x7D, 0x50, 0xA5, 0x6D, 0x76, 0xF7, 0xB4,  0x4B, 0x67, 0x67, 0x56, 0xF4, 0x03, 0x7B, 0x78,
  0xCA, 0xC0, 0xD5, 0xE4, 0x4A, 0xB5, 0xCE, 0xA4,  0xBF, 0x02, 0xA5, 0x01, 0x6C, 0x99, 0x78, 0x71,  0x53, 0x39, 0x75, 0x24, 0x59, 0x2A, 0x6D, 0x95,  0xD1, 0xB7, 0x7A, 0xA3, 0x08, 0x02, 0xA5, 0x01,
  0x6C, 0x99, 0x78, 0x71, 0x53, 0x39, 0x75, 0x24,  0x59, 0x2A, 0x6D, 0x95, 0xD1, 0xB7, 0x7A, 0xA3,  0x0B, 0x4A, 0xBB, 0x6B, 0xE1, 0xCD, 0x39, 0x12,  0x19, 0x0F, 0x34, 0x27, 0xFA, 0x51, 0xA5, 0x77,
  0xF8, 0xFC, 0xB2, 0x60, 0x67, 0xFF, 0x02, 0xA5,  0x01, 0x6C, 0x99, 0x78, 0x71, 0x53, 0x39, 0x75,  0x4B, 0xEF, 0xA5, 0x89, 0x46, 0xFF, 0x97, 0x6C,  0xFF, 0x84, 0x49, 0x3D, 0x2A, 0x6C, 0x7E, 0xCC,
  0x18, 0xF5, 0x6E, 0xC9, 0xC4, 0xF0, 0xA4, 0xC4,  0xC3, 0x64, 0x48, 0x45, 0x90, 0x75, 0x7F, 0x83,  0xCB, 0xB4, 0x2B, 0xD9, 0x31, 0x4C, 0x85, 0x3E,  0x97, 0x39, 0x32, 0xF2, 0x2D, 0x43, 0x5D, 0x63,
  0x3B, 0xCE, 0x10, 0x08, 0xB6, 0xAC, 0x90, 0xDD,  0x20, 0xC6, 0xD1, 0xF1, 0xF0, 0x9E, 0x8D, 0xBC,  0x74, 0xEA, 0x06, 0x49, 0x3F, 0x24, 0x10, 0x08,  0xB6, 0xAC, 0x90, 0xDD, 0x20, 0xC6, 0xD1, 0xF1,
  0xF0, 0x9E, 0x8D, 0xBC, 0x74, 0xEA, 0x06, 0x49,  0x3F, 0x27, 0x1E, 0xE0, 0x52, 0xD0, 0x3F, 0x04,  0x17, 0xEB, 0x66, 0xE0, 0x14, 0x6C, 0xB3, 0xF4,  0xC3, 0x87, 0x9B, 0xDE, 0xA9, 0x6D, 0xFF, 0x10,
  0x08, 0xB6, 0xAC, 0x90, 0xDD, 0x20, 0xC6, 0xD1,  0xF1, 0xA6, 0x6B, 0xF9, 0x32, 0xBD, 0xBF, 0x1A,  0x07, 0xBE, 0xB2, 0x68, 0xE9, 0x32, 0x69, 0x70,  0x03, 0x00, 0xBB, 0xB4, 0xA2, 0xDC, 0x4F, 0xD3,
  0x2C, 0x4C, 0x7C, 0x6B, 0x79, 0xDE, 0xA6, 0x43,  0x07, 0xF4, 0xFF, 0x4C, 0xC7, 0xF5, 0x1F, 0x87,  0xA2, 0x84, 0xB0, 0x6F, 0xE5, 0xC2, 0xD4, 0xD5,  0x8B, 0xA2, 0x5F, 0x43, 0xD1, 0xFE, 0xC7, 0x2C,
  0xE2, 0x3F, 0xC0, 0x02, 0xCF, 0x10, 0x45, 0x7F,  0x71, 0x60, 0x03, 0x2F, 0xCF, 0x87, 0xF6, 0x43,  0xD1, 0xFE, 0xC7, 0x2C, 0xE2, 0x3F, 0xC0, 0x02,  0xCF, 0x10, 0x45, 0x7F, 0x71, 0x60, 0x03, 0x2F,
  0xCF, 0x87, 0xF9, 0xE4, 0x12, 0xBA, 0x59, 0xB6,  0xF2, 0x30, 0x86, 0x0D, 0x01, 0xFD, 0xA4, 0xC1,  0xB9, 0x20, 0x9F, 0x0C, 0x8F, 0x15, 0x01, 0xFF,  0x43, 0xD1, 0xFE, 0xC7, 0x2C, 0xE2, 0x3F, 0xC0,
  0x02, 0xD0, 0x2A, 0x19, 0x3F, 0x5B, 0xD1, 0x28,  0x0E, 0x64, 0xEB, 0x74, 0x74, 0x74, 0x71, 0xA3,  0x29, 0xD9, 0x71, 0xC4, 0x39, 0xED, 0x04, 0xF0,  0xAC, 0x7B, 0x67, 0xBC, 0x7D, 0x68, 0x6E, 0x46,
  0xDA, 0x0E, 0xB3, 0x1F, 0x84, 0xC5, 0xF2, 0x59,  0x18, 0x82, 0x12, 0x5F, 0x2C, 0x8F, 0x9D, 0xB9,  0x4E, 0x49, 0xFF, 0x6A, 0x57, 0x55, 0x7E, 0x8E,  0xFF, 0x23, 0xE6, 0xCE, 0x5A, 0x8B, 0x4F, 0x15,
  0x1B, 0x48, 0x7E, 0x0B, 0x0E, 0xFA, 0x1C, 0x9C,  0x57, 0x55, 0x7E, 0x8E, 0xFF, 0x23, 0xE6, 0xCE,  0x5A, 0x8B, 0x4F, 0x15, 0x1B, 0x48, 0x7E, 0x0B,  0x0E, 0xFA, 0x1C, 0x9F, 0xE2, 0xA6, 0x62, 0x1C,
  0x05, 0xEB, 0x1E, 0x36, 0x89, 0x35, 0x0C, 0x31,  0x59, 0x53, 0x2E, 0x36, 0xDB, 0x24, 0xEE, 0xEF,  0xFF, 0x57, 0x55, 0x7E, 0x8E, 0xFF, 0x23, 0xE6,  0xCE, 0x5A, 0x8C, 0x2E, 0xD7, 0xEA, 0xC2, 0xDD,
  0x07, 0x51, 0xCA, 0x63, 0x1C, 0x5B, 0xC0, 0x9C,  0xF1, 0x50, 0x80, 0x8E, 0xD5, 0x53, 0xD8, 0x94,  0xDA, 0x49, 0x59, 0x76, 0x87, 0xA3, 0x3A, 0x32,  0x5C, 0xD6, 0xB6, 0xAA, 0xC9, 0x21, 0x15, 0x76,
  0xCD, 0x78, 0x76, 0x64, 0x14, 0x17, 0x1F, 0x18,  0xCB, 0x56, 0x64, 0x9B, 0x35, 0x35, 0x15, 0xBC,  0x8A, 0xD9, 0xCC, 0xBB, 0x7F, 0x66, 0xFC, 0xE1,  0xDB, 0x7A, 0xE4, 0x36, 0x3B, 0x6D, 0x69, 0x1F,
  0x70, 0x35, 0x15, 0xBC, 0x8A, 0xD9, 0xCC, 0xBB,  0x7F, 0x66, 0xFC, 0xE1, 0xDB, 0x7A, 0xE4, 0x36,  0x3B, 0x6D, 0x69, 0x1F, 0x73, 0x3D, 0x8E, 0xD9,  0x2A, 0x3D, 0x77, 0x6A, 0xCF, 0xD8, 0xC7, 0xDD,
  0x9D, 0xB9, 0x1B, 0x8F, 0x18, 0xEE, 0x20, 0x5F,  0xFF, 0xFF, 0x35, 0x15, 0xBC, 0x8A, 0xD9, 0xCC,  0xBB, 0x7F, 0x66, 0xFD, 0xAE, 0x31, 0xDC, 0x15,  0xD3, 0x99, 0xBA, 0x2A, 0x47, 0x0A, 0xAA, 0x2A,
  0x54, 0x29, 0x10, 0x23, 0x0A, 0x28, 0xD6, 0x8A,  0xDD, 0xDE, 0x6A, 0xCD, 0xA3, 0xC3, 0x9E, 0x8A,  0x85, 0x1A, 0xC2, 0xBD, 0x5D, 0xCD, 0xE3, 0x85,  0x96, 0xC1, 0xE9, 0x74, 0xD8, 0x79, 0x1A, 0xF7,
  0x2E, 0x7E, 0xC3, 0xE1, 0x8D, 0x54, 0x08, 0x4D,  0x3E, 0xD1, 0x07, 0xDD, 0xFF, 0xD7, 0xC0, 0x05,  0xE0, 0xE2, 0x4D, 0x1E, 0xE6, 0x8F, 0x3A, 0xE7,  0xF2, 0xAC, 0x08, 0x4D, 0x3E, 0xD1, 0x07, 0xDD,
  0xFF, 0xD7, 0xC0, 0x05, 0xE0, 0xE2, 0x4D, 0x1E,  0xE6, 0x8F, 0x3A, 0xE7, 0xF2, 0xAF, 0x7B, 0x72,  0x82, 0xA7, 0x78, 0x90, 0x72, 0xB2, 0x33, 0xD1,  0xE6, 0x02, 0xD3, 0x9F, 0xD5, 0x9B, 0xFE, 0x9E,
  0x82, 0x97, 0xFF, 0x08, 0x4D, 0x3E, 0xD1, 0x07,  0xDD, 0xFF, 0xD7, 0xC0, 0x06, 0x62, 0x39, 0xED,  0xB4, 0x56, 0x27, 0x13, 0xDF, 0xA5, 0x30, 0x73,  0xBA, 0x91, 0x86, 0xEB, 0x8B, 0x31, 0x7F, 0xEE,
  0xCA, 0xFC, 0x55, 0x8B, 0xBB, 0xE0, 0xBF, 0x4F,  0x58, 0x7A, 0xC8, 0x67, 0x12, 0xCB, 0xCB, 0x93,  0x51, 0xF4, 0xD1, 0xA8, 0x55, 0x4C, 0x9B, 0x0D,  0x58, 0x82, 0x54, 0xFD, 0xA0, 0xBA, 0xC0, 0x70,
  0xB1, 0xB2, 0xEA, 0x68, 0x24, 0xC0, 0x08, 0x28,  0x81, 0xEF, 0xF9, 0x3D, 0xAF, 0x44, 0xEA, 0x16,  0x6A, 0x20, 0xD8, 0x70, 0xB1, 0xB2, 0xEA, 0x68,  0x24, 0xC0, 0x08, 0x28, 0x81, 0xEF, 0xF9, 0x3D,
  0xAF, 0x44, 0xEA, 0x16, 0x6A, 0x20, 0xDB, 0xD9,  0x40, 0xE0, 0xB5, 0xC9, 0xC5, 0xAD, 0x9E, 0xBA,  0x84, 0x9F, 0x6D, 0x28, 0x7B, 0x3A, 0xBE, 0xEC,  0xE6, 0xD6, 0x80, 0xFF, 0x70, 0xB1, 0xB2, 0xEA,
  0x68, 0x24, 0xC0, 0x08, 0x28, 0x80, 0x8C, 0xD2,  0x62, 0x3D, 0xD5, 0xC6, 0x08, 0x61, 0x2F, 0x28,  0xB3, 0xFD, 0x9B, 0x0C, 0x7D, 0xBB, 0x62, 0x3A,  0xFB, 0x3D, 0x14, 0xF0, 0x56, 0x72, 0xE6, 0x19,
  0xE5, 0xAB, 0x74, 0x1D, 0xDF, 0x43, 0xF8, 0x30,  0x6B, 0x2D, 0x78, 0x4B, 0x15, 0xA0, 0xE2, 0x17,  0x3E, 0xB9, 0x76, 0x01, 0x8A, 0xCB, 0x8C, 0x60,  0x50, 0x2A, 0x3F, 0xAD, 0x93, 0x48, 0x77, 0xF9,
  0x3C, 0x27, 0x6D, 0xCC, 0x53, 0x9F, 0x7F, 0x1B,  0xB5, 0x33, 0xEF, 0xDE, 0x50, 0x2A, 0x3F, 0xAD,  0x93, 0x48, 0x77, 0xF9, 0x3C, 0x27, 0x6D, 0xCC,  0x53, 0x9F, 0x7F, 0x1B, 0xB5, 0x33, 0xEF, 0xE1,
  0x51, 0x38, 0x62, 0xD8, 0xB2, 0x75, 0xF9, 0x9E,  0x6F, 0x68, 0x2A, 0xB4, 0xD5, 0x7E, 0xA7, 0xFA,  0x6C, 0xF2, 0xBE, 0xC8, 0xFF, 0x50, 0x2A, 0x3F,  0xAD, 0x93, 0x48, 0x77, 0xF9, 0x3C, 0x26, 0xF8,
  0xBA, 0xE5, 0x52, 0xB9, 0x40, 0x07, 0x28, 0xEB,  0x68, 0xA7, 0xAB, 0xBE, 0xA2, 0x02, 0xD2, 0x3A,  0xE9, 0xA4, 0x17, 0x75, 0x43, 0xA6, 0x2E, 0x20,  0x55, 0x8D, 0x37, 0xFA, 0xFF, 0x70, 0x9A, 0x40,
  0xC2, 0x1F, 0x28, 0xFC, 0x3A, 0x70, 0x5C, 0x40,  0x09, 0x1B, 0x45, 0x70, 0x85, 0x83, 0xE5, 0xC4,  0x92, 0x60, 0xA2, 0x5A, 0x22, 0x5C, 0x05, 0x06,  0xA7, 0x1B, 0x8A, 0x5F, 0x2C, 0x4E, 0x8A, 0xCF,
  0xB6, 0x5E, 0x87, 0x75, 0xD4, 0x60, 0xA2, 0x5A,  0x22, 0x5C, 0x05, 0x06, 0xA7, 0x1B, 0x8A, 0x5F,  0x2C, 0x4E, 0x8A, 0xCF, 0xB6, 0x5E, 0x87, 0x75,  0xD7, 0xD3, 0x21, 0xC9, 0x00, 0xF1, 0x04, 0x70,
  0x59, 0x5C, 0x28, 0xA7, 0x0F, 0xA0, 0x78, 0x77,  0xBC, 0x76, 0x36, 0xEC, 0x9E, 0xFF, 0x60, 0xA2,  0x5A, 0x22, 0x5C, 0x05, 0x06, 0xA7, 0x1B, 0x8A,  0xF4, 0x88, 0xCA, 0x77, 0xDA, 0xD7, 0xFF, 0x8E,
  0x42, 0xA4, 0xBC, 0x4D, 0x86, 0xDF, 0xAE, 0xEA,  0x5A, 0x27, 0x25, 0x2D, 0x98, 0x27, 0xA0, 0x3B,  0xFD, 0xA8, 0xD8, 0x4D, 0xD1, 0x21, 0x74, 0xCF,  0xB1, 0xD0, 0x5B, 0x77, 0x62, 0xCF, 0x4B, 0x81,
  0xA7, 0xFA, 0x51, 0x49, 0xC9, 0x48, 0xCF, 0x41,  0xFE, 0x92, 0x10, 0x52, 0x8D, 0xD7, 0xC5, 0x8C,  0x8B, 0x80, 0x30, 0xEC, 0x40, 0xA0, 0x4D, 0x3C,  0x7C, 0xC1, 0x90, 0xA1, 0xC5, 0xFE, 0x10, 0x52,
  0x8D, 0xD7, 0xC5, 0x8C, 0x8B, 0x80, 0x30, 0xEC,  0x40, 0xA0, 0x4D, 0x3C, 0x7C, 0xC1, 0x90, 0xA1,  0xC6, 0x01, 0xD4, 0xF1, 0x4E, 0x02, 0x4A, 0x1D,  0x97, 0x4D, 0x8B, 0x80, 0x4B, 0x9F, 0x45, 0x15,
  0xAC, 0xC4, 0x0E, 0x12, 0x65, 0x00, 0xFF, 0x10,  0x52, 0x8D, 0xD7, 0xC5, 0x8C, 0x8B, 0x80, 0x30,  0xEC, 0x38, 0x58, 0x41, 0x26, 0x59, 0xCE, 0x3D,  0x6D, 0x06, 0xC2, 0x9C, 0xD5, 0x6B, 0x74, 0xC6,
  0x0B, 0xAB, 0x6A, 0xF4, 0xF6, 0xB2, 0xEC, 0x13,  0x9D, 0x2B, 0x4F, 0x08, 0xBE, 0xDC, 0x5F, 0xDE,  0xC8, 0x09, 0x2C, 0x22, 0xAE, 0xB7, 0xA0, 0x79,  0x68, 0xA4, 0x62, 0x28, 0x5E, 0xD9, 0xFE, 0xFB,
  0xC5, 0x77, 0xB3, 0x22, 0x82, 0xF2, 0x45, 0x9D,  0xA0, 0x92, 0xDA, 0xB6, 0xEA, 0xF0, 0xA6, 0x4B,  0xDE, 0x8B, 0xF4, 0x49, 0x68, 0xE6, 0xD4, 0x22,  0x82, 0xF2, 0x45, 0x9D, 0xA0, 0x92, 0xDA, 0xB6,
  0xEA, 0xF0, 0xA6, 0x4B, 0xDE, 0x8B, 0xF4, 0x49,  0x68, 0xE6, 0xD7, 0x2F, 0x07, 0x46, 0x00, 0x5B,  0x35, 0xB1, 0x0B, 0xB0, 0xC7, 0x61, 0xC8, 0xF9,  0xA0, 0xD1, 0xF9, 0xF0, 0x79, 0x5E, 0x26, 0xFF,
  0x22, 0x82, 0xF2, 0x45, 0x9D, 0xA0, 0x92, 0xDA,  0xB6, 0xE9, 0x9B, 0x01, 0x0D, 0xE8, 0x8A, 0xE7,  0x06, 0x23, 0xB5, 0xD8, 0x7A, 0x02, 0x2D, 0xB7,  0xFA, 0x50, 0x64, 0x05, 0x6B, 0xBA, 0x06, 0x80,
  0xB0, 0x3D, 0x83, 0xED, 0x35, 0x1F, 0x3A, 0x1F,  0x9F, 0x6F, 0xEB, 0xBF, 0xF4, 0x7B, 0x55, 0x3C,  0xAB, 0x28, 0xA6, 0xA5, 0x7E, 0x56, 0xA8, 0xA1,  0x0A, 0xD3, 0xA7, 0x73, 0x1E, 0xA0, 0x0C, 0x32,
  0xB7, 0x1E, 0xB1, 0x7B, 0x3F, 0x52, 0x15, 0xB3,  0x16, 0xE8, 0x90, 0x9F, 0xFB, 0x6B, 0x01, 0x88,  0x1E, 0xA0, 0x0C, 0x32, 0xB7, 0x1E, 0xB1, 0x7B,  0x3F, 0x52, 0x15, 0xB3, 0x16, 0xE8, 0x90, 0x9F,
  0xFB, 0x6B, 0x01, 0x8B, 0x80, 0xA8, 0xE7, 0x85,  0x74, 0x29, 0x68, 0x02, 0xB0, 0x51, 0x7A, 0xF9,  0xCE, 0x30, 0x01, 0x06, 0xC8, 0xF1, 0xB9, 0xE5,  0xFF, 0x1E, 0xA0, 0x0C, 0x32, 0xB7, 0x1E, 0xB1,
  0x7B, 0x3F, 0x51, 0x83, 0x4E, 0x27, 0xA9, 0xF9,  0xEF, 0x7E, 0xC2, 0x16, 0x26, 0x32, 0xE8, 0xB0,  0x30, 0x47, 0x0B, 0x4A, 0x58, 0xD4, 0x8B, 0xB1,  0x2D, 0xEB, 0xA2, 0x51, 0x6F, 0x8F, 0x2F, 0xB5,
  0xEF, 0x6F, 0x79, 0x57, 0xB2, 0x57, 0x6F, 0x73,  0x6D, 0xFD, 0xFB, 0xC7, 0xCC, 0x2E, 0x08, 0x74,  0x91, 0xF2, 0xAB, 0x86, 0x9F, 0x2B, 0xDE, 0x42,  0x96, 0x69, 0x28, 0xE1, 0xF5, 0x38, 0x31, 0xAB,
  0x09, 0x47, 0x86, 0x6E, 0x28, 0xD2, 0x61, 0x5C,  0x08, 0x2B, 0xDE, 0x42, 0x96, 0x69, 0x28, 0xE1,  0xF5, 0x38, 0x31, 0xAB, 0x09, 0x47, 0x86, 0x6E,  0x28, 0xD2, 0x61, 0x5C, 0x0B, 0x8A, 0xD4, 0x91,
  0x27, 0x3D, 0x4D, 0x8D, 0x59, 0x8B, 0xBC, 0xD6,  0x04, 0xE0, 0xAE, 0x14, 0xBB, 0x99, 0xE5, 0x94,  0x55, 0xFF, 0x2B, 0xDE, 0x42, 0x96, 0x69, 0x28,  0xE1, 0xF5, 0x38, 0x31, 0xD3, 0xD5, 0xAD, 0x3E,
  0x85, 0x9B, 0xA3, 0x4A, 0xF9, 0xDA, 0x9B, 0xE0,  0xB4, 0x2C, 0x0A, 0xE2, 0xB4, 0xFA, 0xED, 0x8F,  0x67, 0x54, 0x37, 0xEF, 0x49, 0x22, 0x26, 0x05,  0xDC, 0x06, 0x3F, 0xE3, 0xEA, 0x51, 0x51, 0x16,
  0x8E, 0xF2, 0xA3, 0xB1, 0x19, 0xC1, 0x1C, 0xAF,  0xCD, 0x50, 0x3D, 0x26, 0x26, 0x68, 0x7F, 0xCB,  0x9A, 0x53, 0xD8, 0x8B, 0xFD, 0xC6, 0x31, 0x75,  0x35, 0x6D, 0xFC, 0x7C, 0x19, 0x90, 0x7E, 0x7D,
  0x31, 0x6C, 0x7F, 0xCB, 0x9A, 0x53, 0xD8, 0x8B,  0xFD, 0xC6, 0x31, 0x75, 0x35, 0x6D, 0xFC, 0x7C,  0x19, 0x90, 0x7E, 0x7D, 0x31, 0x6F, 0xB6, 0xCE,  0x9F, 0x5D, 0xD7, 0x06, 0x6A, 0x17, 0xB9, 0xC4,
  0x21, 0x02, 0x53, 0xC5, 0x4F, 0x61, 0xB6, 0x41,  0xA0, 0x82, 0xFF, 0x7F, 0xCB, 0x9A, 0x53, 0xD8,  0x8B, 0xFD, 0xC6, 0x31, 0x75, 0xF0, 0x06, 0x54,  0x76, 0x81, 0x96, 0xDB, 0xAC, 0x26, 0x66, 0xC4,
  0x8F, 0x96, 0x99, 0x87, 0x01, 0x24, 0x6A, 0xA8,  0x87, 0xC9, 0x4D, 0xB9, 0x07, 0xFC, 0x0D, 0x7F,  0x18, 0xA6, 0x5C, 0xDE, 0xDB, 0xB7, 0x8C, 0xD2,  0xEF, 0x81, 0x7D, 0x0B, 0x04, 0xB9, 0x80, 0x7B,
  0xE0, 0xAA, 0x78, 0xBF, 0xD3, 0x1A, 0x42, 0x45,  0x82, 0x99, 0xC0, 0x78, 0x7C, 0x33, 0xEE, 0x26,  0xE6, 0x6F, 0x02, 0xBF, 0x55, 0x5A, 0x6B, 0x6A,  0x3C, 0xE2, 0x78, 0x45, 0x82, 0x99, 0xC0, 0x78,
  0x7C, 0x33, 0xEE, 0x26, 0xE6, 0x6F, 0x02, 0xBF,  0x55, 0x5A, 0x6B, 0x6A, 0x3C, 0xE2, 0x7B, 0x9C,  0xFE, 0x49, 0x5B, 0x27, 0x0B, 0xAF, 0xF3, 0xEE,  0x18, 0xC4, 0xC8, 0x27, 0x59, 0x04, 0x25, 0x51,
  0xD6, 0x85, 0x87, 0xFF, 0x45, 0x82, 0x99, 0xC0,  0x78, 0x7C, 0x33, 0xEE, 0x26, 0xE6, 0x14, 0x2A,  0x34, 0xB0, 0x95, 0x1D, 0xE1, 0x0C, 0x82, 0xBC,  0x71, 0xF4, 0x43, 0x69, 0xD3, 0xF3, 0xC2, 0x11,
  0xE8, 0xD1, 0x8A, 0xBA, 0x04, 0x24, 0x11, 0xC0,  0x78, 0x22, 0xDF, 0xA8, 0x8A, 0xFA, 0x8F, 0xEB,  0xBE, 0x1D, 0x59, 0x49, 0x28, 0x38, 0x14, 0xC0,  0x84, 0xC5, 0xAD, 0xDA, 0x03, 0xD3, 0x66, 0x58,
};

static key_info lv1_315 = {
	0,
	{ 0xB9, 0xF3, 0xF9, 0xE6, 0x10, 0x7C, 0xFF, 0x26,  0x80, 0xA9, 0x1E, 0x11, 0x8C, 0x24, 0x03, 0xCF,  0x4A, 0x6F, 0x18, 0xF3, 0xC7, 0xEF, 0xD7, 0xD1,  0x3D, 0x1A, 0xC4, 0xDB, 0x76, 0x0B, 0xD2, 0x22, },
	{ 0xB4, 0x36, 0x61, 0xB9, 0xA7, 0x9B, 0xAD, 0x9D,  0x8E, 0x2B, 0x04, 0x64, 0x69, 0xCD, 0xA1, 0xE7, },
};
static key_info lv2_315 = {
	0,
	{ 0x94, 0x30, 0x3F, 0x69, 0x51, 0x35, 0x72, 0xAB,  0x5A, 0xE1, 0x7C, 0x8C, 0x2A, 0x18, 0x39, 0xD2,  0xC2, 0x4C, 0x28, 0xF6, 0x53, 0x89, 0xD3, 0xBB,  0xB1, 0x18, 0x94, 0xCE, 0x23, 0xE0, 0x79, 0x8F, },
	{ 0x97, 0x69, 0xBF, 0xD1, 0x87, 0xB9, 0x09, 0x90,  0xAE, 0x5F, 0xEA, 0x4E, 0x11, 0x0B, 0x9C, 0xF5, },
	{ 0xAF, 0xAF, 0x5E, 0x96, 0xAF, 0x39, 0x6C, 0xBB,  0x69, 0x07, 0x10, 0x82, 0xC4, 0x6A, 0x8F, 0x34,  0xA0, 0x30, 0xE8, 0xED, 0xB7, 0x99, 0xE0, 0xA7,  0xBE, 0x00, 0xAA, 0x26, 0x4D, 0xFF, 0x3A, 0xEB,  0xF7, 0x92, 0x39, 0x20, 0xD5, 0x59, 0x40, 0x4D, },
};
static key_info app_315 = {
	0x11,
	{ 0x79, 0x48, 0x18, 0x39, 0xC4, 0x06, 0xA6, 0x32, 0xBD, 0xB4, 0xAC, 0x09, 0x3D, 0x73, 0xD9, 0x9A,  0xE1, 0x58, 0x7F, 0x24, 0xCE, 0x7E, 0x69, 0x19, 0x2C, 0x1C, 0xD0, 0x01, 0x02, 0x74, 0xA8, 0xAB, },
	{ 0x6F, 0x0F, 0x25, 0xE1, 0xC8, 0xC4, 0xB7, 0xAE, 0x70, 0xDF, 0x96, 0x8B, 0x04, 0x52, 0x1D, 0xDA, },
	{ 0x94, 0xD1, 0xB7, 0x37, 0x8B, 0xAF, 0xF5, 0xDF, 0xED, 0x26, 0x92, 0x40, 0xA7, 0xA3, 0x64, 0xED,  0x68, 0x44, 0x67, 0x41, 0x62, 0x2E, 0x50, 0xBC, 0x60, 0x79, 0xB6, 0xE6, 0x06, 0xA2, 0xF8, 0xE0,  0xA4, 0xC5, 0x6E, 0x5C, 0xFF, 0x83, 0x65, 0x26, },
	{ 0x3D, 0xE8, 0x01, 0x67, 0xD2, 0xF0, 0xE9, 0xD3, 0x0F, 0x21, 0x45, 0x14, 0x4A, 0x55, 0x8D, 0x11, 0x74, 0xF5, 0x41, 0x0C, },
};
static key_info iso_315 = {
	0x36,
	{ 0x88, 0x60, 0xD0, 0xCF, 0xF4, 0xD0, 0xDC, 0x68,  0x8D, 0x32, 0x23, 0x32, 0x1B, 0x96, 0xB5, 0x9A,  0x77, 0x7E, 0x69, 0x14, 0x96, 0x14, 0x88, 0xE0,  0x70, 0x48, 0xDA, 0xEC, 0xB0, 0x20, 0xEC, 0xA4, },
	{ 0xC8, 0x2D, 0x01, 0x5D, 0x46, 0xCF, 0x15, 0x2F,  0x1D, 0xD0, 0xC1, 0x6F, 0x18, 0xB5, 0xB1, 0xE5, },
	{ 0x73, 0x39, 0x18, 0xD7, 0xC8, 0x88, 0x13, 0x05,  0x09, 0x34, 0x6E, 0x6B, 0x4A, 0x8B, 0x6C, 0xAA,  0x35, 0x7A, 0xB5, 0x57, 0xE8, 0x14, 0xE8, 0x12,  0x2B, 0xF1, 0x02, 0xC1, 0x4A, 0x31, 0x4B, 0xF9,  0x47, 0x5B, 0x9D, 0x70, 0xEA, 0xF9, 0xEC, 0x29, },
	{0},	//uint8	priv[21];
};

static key_info lv1_331 = {
	0,
	{ 0xB9, 0xF3, 0xF9, 0xE6, 0x10, 0x7C, 0xFF, 0x26,  0x80, 0xA9, 0x1E, 0x11, 0x8C, 0x24, 0x03, 0xCF,  0x4A, 0x6F, 0x18, 0xF3, 0xC7, 0xEF, 0xD7, 0xD1,  0x3D, 0x1A, 0xC4, 0xDB, 0x76, 0x0B, 0xD2, 0x22, },
	{ 0xB4, 0x36, 0x61, 0xB9, 0xA7, 0x9B, 0xAD, 0x9D,  0x8E, 0x2B, 0x04, 0x64, 0x69, 0xCD, 0xA1, 0xE7, },
};
static key_info lv2_331 = {
	0,
	{ 0x94, 0x30, 0x3F, 0x69, 0x51, 0x35, 0x72, 0xAB,  0x5A, 0xE1, 0x7C, 0x8C, 0x2A, 0x18, 0x39, 0xD2,  0xC2, 0x4C, 0x28, 0xF6, 0x53, 0x89, 0xD3, 0xBB,  0xB1, 0x18, 0x94, 0xCE, 0x23, 0xE0, 0x79, 0x8F, },
	{ 0x97, 0x69, 0xBF, 0xD1, 0x87, 0xB9, 0x09, 0x90,  0xAE, 0x5F, 0xEA, 0x4E, 0x11, 0x0B, 0x9C, 0xF5, },
	{ 0xAF, 0xAF, 0x5E, 0x96, 0xAF, 0x39, 0x6C, 0xBB,  0x69, 0x07, 0x10, 0x82, 0xC4, 0x6A, 0x8F, 0x34,  0xA0, 0x30, 0xE8, 0xED, 0xB7, 0x99, 0xE0, 0xA7,  0xBE, 0x00, 0xAA, 0x26, 0x4D, 0xFF, 0x3A, 0xEB,  0xF7, 0x92, 0x39, 0x20, 0xD5, 0x59, 0x40, 0x4D, },
};
static key_info app_331 = {
	0x11,
	{ 0x79, 0x48, 0x18, 0x39, 0xC4, 0x06, 0xA6, 0x32, 0xBD, 0xB4, 0xAC, 0x09, 0x3D, 0x73, 0xD9, 0x9A,  0xE1, 0x58, 0x7F, 0x24, 0xCE, 0x7E, 0x69, 0x19, 0x2C, 0x1C, 0xD0, 0x01, 0x02, 0x74, 0xA8, 0xAB, },
	{ 0x6F, 0x0F, 0x25, 0xE1, 0xC8, 0xC4, 0xB7, 0xAE, 0x70, 0xDF, 0x96, 0x8B, 0x04, 0x52, 0x1D, 0xDA, },
	{ 0x94, 0xD1, 0xB7, 0x37, 0x8B, 0xAF, 0xF5, 0xDF, 0xED, 0x26, 0x92, 0x40, 0xA7, 0xA3, 0x64, 0xED,  0x68, 0x44, 0x67, 0x41, 0x62, 0x2E, 0x50, 0xBC, 0x60, 0x79, 0xB6, 0xE6, 0x06, 0xA2, 0xF8, 0xE0,  0xA4, 0xC5, 0x6E, 0x5C, 0xFF, 0x83, 0x65, 0x26, },
	{ 0x3D, 0xE8, 0x01, 0x67, 0xD2, 0xF0, 0xE9, 0xD3, 0x0F, 0x21, 0x45, 0x14, 0x4A, 0x55, 0x8D, 0x11, 0x74, 0xF5, 0x41, 0x0C, },
};
static key_info iso_331 = {
	0x36,
	{ 0x88, 0x60, 0xD0, 0xCF, 0xF4, 0xD0, 0xDC, 0x68,  0x8D, 0x32, 0x23, 0x32, 0x1B, 0x96, 0xB5, 0x9A,  0x77, 0x7E, 0x69, 0x14, 0x96, 0x14, 0x88, 0xE0,  0x70, 0x48, 0xDA, 0xEC, 0xB0, 0x20, 0xEC, 0xA4, },
	{ 0xC8, 0x2D, 0x01, 0x5D, 0x46, 0xCF, 0x15, 0x2F,  0x1D, 0xD0, 0xC1, 0x6F, 0x18, 0xB5, 0xB1, 0xE5, },
	{ 0x73, 0x39, 0x18, 0xD7, 0xC8, 0x88, 0x13, 0x05,  0x09, 0x34, 0x6E, 0x6B, 0x4A, 0x8B, 0x6C, 0xAA,  0x35, 0x7A, 0xB5, 0x57, 0xE8, 0x14, 0xE8, 0x12,  0x2B, 0xF1, 0x02, 0xC1, 0x4A, 0x31, 0x4B, 0xF9,  0x47, 0x5B, 0x9D, 0x70, 0xEA, 0xF9, 0xEC, 0x29, },
	{0},	//uint8	priv[21];
};

static key_info lv1_341 = {
	0,
	{ 0xB8, 0x80, 0x59, 0x38, 0x56, 0xC8, 0xC6, 0xD2,  0x03, 0x75, 0x85, 0x62, 0x6A, 0x12, 0x97, 0x7F,  0x50, 0xDC, 0xFC, 0xF3, 0xF1, 0x32, 0xD2, 0xC8,  0x9A, 0xA6, 0xE6, 0x70, 0xEA, 0xFC, 0x16, 0x46, },
	{ 0xA7, 0x9B, 0x05, 0xD4, 0xE3, 0x7B, 0x81, 0x17,  0xA9, 0x5E, 0x6E, 0x7C, 0x14, 0xFB, 0x64, 0x0E, },
};
static key_info lv2_341 = {
	0,
	{ 0x57, 0x5B, 0x0A, 0x6C, 0x4B, 0x4F, 0x27, 0x60,  0xA0, 0x3F, 0xE4, 0x18, 0x9E, 0xBA, 0xF4, 0xD9,  0x47, 0x27, 0x9F, 0xD9, 0x82, 0xB1, 0x40, 0x70,  0x34, 0x90, 0x98, 0xB0, 0x8F, 0xF9, 0x2C, 0x10, },
	{ 0x41, 0x1C, 0xB1, 0x8F, 0x46, 0x0C, 0xE5, 0x0C,  0xAF, 0x2C, 0x42, 0x6D, 0x8F, 0x0D, 0x93, 0xC8, },
	{ 0x3F, 0xEE, 0x31, 0x39, 0x54, 0xCB, 0x30, 0x39,  0xC3, 0x21, 0xA7, 0xE3, 0x3B, 0x97, 0xFF, 0xDE,  0xC8, 0x98, 0x8A, 0x8B, 0x55, 0x75, 0x91, 0x61,  0xB0, 0x4D, 0xBF, 0x47, 0x31, 0x28, 0x4E, 0x4A,  0x81, 0x91, 0xE3, 0xF1, 0x7D, 0x32, 0xB0, 0xEA, },
};
static key_info app_341 = {
	0x14,
	{ 0x83, 0x8F, 0x58, 0x60, 0xCF, 0x97, 0xCD, 0xAD, 0x75, 0xB3, 0x99, 0xCA, 0x44, 0xF4, 0xC2, 0x14,  0xCD, 0xF9, 0x51, 0xAC, 0x79, 0x52, 0x98, 0xD7, 0x1D, 0xF3, 0xC3, 0xB7, 0xE9, 0x3A, 0xAE, 0xDA, },
	{ 0x7F, 0xDB, 0xB2, 0xE9, 0x24, 0xD1, 0x82, 0xBB, 0x0D, 0x69, 0x84, 0x4A, 0xDC, 0x4E, 0xCA, 0x5B, },
	{ 0x1F, 0x14, 0x0E, 0x8E, 0xF8, 0x87, 0xDA, 0xB5, 0x2F, 0x07, 0x9A, 0x06, 0xE6, 0x91, 0x5A, 0x64,  0x60, 0xB7, 0x5C, 0xD2, 0x56, 0x83, 0x4A, 0x43, 0xFA, 0x7A, 0xF9, 0x0C, 0x23, 0x06, 0x7A, 0xF4,  0x12, 0xED, 0xAF, 0xE2, 0xC1, 0x77, 0x8D, 0x69, },
	{ 0x74, 0xE9, 0x22, 0xFD, 0xEE, 0x5D, 0xC4, 0xCD, 0xF2, 0x2F, 0xC8, 0xD7, 0x98, 0x64, 0x77, 0xF8, 0x13, 0x40, 0x08, 0x60, },
};
static key_info iso_341 = {
	0,		//?
	{ 0x10, 0x1E, 0x27, 0xF3, 0xFA, 0x2F, 0xB5, 0x3A,  0xCA, 0x92, 0x4F, 0x78, 0x3A, 0xD5, 0x53, 0x16,  0x2D, 0x56, 0xB9, 0x75, 0xD0, 0x5B, 0x81, 0x35,  0x1A, 0x11, 0x11, 0x79, 0x9F, 0x20, 0x25, 0x4D, },
	{ 0x8D, 0x2E, 0x9C, 0x62, 0x97, 0xB8, 0xAD, 0x25,  0x29, 0x98, 0x45, 0x82, 0x96, 0xAC, 0x77, 0x3C, },
	{ 0x13, 0x84, 0x46, 0xEE, 0x0B, 0xDD, 0xA5, 0x63,  0x8F, 0x97, 0x32, 0x8C, 0x89, 0x56, 0xE6, 0x48,  0x9C, 0xBB, 0xFE, 0x57, 0xC5, 0x96, 0x1D, 0x40,  0xDD, 0x5C, 0x43, 0xBB, 0x41, 0x38, 0xF1, 0xC4,  0x00, 0xA8, 0xB2, 0x72, 0x04, 0xA5, 0xD6, 0x25, },
	{0},	//uint8	priv[21];
};

static key_info lv1_350 = {
	0,
	{ 0x1E, 0x8E, 0xEE, 0xA9, 0xE8, 0x0A, 0x72, 0x9F,  0x3F, 0xA5, 0x2C, 0xF5, 0x23, 0xB2, 0x59, 0x41,  0xEA, 0x44, 0xB4, 0x15, 0x5D, 0x94, 0xE5, 0xDA,  0xDC, 0x5C, 0x5A, 0x77, 0x84, 0x76, 0x20, 0xC7, },
	{ 0xE0, 0x34, 0xD3, 0x1A, 0x80, 0x31, 0x69, 0x60,  0x02, 0x4D, 0x1B, 0x3D, 0x31, 0x64, 0xFD, 0xC3, },
};
static key_info lv2_350 = {
	0,
	{ 0x6D, 0xBD, 0x48, 0xD7, 0x87, 0xC5, 0x88, 0x03,  0xA8, 0xD7, 0x24, 0xDA, 0x5A, 0xCF, 0x04, 0xFF,  0x8F, 0xCE, 0x91, 0xD7, 0x54, 0x5D, 0x23, 0x22,  0xF2, 0xB7, 0xAB, 0xF5, 0x70, 0x14, 0xAF, 0x68, },
	{ 0x60, 0x3A, 0x36, 0x21, 0x37, 0x08, 0x52, 0x0E,  0xD5, 0xD7, 0x45, 0xDE, 0xC1, 0x32, 0x5B, 0xA5, },
	{ 0x58, 0x88, 0xCB, 0x83, 0xAC, 0x3C, 0xCA, 0x96,  0x10, 0xBC, 0x17, 0x3C, 0x53, 0x14, 0x1C, 0x0C,  0xA5, 0x8B, 0x93, 0x71, 0x9E, 0x74, 0x46, 0x60,  0xCA, 0x88, 0x23, 0xD5, 0xEA, 0xEE, 0x8F, 0x9B,  0xF7, 0x36, 0x99, 0x70, 0x54, 0xE4, 0xB7, 0xE3, },
};
static key_info app_350 = {
	0x15,
	{ 0x94, 0x5B, 0x99, 0xC0, 0xE6, 0x9C, 0xAF, 0x05, 0x58, 0xC5, 0x88, 0xB9, 0x5F, 0xF4, 0x1B, 0x23,  0x26, 0x60, 0xEC, 0xB0, 0x17, 0x74, 0x1F, 0x32, 0x18, 0xC1, 0x2F, 0x9D, 0xFD, 0xEE, 0xDE, 0x55, },
	{ 0x1D, 0x5E, 0xFB, 0xE7, 0xC5, 0xD3, 0x4A, 0xD6, 0x0F, 0x9F, 0xBC, 0x46, 0xA5, 0x97, 0x7F, 0xCE, },
	{ 0xAB, 0x28, 0x4C, 0xA5, 0x49, 0xB2, 0xDE, 0x9A, 0xA5, 0xC9, 0x03, 0xB7, 0x56, 0x52, 0xF7, 0x8D,  0x19, 0x2F, 0x8F, 0x4A, 0x8F, 0x3C, 0xD9, 0x92, 0x09, 0x41, 0x5C, 0x0A, 0x84, 0xC5, 0xC9, 0xFD,  0x6B, 0xF3, 0x09, 0x5C, 0x1C, 0x18, 0xFF, 0xCD, },
	{ 0x2C, 0xF8, 0x96, 0xD3, 0x5D, 0xB8, 0x71, 0xD0, 0xE6, 0xA2, 0x52, 0xE7, 0x99, 0x87, 0x6A, 0x70, 0xD0, 0x43, 0xC2, 0x3E, },
};
static key_info iso_350 = {
	0x36,
	{ 0x3F, 0x26, 0x04, 0xFA, 0x27, 0xAE, 0xAD, 0xFB,  0xE1, 0xAC, 0x69, 0xEB, 0x00, 0xBB, 0x16, 0xEF,  0x19, 0x6C, 0x21, 0x93, 0xCB, 0xD6, 0x29, 0x00,  0xFF, 0xD8, 0xC2, 0x50, 0x41, 0x68, 0x08, 0x43, },
	{ 0xA4, 0x14, 0xAC, 0x1D, 0xB7, 0x98, 0x7E, 0x43,  0x77, 0x76, 0x51, 0xB3, 0x30, 0xB8, 0x99, 0xE1, },
	{ 0x1F, 0x46, 0x33, 0xAF, 0xDE, 0x18, 0x61, 0x4D,  0x6C, 0xEF, 0x38, 0xA2, 0xFD, 0x6C, 0x4C, 0xCA,  0xC7, 0xB6, 0xEB, 0x81, 0x09, 0xD7, 0x2C, 0xD0,  0x66, 0xEC, 0xEB, 0xA0, 0x19, 0x3E, 0xA3, 0xF4,  0x3C, 0x37, 0xAE, 0x83, 0x17, 0x9A, 0x4E, 0x5F, },
	{0},	//uint8	priv[21];
};

static key_info lv1_355 = {
	0,
	{ 0x53, 0xAB, 0xDF, 0x84, 0xBE, 0x08, 0xB0, 0x35,  0x1B, 0x73, 0x4F, 0x2B, 0x97, 0xD2, 0xBE, 0x16,  0x21, 0xBC, 0x6C, 0x88, 0x9E, 0x43, 0x62, 0xE5,  0xC7, 0x0F, 0x39, 0xD6, 0xC3, 0xED, 0x9F, 0x23, },
	{ 0x44, 0xE6, 0x52, 0x66, 0x1A, 0xC7, 0x58, 0x4D,  0xBE, 0x08, 0xEC, 0xB8, 0x10, 0xFB, 0x5F, 0xC0, },
};
static key_info lv2_355 = {
	0,
	{ 0x84, 0x01, 0x5E, 0x90, 0xFA, 0x23, 0x13, 0x96,  0x28, 0xA3, 0xC7, 0x5C, 0xC0, 0x97, 0x14, 0xE6,  0x42, 0x7B, 0x52, 0x7A, 0x82, 0xD1, 0x8A, 0xBC,  0x3E, 0x91, 0xCD, 0x8D, 0x7D, 0xDA, 0xFF, 0x17, },
	{ 0x5B, 0x24, 0x04, 0x44, 0xD6, 0x45, 0xF2, 0x03,  0x81, 0x18, 0xF9, 0x7F, 0xD5, 0xA1, 0x45, 0xD5, },
	{ 0xB2, 0x66, 0x31, 0x82, 0x45, 0x26, 0x6B, 0x2D,  0x33, 0x64, 0x1C, 0xD8, 0xA8, 0x64, 0x06, 0x6D,  0x07, 0x7F, 0xAC, 0x60, 0xB7, 0xE2, 0x73, 0x99,  0x09, 0x9A, 0x70, 0xA6, 0x83, 0x45, 0x4B, 0x70,  0xF9, 0x88, 0x8E, 0x7C, 0xC0, 0xC2, 0xBF, 0x72, },
};
static key_info app_355 = {
	0x25,
	{ 0x29, 0x80, 0x53, 0x02, 0xE7, 0xC9, 0x2F, 0x20, 0x40, 0x09, 0x16, 0x1C, 0xA9, 0x3F, 0x77, 0x6A,  0x07, 0x21, 0x41, 0xA8, 0xC4, 0x6A, 0x10, 0x8E, 0x57, 0x1C, 0x46, 0xD4, 0x73, 0xA1, 0x76, 0xA3, },
	{ 0x5D, 0x1F, 0xAB, 0x84, 0x41, 0x07, 0x67, 0x6A, 0xBC, 0xDF, 0xC2, 0x5E, 0xAE, 0xBC, 0xB6, 0x33, },
	{ 0x09, 0x30, 0x1B, 0x64, 0x36, 0xC8, 0x5B, 0x53, 0xCB, 0x15, 0x85, 0x30, 0x0A, 0x3F, 0x1A, 0xF9,  0xFB, 0x14, 0xDB, 0x7C, 0x30, 0x08, 0x8C, 0x46, 0x42, 0xAD, 0x66, 0xD5, 0xC1, 0x48, 0xB8, 0x99,  0x5B, 0xB1, 0xA6, 0x98, 0xA8, 0xC7, 0x18, 0x27, },
	{ 0x10, 0x81, 0x8E, 0xD8, 0xA6, 0x66, 0x05, 0x1C, 0x61, 0x98, 0x66, 0x2C, 0x3D, 0x6D, 0xDE, 0x2C, 0xA4, 0x90, 0x1D, 0xDC, },
};
static key_info iso_355 = {
	0,		//?
	{ 0xBD, 0xB7, 0x4A, 0xA6, 0xE3, 0xBA, 0x2D, 0xC1,  0x0B, 0x1B, 0xD7, 0xF1, 0x71, 0x98, 0x39, 0x9A,  0x15, 0x8D, 0xBE, 0x1F, 0xA0, 0xBE, 0xA6, 0x8C,  0x90, 0xFC, 0xAC, 0xBE, 0x4D, 0x04, 0xBE, 0x37, },
	{ 0x02, 0x07, 0xA4, 0x79, 0xB1, 0x57, 0x4F, 0x8E,  0x7F, 0x69, 0x75, 0x28, 0xF0, 0x5D, 0x54, 0x35, },
	{ 0x91, 0x7E, 0x1F, 0x1D, 0xC4, 0x8A, 0x54, 0xEB,  0x5F, 0x10, 0xB3, 0x8E, 0x75, 0x69, 0xBB, 0x53,  0x83, 0x62, 0x8A, 0x7C, 0x90, 0x6F, 0x0D, 0xCA,  0x62, 0xFD, 0xA3, 0x38, 0x05, 0xC1, 0x5F, 0xAB,  0x27, 0x00, 0x16, 0x94, 0x0A, 0x09, 0xDB, 0x58, },
};

static key_info ldr = {
	0x20,
	{ 0xC0, 0xCE, 0xFE, 0x84, 0xC2, 0x27, 0xF7, 0x5B,  0xD0, 0x7A, 0x7E, 0xB8, 0x46, 0x50, 0x9F, 0x93,  0xB2, 0x38, 0xE7, 0x70, 0xDA, 0xCB, 0x9F, 0xF4,  0xA3, 0x88, 0xF8, 0x12, 0x48, 0x2B, 0xE2, 0x1B, },
	{ 0x47, 0xEE, 0x74, 0x54, 0xE4, 0x77, 0x4C, 0xC9,  0xB8, 0x96, 0x0C, 0x7B, 0x59, 0xF4, 0xC1, 0x4D, },
	{ 0xC2, 0xD4, 0xAA, 0xF3, 0x19, 0x35, 0x50, 0x19,  0xAF, 0x99, 0xD4, 0x4E, 0x2B, 0x58, 0xCA, 0x29,  0x25, 0x2C, 0x89, 0x12, 0x3D, 0x11, 0xD6, 0x21,  0x8F, 0x40, 0xB1, 0x38, 0xCA, 0xB2, 0x9B, 0x71,  0x01, 0xF3, 0xAE, 0xB7, 0x2A, 0x97, 0x50, 0x19, },
	{ 0xC5, 0xB2, 0xBF, 0xA1, 0xA4, 0x13, 0xDD, 0x16,  0xF2, 0x6D, 0x31, 0xC0, 0xF2, 0xED, 0x47, 0x20,  0xDC, 0xFB, 0x06, 0x70, },
};

static key_info pkg = {
	0x23,
	{ 0xA9, 0x78, 0x18, 0xBD, 0x19, 0x3A, 0x67, 0xA1,  0x6F, 0xE8, 0x3A, 0x85, 0x5E, 0x1B, 0xE9, 0xFB,  0x56, 0x40, 0x93, 0x8D, 0x4D, 0xBC, 0xB2, 0xCB,  0x52, 0xC5, 0xA2, 0xF8, 0xB0, 0x2B, 0x10, 0x31, },
	{ 0x4A, 0xCE, 0xF0, 0x12, 0x24, 0xFB, 0xEE, 0xDF,  0x82, 0x45, 0xF8, 0xFF, 0x10, 0x21, 0x1E, 0x6E, },
	{ 0x41, 0xDA, 0x1A, 0x8F, 0x74, 0xFF, 0x8D, 0x3F,  0x1C, 0xE2, 0x0E, 0xF3, 0xE9, 0xD8, 0x86, 0x5C,  0x96, 0x01, 0x4F, 0xE3, 0x73, 0xCA, 0x14, 0x3C,  0x9B, 0xAD, 0xED, 0xF2, 0xD9, 0xD3, 0xC7, 0x57,  0x33, 0x07, 0x11, 0x5C, 0xCF, 0xE0, 0x4F, 0x13, },
	{ 0x54, 0x2D, 0x46, 0xE7, 0xB3, 0xDA, 0xAC, 0x8A,  0xEB, 0x81, 0xE5, 0x33, 0x87, 0x3A, 0xAB, 0xD6,  0xD7, 0x4B, 0xB7, 0x10, },
};

static uint8 pup_hmac[]	= {
  0xF4, 0x91, 0xAD, 0x94, 0xC6, 0x81, 0x10, 0x96,  0x91, 0x5F, 0xD5, 0xD2, 0x44, 0x81, 0xAE, 0xDC,  0xED, 0xED, 0xBE, 0x6B, 0xE5, 0x13, 0x72, 0x4D,  0xD8, 0xF7, 0xB6, 0x91, 0xE8, 0x8A, 0x38, 0xF4,
  0xB5, 0x16, 0x2B, 0xFB, 0xEC, 0xBE, 0x3A, 0x62,  0x18, 0x5D, 0xD7, 0xC9, 0x4D, 0xA2, 0x22, 0x5A,  0xDA, 0x3F, 0xBF, 0xCE, 0x55, 0x5B, 0x9E, 0xA9,  0x64, 0x98, 0x29, 0xEB, 0x30, 0xCE, 0x83, 0x66,
};


static key_info *lv1_keys[] = {	&lv1_315,	&lv1_331,	&lv1_341,	&lv1_350,	&lv1_355,};
static key_info *lv2_keys[] = {	&lv2_315,	&lv2_331,	&lv2_341,	&lv2_350,	&lv2_355,};
static key_info *app_keys[] = {	&app_315,	&app_331,	&app_341,	&app_350,	&app_355,};
static key_info *iso_keys[] = {	&iso_315,	&iso_331,	&iso_341,	&iso_350,	&iso_355,};
static key_info *ldr_keys[] = {	&ldr,};
static key_info *pkg_keys[] = {	&pkg,};

static key_array key_arrays[] = {
	lv1_keys,
	lv2_keys,
	app_keys,
	iso_keys,
	ldr_keys,
	pkg_keys,
};

#if 0
//
// crypto
//
void aes256cbc(uint8 *key_info, uint8 *iv_in, uint8 *in, uint64 len, uint8 *out) {
	AES_KEY k;
	uint8 tmp[16];
	uint8 iv[16];

	memcpy(iv, iv_in, 16);
	memset(&k, 0, sizeof k);
	AES_set_decrypt_key(key_info, 256, &k);

	while (len > 0) {
		memcpy(tmp, in, 16);
		AES_decrypt(in, out, &k);

		for (int i = 0; i < 16; i++)
			out[i] ^= iv[i];

		memcpy(iv, tmp, 16);

		out += 16;
		in += 16;
		len -= 16;
	}
}

void aes256cbc_enc(uint8 *key_info, uint8 *iv, uint8 *in, uint64 len, uint8 *out) {
	AES_KEY k;
	uint8 tmp[16];

	memcpy(tmp, iv, 16);
	memset(&k, 0, sizeof k);
	AES_set_encrypt_key(key_info, 256, &k);

	while (len > 0) {
		for (int i = 0; i < 16; i++)
			tmp[i] ^= *in++;

		AES_encrypt(tmp, out, &k);
		memcpy(tmp, out, 16);

		out += 16;
		len -= 16;
	}
}

void aes128ctr(uint8 *key_info, uint8 *iv, uint8 *in, uint64 len, uint8 *out) {
	AES::block	block;
	aes_context	aes;
	aes.setkey_enc(key_info, 128);

	for (int i = 0; i < len; i++) {
		if ((i & 0xf) == 0) {
			block.load(iv);
			aes.encrypt(block);

			// increase nonce
			uint64	tmp = *(uint64be*)(iv + 8) + 1;
			*(uint64be*)(iv + 8, tmp);
			if (tmp == 0)
				*(uint64be*)iv = *(uint64be*)iv + 1;
		}
		*out++ = *in++ ^ ((uint8*)&block)[i & 0x0f];
	}
}

// FIXME: use a non-broken sha1.c *sigh*
static void sha1_fixup(struct SHA1Context *ctx, uint8 *digest) {
	for (int i = 0; i < 5; i++) {
		*digest++ = ctx->Message_Digest[i] >> 24 & 0xff;
		*digest++ = ctx->Message_Digest[i] >> 16 & 0xff;
		*digest++ = ctx->Message_Digest[i] >> 8 & 0xff;
		*digest++ = ctx->Message_Digest[i] & 0xff;
	}
}

void sha1(uint8 *data, uint32 len, uint8 *digest) {
	struct SHA1Context ctx;

	SHA1Reset(&ctx);
	SHA1Input(&ctx, data, len);
	SHA1Result(&ctx);

	sha1_fixup(&ctx, digest);
}

void sha1_hmac(uint8 *key_info, uint8 *data, uint32 len, uint8 *digest) {
	struct SHA1Context ctx;
	uint8	ipad[0x40];
	uint8	tmp[0x40 + 0x14]; // opad + hash(ipad + message)

	SHA1Reset(&ctx);

	for (int i = 0; i < sizeof ipad; i++) {
		tmp[i] = key_info[i] ^ 0x5c; // opad
		ipad[i] = key_info[i] ^ 0x36;
	}

	SHA1Input(&ctx, ipad, sizeof ipad);
	SHA1Input(&ctx, data, len);
	SHA1Result(&ctx);

	sha1_fixup(&ctx, tmp + 0x40);
	sha1(tmp, sizeof tmp, digest);
}

int ecdsa_get_params(uint32 type, uint8 *p, uint8 *a, uint8 *b, uint8 *N, uint8 *Gx, uint8 *Gy) {
	uint8	*tbl = curves + type * 121;

	memcpy_inv(p, tbl + 0, 20);
	memcpy_inv(a, tbl + 20, 20);
	memcpy_inv(b, tbl + 40, 20);
	memcpy_inv(N, tbl + 60, 21);
	memcpy_inv(Gx, tbl + 81, 20);
	memcpy_inv(Gy, tbl + 101, 20);

	return 0;
}

int sce_decrypt_header(uint8 *ptr, key_array &keys) {
	uint32	meta_offset = be32(ptr + 0x0c)
	uint64	header_len  = be64(ptr + 0x10);
	bool	success		= false;
	uint8	tmp[0x40];

	for (int i = 0; i < klist->n; i++) {
		aes256cbc(klist->keys[i].key_info, klist->keys[i].iv, ptr + meta_offset + 0x20, 0x40, tmp);

		success = true;
		for (int j = 0x10; j < (0x10 + 0x10); j++)
			if (tmp[j] != 0)
				success = false;

		for (int j = 0x30; j < (0x30 + 0x10); j++)
			if (tmp[j] != 0)
			     success = false;

		if (success == 1) {
			memcpy(ptr + meta_offset + 0x20, tmp, 0x40);
			break;
		}
	}

	if (success != 1)
		return -1;

	memcpy(tmp, ptr + meta_offset + 0x40, 0x10);
	aes128ctr(ptr + meta_offset + 0x20, tmp, ptr + meta_offset + 0x60, 0x20, ptr + meta_offset + 0x60);
	uint32 meta_len = header_len - meta_offset;
	aes128ctr(ptr + meta_offset + 0x20, tmp, ptr + meta_offset + 0x80, meta_len - 0x80, ptr + meta_offset + 0x80);
	return i;
}

int sce_encrypt_header(uint8 *ptr, struct key_info *k) {
	uint32	meta_offset	= be32(ptr + 0x0c);
	uint64	header_len	= be64(ptr + 0x10);
	uint32	meta_len	= header_len - meta_offset;
	uint8	iv[16];

	memcpy(iv, ptr + meta_offset + 0x40, 0x10);
	aes128ctr(ptr + meta_offset + 0x20, iv, ptr + meta_offset + 0x60, meta_len - 0x60, ptr + meta_offset + 0x60);
	aes256cbc_enc(k->key_info, k->iv, ptr + meta_offset + 0x20, 0x40, ptr + meta_offset + 0x20);
	return 0;
}

int sce_decrypt_data(uint8 *ptr) {
	uint64	meta_offset	= be32(ptr + 0x0c);
	uint64	header_len	= be64(ptr + 0x10);
	uint32	meta_len	= header_len - meta_offset;
	uint32	meta_n_hdr	= be32(ptr + meta_offset + 0x60 + 0xc);
	uint8	iv[16];

	for (int i = 0; i < meta_n_hdr; i++) {
		uint8	*tmp	= ptr + meta_offset + 0x80 + 0x30*i;
		uint64	offset	= be64(tmp);
		uint64	size	= be64(tmp + 8);
		uint32	keyid	= be32(tmp + 0x24);
		uint32	ivid	= be32(tmp + 0x28);

		if (keyid == 0xffffffff || ivid == 0xffffffff)
			continue;

		memcpy(iv, ptr + meta_offset + 0x80 + 0x30 * meta_n_hdr + ivid * 0x10, 0x10);
		aes128ctr(ptr + meta_offset + 0x80 + 0x30 * meta_n_hdr + keyid * 0x10, iv, ptr + offset, size, ptr + offset);
	}

	return 0;
}

int sce_encrypt_data(uint8 *ptr) {
	return sce_decrypt_data(ptr);
}
#endif

#if 0
struct PS3_METADATA {
	sha1_state	checksum0;	// sha1 checksum of the entire self file.
	sha1_state	checksum1;	// inverse of checksum0
	sha1_state	checksum2;	// checksum0 XORed with 0xAAAAAA..AAAAAB
};
#else
struct PS3_METADATA {
	//decrypted using AES128CTR
	//section data is decrypted using AES128CTR with the key and ivec from the metadata keys specified by keyIndex and ivecIndex (and uncompressed using zlib)
	struct	SECTION {
		uint64	dataOffset;
		uint64	dataSize;
		uint32	unknown02;
		uint32	programIndex;
		uint32	unknown04;
		uint32	sha1Index;
		uint32	encrypted;  //1:NO, 3:YES
		uint32	keyIndex;
		uint32	ivecIndex;
		uint32	compressed; //1:NO, 2:YES
	};
	//decrypted using AES128CTR
	struct KEY {
		uint8	hash[20];
		uint8	unused[12];
		uint8	sha1_key[64];	//HMAC-SHA1 calculated on the decrypted data and before the decompression.
	};
	//decrypted using AES128CTR
	struct SIGNATURE_INFO {
		uint32	unknown00;
		uint32	signatureSize;
		uint64	unknown02;
		uint64	unknown03;
		uint64	unknown04;
		uint64	unknown05;
		uint32	unknown06;
		uint32	unknown07;
	};
	//decrypted using AES128CTR
	struct SIGNATURE {
		uint8	r[21];
		uint8	s[21];
		uint8	padding[6];
	};
	//decrypted using AES128CTR with key and ivec
	struct	HEADER {
		uint64	signatureInputLength;	//number of bytes which are used to generate the SHA-1
		uint32	unknown02;
		uint32	num_sections;
		uint32	num_keys;
		uint32	signatureInfoSize;
		uint32	unknown06;
		uint32	unknown07;
		SECTION	*Sections()	{ return (SECTION*)(this + 1); }
		KEY		*Keys()		{ return (KEY*)(Sections() + num_sections); }
	};

	uint8	unknown00[32];
	uint8	key[32];		// encrypted using AES256CBC
	uint8	ivec[32];		// encrypted using AES256CBC
	HEADER	header;			//
};
#endif

struct PS3_HEADER : bigendian_types {
	enum {
		MAGIC = 0x53434500
	};
	enum SDK_TYPE {
		RETAIL0	= 0,
		RETAIL	= 1,
		RETAIL1	= 2,
		REQ_342	= 4,
		REQ_350	= 7,
		DEVKIT	= 0x8000,
	};
	enum HEADER_TYPE {
		SELF	= 1,
		RVK		= 2,	//revoke list?
		PKG		= 3,
		SPP		= 4,
	};

	uint32	magic;			// 0x00 must be MAGIC
	uint32	version;		// 0x04	must be 2
	uint16	sdk_type;		// 0x08
	uint16	header_type;	// 0x0a
	uint32	meta_offset;	// 0x0c	offset to the checksums. Must be at least 20 bytes before the end of the header.
	uint64	header_len;		// 0x10 including the fake elf headers (must be less that 8KB)
	uint64	content_len;	// 0x18 size of the encrypted part of the self file

	PS3_METADATA	*MetaData()	{ return (PS3_METADATA*)((uint8*)this + meta_offset); }
};

//-----------------------------------------------------------------------------
//	PKG
//-----------------------------------------------------------------------------

struct PKG_HEADER : bigendian_types {
	enum {MAGIC =	0x7f504b47};
	enum {PS3 = 1, PSP = 2, RETAIL = 0x80000000};

	uint32	magic;
	uint32	pkg_type;
	uint32	pkg_info_offset;
	uint32	pkg_info_size;
	uint32	header_size;
	uint32	item_count;
	uint64	total_size;
	uint64	data_offset;
	uint64	data_size;
	char	contentid[0x30];
	uint8	digest[0x10];
	uint8	k_licensee[0x10];
};

struct PKG_FILE_HEADER : bigendian_types {
	uint32	filename_offset;
	uint32	filename_size;
	uint64	data_offset;
	uint64	data_size;
	uint32	flags;
	uint32	padding;	//0
};

class PS3PKGFileHandler : public FileHandler {
	const char*		GetExt() override { return "pkg"; }
	ISO_ptr<void>	Read(tag id, istream_ref file) override;
} ps3pkg;

ISO_ptr<void> PS3PKGFileHandler::Read(tag id, istream_ref file) {
	return ISO_NULL;
}

//-----------------------------------------------------------------------------
//	SELF
//-----------------------------------------------------------------------------

struct SELF_HEADER : PS3_HEADER {
	uint64	unknown3;		// 0x20	must be 3
	uint64	info_offset;	// 0x28 => SELF_INFO
	uint64	elf_offset;		// 0x30	=> ELF HEADER
	uint64	phdr_offset;	// 0x38
	uint64	shdr_offset;	// 0x40
	uint64	seg_offset;		// 0x48 => SELF_SEGMENT
	uint64	ver_offset;		// 0x50
	uint64	ctrl_offset;	// 0x58 => SELF_DIGEST
	uint64	ctrl_size;		// 0x60
};

struct SELF_INFO : bigendian_types {
	enum TYPE {
		LEVEL0			= 1,
		LEVEL1			= 2,
		LEVEL2 			= 3,
		APP 			= 4,
		SPU_MODULE 		= 5,
		SECURE_LOADER 	= 6,
		NPDRM_APP		= 8,
	};
	uint64	author_id;	// 0x00
	uint32	vendor_id;	// 0x08
	uint32	app_type;	// 0x0c
//	uint64	version;	// 0x10
	uint16	version[4];	// 0x10
	uint64	unknown2;	// 0x18
};
struct SELF_CONTROL : bigendian_types {
	enum TYPE {
		FLAGS	= 1,	// len: 0x30
		DIGEST	= 2,	// len: 0x40 or 0x30
		NPDRM	= 3,	// len: 0x90
	};
	uint32	type;
	uint32	length;
	uint32	unknown02;
	uint32	unknown03;
};

struct SELF_CONTROL_FLAGS : SELF_CONTROL {
	uint8	flags[32];
};
struct SELF_CONTROL_DIGEST : SELF_CONTROL {
	uint32	unknown;
	uint8	digest0[20];
	uint8	digest1[20];	//opt
};
struct SELF_CONTROL_NPDRM : SELF_CONTROL {
	uint32	magic;
	uint32	unknown[3];
	char	content_id[0x30];
	uint8	digest[16];
	uint8	inv_digest[16];
	uint8	xor_digest[16];
};
/*
struct SELF_DIGEST {
	uint32	unknown00;
	uint32	unknown01;
	uint32	unknown02;
	uint32	unknown03;
	uint32	controlFlags[8];
	uint32	unknown05;
	uint32	unknown06;
	uint32	unknown07;
	uint32	unknown08;
	char	digest[64];
	uint32	unknown10;
	uint32	unknown11;
};
*/
struct SELF_SEGMENT : bigendian_types {
	enum COMPRESSED { UNCOMP = 1, COMP = 2 };
	enum ENCRYPTED { NA = 0, ENC = 1, UNENC = 2 };
	uint64	offset;		// 0x00
	uint64	size;		// 0x08
	uint32	compressed;	// 0x10 1:NO, 2:YES
	uint32	unknown1;	// 0x14 Always 0, as far as I know.
	uint32	unknown2;	// 0x18 Always 0, as far as I know.
	uint32	encrypted;	// 0x1c 0:NA, 1:YES, 2:NO
};

class PS3_SELFFileHandler : public FileHandler {
	const char*		GetExt() override { return "self"; }
	ISO_ptr<void>	Read(tag id, istream_ref file) override;
} ps3_self;

ISO_ptr<void> PS3_SELFFileHandler::Read(tag id, istream_ref file) {
	SELF_HEADER	self = file.get();
	if (self.magic != SELF_HEADER::MAGIC)
		return ISO_NULL;

	file.seek(self.elf_offset);
	Elf_Ehdr<true, 64>	elf	= file.get();

	uint32			nseg	= elf.e_phnum;
	SELF_SEGMENT	*segs	= new SELF_SEGMENT[nseg];
	file.seek(self.seg_offset);
	file.readbuff(segs, nseg * sizeof(SELF_SEGMENT));

	PS3_METADATA	*meta	= self.MetaData();


	if (self.sdk_type != PS3_HEADER::DEVKIT) {
		key_array		&keys	= key_arrays[self.header_type - 1];
		PS3_METADATA	*meta	= self.MetaData();
		bool			success = false;

		for (int i = 0; i < keys.n; i++) {
			uint8		temp[64];
			AES_decrypt	aes(keys[i].key);
			CBC<16>(keys[i].iv).decrypt(aes, meta->key, temp, 0x40);

			success = true;
			for (int j = 0; success && j < 16; j++)
				success = success && temp[j + 16] == 0 && temp[j + 48] == 0;
			if (success) {
				memcpy(meta->key, temp, 64);
				break;
			}
		}

		AES_decrypt	aes(meta->key);
		AES::block	iv	= force_cast<AES::block>(meta->ivec);
		CFB<16>::decrypt(aes, (const uint8*)&meta->header, (uint8*)&meta->header, sizeof(meta->header), iv.begin());
		uint32		meta_len = self.header_len - self.meta_offset;
		CFB<16>::decrypt(aes, (const uint8*)(&meta->header + 1), (uint8*)(&meta->header + 1), meta_len - 0x80, iv.begin());
	}
	return ISO_NULL;
}

//-----------------------------------------------------------------------------
//	EID
//-----------------------------------------------------------------------------



// Get the number of bits from keysize.
#define KEY_BITS(ks) (ks * 8)

// Isolation root key_info size.
#define ISO_ROOT_KEY_SIZE 0x20
// Isolation root iv size.
#define ISO_ROOT_IV_SIZE 0x10

// Individuals size.
#define INDIV_SIZE 0x100
// Individuals chunk size.
#define INDIV_CHUNK_SIZE 0x40

// Individuals seed key_info size.
#define INDIV_SEED_SIZE 0x40

// EID0 keyseed size.
#define EID0_KEYSEED_SIZE 0x10

// EID3 keyseed size.
#define EID3_KEYSEED_SIZE 0x10

// EID3 static key_info size.
#define EID3_STATIC_KEY_SIZE 0x10

// EID2 DES key_info size.
#define EID2_DES_KEY_SIZE 0x08
// EID2 DES iv size.
#define EID2_DES_IV_SIZE 0x08

uint8 *eid_root_key = {0};

// Syscon key_info seed.
uint8 syscon_key_seed[INDIV_SIZE] = {
	0x63, 0xDC, 0xA7, 0xD3, 0xFE, 0xE4, 0x7F, 0x74, 0x9A, 0x40, 0x83, 0x63, 0xF1, 0x10, 0x4E, 0x8F,
	0x4D, 0x10, 0x09, 0x43, 0x24, 0x00, 0x9C, 0xC8, 0xE6, 0xB6, 0x9C, 0x70, 0x32, 0x8E, 0x34, 0xC5,
	0xD9, 0x79, 0x49, 0xBA, 0xD8, 0xDA, 0x69, 0xD0, 0xE0, 0x1B, 0xF3, 0x15, 0x23, 0x73, 0x28, 0x32,
	0xC9, 0xD1, 0xDD, 0x3C, 0xE2, 0x7E, 0x35, 0x66, 0x97, 0xE2, 0x6C, 0x12, 0xA7, 0xB3, 0x16, 0xA8,
	0x72, 0xFF, 0x4C, 0x7F, 0xD2, 0xA5, 0x90, 0x8D, 0x6C, 0x9C, 0x3F, 0xD3, 0xC0, 0x37, 0xFE, 0xEB,
	0xFA, 0x8D, 0x08, 0x3C, 0x05, 0x20, 0x80, 0xD4, 0xA1, 0x94, 0x53, 0x45, 0x2E, 0x17, 0x9A, 0x44,
	0x35, 0xF8, 0x42, 0x12, 0x95, 0xCB, 0xF4, 0x84, 0xE0, 0x6A, 0x17, 0xFA, 0x2F, 0xB9, 0x86, 0x86,
	0xC2, 0xF3, 0x68, 0x5E, 0x7E, 0xF4, 0x97, 0x68, 0x33, 0x7B, 0x79, 0xFD, 0xBC, 0x82, 0x65, 0xBE,
	0xC6, 0xE1, 0x93, 0x31, 0xFC, 0x6D, 0x75, 0xD1, 0xC2, 0x80, 0x09, 0x13, 0xD1, 0x79, 0x3C, 0x7E,
	0x77, 0x1A, 0x75, 0x5F, 0x40, 0x2D, 0x51, 0x96, 0xD0, 0x2A, 0x0D, 0x09, 0x2B, 0xEF, 0xE0, 0x1E,
	0xB1, 0x17, 0x01, 0x62, 0x9E, 0xD2, 0xFA, 0x91, 0x8F, 0x9F, 0x4D, 0x8B, 0x78, 0xD7, 0x2D, 0x74,
	0x19, 0x93, 0x0D, 0xE0, 0xB6, 0xFD, 0xCF, 0xFC, 0x7B, 0xA6, 0x30, 0xB8, 0x2D, 0x53, 0x04, 0x31,
	0x44, 0x20, 0xED, 0x72, 0x2F, 0xEA, 0x35, 0x02, 0x19, 0x55, 0xAB, 0x40, 0xC7, 0x8E, 0xE6, 0xDF,
	0x3E, 0x67, 0xC2, 0xD9, 0x43, 0x2E, 0x15, 0xD0, 0x9B, 0xEF, 0x0E, 0x6C, 0x64, 0x92, 0x45, 0x5D,
	0x5F, 0xA6, 0xAF, 0x2B, 0xB0, 0x7F, 0x72, 0xE2, 0xAB, 0xF8, 0x0B, 0x4E, 0xF6, 0xDA, 0x98, 0xE0,
	0x8C, 0xB7, 0x82, 0xE5, 0x3E, 0x8A, 0xEB, 0x8A, 0x76, 0x8D, 0x36, 0x65, 0x98, 0x28, 0x1B, 0x9B,
};

// Common individuals seed.
uint8 common_indiv_seed[INDIV_SEED_SIZE] = {
	0x59, 0x30, 0x21, 0x45, 0xAC, 0x09, 0xB1, 0xEF, 0xE6, 0x9E, 0x9B, 0x7A, 0x25, 0xFF, 0x8F, 0x86,
	0xE9, 0xF6, 0x81, 0x4D, 0x37, 0xDE, 0x20, 0x4D, 0x29, 0x72, 0x9B, 0x84, 0x16, 0xBA, 0xED, 0xE4,
	0x22, 0x70, 0x98, 0x65, 0x7F, 0x29, 0x8C, 0xDB, 0x6A, 0x9B, 0x5E, 0x59, 0xE4, 0xA4, 0xBA, 0x2F,
	0x8E, 0x6A, 0x74, 0x0E, 0x1F, 0xC1, 0xE3, 0xE9, 0x35, 0xDD, 0xD2, 0xF6, 0x6C, 0xDE, 0xDD, 0x6B
};

// EID0 individuals seed.
uint8 eid0_indiv_seed[INDIV_SEED_SIZE] = {
	0xAB, 0xCA, 0xAD, 0x17, 0x71, 0xEF, 0xAB, 0xFC, 0x2B, 0x92, 0x12, 0x76, 0xFA, 0xC2, 0x13, 0x0C,
	0x37, 0xA6, 0xBE, 0x3F, 0xEF, 0x82, 0xC7, 0x9F, 0x3B, 0xA5, 0x73, 0x3F, 0xC3, 0x5A, 0x69, 0x0B,
	0x08, 0xB3, 0x58, 0xF9, 0x70, 0xFA, 0x16, 0xA3, 0xD2, 0xFF, 0xE2, 0x29, 0x9E, 0x84, 0x1E, 0xE4,
	0xD3, 0xDB, 0x0E, 0x0C, 0x9B, 0xAE, 0xB5, 0x1B, 0xC7, 0xDF, 0xF1, 0x04, 0x67, 0x47, 0x2F, 0x85
};

// EID1 individuals seed.
uint8 eid1_indiv_seed[INDIV_SEED_SIZE] = {
	0xB0, 0xD6, 0x55, 0x76, 0x4C, 0x3B, 0x44, 0xB3, 0x38, 0xF3, 0x2D, 0xD1, 0xD0, 0x99, 0x9B, 0x66,
	0x48, 0xA3, 0x5A, 0x2C, 0xEB, 0x15, 0xE2, 0x8E, 0xEC, 0xDC, 0x2D, 0xC0, 0xB4, 0xC7, 0xEB, 0x05,
	0xDC, 0x82, 0x25, 0xC0, 0xD5, 0x78, 0x9D, 0xBB, 0x2E, 0x89, 0xA2, 0x4A, 0x78, 0x58, 0x58, 0x00,
	0x72, 0x36, 0x38, 0x34, 0xEE, 0x1A, 0x11, 0x6C, 0x2C, 0xD2, 0x5E, 0x58, 0xEE, 0x67, 0x63, 0xF7
};

// EID2 individuals seed.
uint8 eid2_indiv_seed[INDIV_SEED_SIZE] = {
	0x74, 0x92, 0xE5, 0x7C, 0x2C, 0x7C, 0x63, 0xF4, 0x49, 0x42, 0x26, 0x8F, 0xB4, 0x1C, 0x58, 0xED,
	0x66, 0x83, 0x41, 0xF9, 0xC9, 0x7B, 0x29, 0x83, 0x96, 0xFA, 0x9D, 0x82, 0x07, 0x51, 0x99, 0xD8,
	0xBC, 0x1A, 0x93, 0x4B, 0x37, 0x4F, 0xA3, 0x8D, 0x46, 0xAF, 0x94, 0xC7, 0xC3, 0x33, 0x73, 0xB3,
	0x09, 0x57, 0x20, 0x84, 0xFE, 0x2D, 0xE3, 0x44, 0x57, 0xE0, 0xF8, 0x52, 0x7A, 0x34, 0x75, 0x3D
};

// EID3 individuals seed.
uint8 eid3_indiv_seed[INDIV_SEED_SIZE] = {
	0x01, 0xD0, 0x49, 0x6A, 0x3B, 0xAD, 0xD1, 0x73, 0x55, 0x70, 0xCB, 0x29, 0xE1, 0x6F, 0xA2, 0x31,
	0x4F, 0xA9, 0xFD, 0x1A, 0xBA, 0x19, 0xA1, 0xC6, 0x9E, 0xEA, 0x2F, 0x4A, 0xA6, 0x07, 0xA7, 0x1C,
	0x6F, 0xE2, 0x3E, 0xF8, 0xDF, 0xBB, 0x0F, 0x2D, 0x9D, 0x45, 0x2C, 0xD5, 0xFA, 0xD5, 0x8B, 0x74,
	0x5B, 0xF8, 0xA4, 0xA5, 0x0D, 0x8B, 0xDB, 0x29, 0xB2, 0xF4, 0xBF, 0x14, 0xC4, 0x4A, 0xDD, 0x76
};

// EID4 individuals seed.
uint8 eid4_indiv_seed[INDIV_SEED_SIZE] = {
	0x3E, 0xC2, 0x0C, 0x17, 0x02, 0x19, 0x01, 0x97, 0x8A, 0x29, 0x71, 0x79, 0x38, 0x29, 0xD3, 0x08,
	0x04, 0x29, 0xFA, 0x84, 0xE3, 0x3E, 0x7F, 0x73, 0x0C, 0x1D, 0x41, 0x6E, 0xEA, 0x25, 0xCA, 0xFB,
	0x3D, 0xE0, 0x2B, 0xC0, 0x05, 0xEA, 0x49, 0x0B, 0x03, 0xE9, 0x91, 0x98, 0xF8, 0x3F, 0x10, 0x1F,
	0x1B, 0xA3, 0x4B, 0x50, 0x58, 0x94, 0x28, 0xAD, 0xD2, 0xB3, 0xEB, 0x3F, 0xF4, 0xC3, 0x1A, 0x58
};

// EID0 keyseed version 1.
uint8 eid0_keyseed_0[EID0_KEYSEED_SIZE] = {
	0x2E, 0xD7, 0xCE, 0x8D, 0x1D, 0x55, 0x45, 0x45, 0x85, 0xBF, 0x6A, 0x32, 0x81, 0xCD, 0x03, 0xAF
};

// EID0 keyseed version 6.
uint8 eid0_keyseed_6[EID0_KEYSEED_SIZE] = {
	0x3A, 0xB0, 0xE6, 0xC4, 0xAC, 0xFF, 0xB6, 0x29, 0x36, 0x2F, 0xFB, 0xBB, 0xDB, 0xC8, 0x54, 0xBC
};

// EID0 keyseed version A.
uint8 eid0_keyseed_A[EID0_KEYSEED_SIZE] = {
	0x30, 0xB0, 0x39, 0x5D, 0xC5, 0x83, 0x5A, 0xAA, 0x3A, 0x79, 0x86, 0xB4, 0x4A, 0xFA, 0xE6, 0x84
};

// EID3 keyseed.
uint8 eid3_keyseed[EID3_KEYSEED_SIZE] = {
	0x5F, 0xFF, 0x3F, 0xD8, 0x1E, 0x18, 0xB9, 0x56, 0xDA, 0xE4, 0xE6, 0xD3, 0x36, 0x82, 0x97, 0xEF
};

// EID3 static key_info.
uint8 eid3_static_key[EID3_STATIC_KEY_SIZE] = {
	0xD9, 0x94, 0x06, 0xCA, 0x4B, 0xF3, 0x07, 0x50, 0x43, 0x6A, 0x45, 0x47, 0x36, 0x83, 0x45, 0x89
};

// EID2 DES key_info.
uint8 eid2_des_key[EID2_DES_KEY_SIZE] = {
	0x6C, 0xCA, 0xB3, 0x54, 0x05, 0xFA, 0x56, 0x2C
};

// EID2 DES iv.
uint8 eid2_des_iv[EID2_DES_IV_SIZE] = {
	0x98, 0x9A, 0x95, 0x5E, 0xFD, 0xE7, 0xA7, 0x48
};

// Sizes.
// Size of EID0 section 0.
#define EID0_SECTION_0_SIZE 0xC0
// Size of EID0 section A.
#define EID0_SECTION_A_SIZE 0xC0
// Size of EID3.
#define EID3_SIZE 0x100
// Size of EID4.
#define EID4_SIZE 0x30

// EID2 block types.
// EID2 P block.
#define EID2_BLOCKTYPE_P 1
// EID2 S block.
#define EID2_BLOCKTYPE_S 2

// EID header
struct eid_header {
	uint32be	entcnt;	// Entry count.
	uint32be	size;		// EID size.
	uint64be	unk0;		// Unknown 0.
};

// EID entry
struct eid_entry {
	uint32be	offset;	// Entry offset.
	uint32be	size;	// Size.
	uint64be	entnum;	// Entry number.
};

// EID0/EID5 section.
struct eid05_section {
	uint8		data[0x60];
	uint8		common[0x30];
	uint8		unk[0x18];
	uint8		omac[0x10];
	uint8		pad[0x08];
};

// EID2 header.
struct eid2_header {
	uint16be	p_len;	// P block length.
	uint16be	s_len;	// S block length.
	uint8		padding[28];	// Padding.
};

#if 0
// brief Unpack EID file.
// param file EID filename.
void eid_unpack(char *file) {
	uint32 length;
	if (uint8 *eid = _read_buffer(file, &length)) {
		eid_header	*h = (eid_header*)eid;
		eid_entry	*e = (eid_entry*)(eid + sizeof(eid_header));
		for (int i = 0; i < h->entcnt; i++, e++) {
			char fname[128];
			sprintf(fname, "%s%d", file, (uint32)e->entnum);
			printf("writing entry @ offset 0x%08x (0x%08x bytes) to %s\n", e->offset, e->size, fname);
			_write_buffer(fname, eid + e->offset, e->size);
		}
		free(eid);
	} else {
		printf("error: could not read %s\n", file);
	}
}


// brief Get EID entry.
// param file EID filename.
// param entnum EID entry number.
uint8 *eid_get_entry(char *file, uint64 entnum) {
	uint8 *res = 0;
	uint32 length;
	if (uint8 *eid = _read_buffer(file, &length)) {
		eid_header	*h = (eid_header*)eid;
		eid_entry	*e = (eid_entry*)(eid + sizeof(eid_header));
		for (int i = 0; i < h->entcnt; i++, e++) {
			if (e->entnum == entnum) {
				res = (uint8*)malloc(e->size);
				memcpy(res, eid + e->offset, e->size);
				break;
			}
		}
		free(eid);
	} else {
		printf("error: could not read %s\n", file);
	}
	return res;
}

// brief Decrypt section 0 of EID0.
// param eid0_in Input EID0.
// param section_out Output section.
void eid0_decrypt_section_0(uint8 *eid0_in, uint8 *section_out) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid0_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	aes_setkey_enc(&aes_ctxt, indiv + INDIV_EID0_SEC_0_GENKEY_OFFSET, 0x100);
	aes_crypt_ecb(&aes_ctxt, AES_ENCRYPT, eid0_keyseed_0, key_info);

	//Decrypt section 0 of eid0.
	aes_setkey_dec(&aes_ctxt, key_info, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0xC0, indiv + INDIV_EID0_SEC_0_IV_OFFSET, eid0_in + 0x20, section_out);

	//Calculate aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, section_out, 0xA8, key_info, 0x80);

	if (memcmp(digest, section_out + 0xA8, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid0 section 0 hash check failed!\n");
}

void eid0_decrypt_section_6(uint8 *eid0_in, uint8 *section_out) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid0_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	aes_setkey_enc(&aes_ctxt, indiv + INDIV_EID0_SEC_0_GENKEY_OFFSET, 0x100);
	aes_crypt_ecb(&aes_ctxt, AES_ENCRYPT, eid0_keyseed_6, key_info);

	//Decrypt section 6 of eid0.
	aes_setkey_dec(&aes_ctxt, key_info, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0xC0, indiv + INDIV_EID0_SEC_A_IV_OFFSET, eid0_in + 0x20 + 0xC0*0x6, section_out);

	//Calculate aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, section_out, 0xA8, key_info, 0x80);

	if (memcmp(digest, section_out + 0xA8, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid0 section 6 hash check failed!\n");
}

// brief Decrypt section A of EID0.
// param eid0_in Input EID0.
// param section_out Output section.
void eid0_decrypt_section_A(uint8 *eid0_in, uint8 *section_out) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid0_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	aes_setkey_enc(&aes_ctxt, indiv + INDIV_EID0_SEC_A_GENKEY_OFFSET, 0x100);
	aes_crypt_ecb(&aes_ctxt, AES_ENCRYPT, eid0_keyseed_A, key_info);

	//Decrypt section A of eid0.
	aes_setkey_dec(&aes_ctxt, key_info, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0xC0, indiv + INDIV_EID0_SEC_A_IV_OFFSET, eid0_in + 0x20 + 0xC0*0x0A, section_out);

	//Calculate aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, section_out, 0xA8, key_info, 0x80);

	if (memcmp(digest, section_out + 0xA8, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid0 section A hash check failed!\n");
}

// brief Hash and encrypt section 0 of EID0.
// param section_in Input section.
// param section_out Output section.

void eid0_hash_encrypt_section_0(uint8 *section_in, uint8 *section_out) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid0_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	aes_setkey_enc(&aes_ctxt, indiv + INDIV_EID0_SEC_0_GENKEY_OFFSET, 0x100);
	aes_crypt_ecb(&aes_ctxt, AES_ENCRYPT, eid0_keyseed_0, key_info);

	//Calculate aes omac1.
	aes_omac1(section_in + 0xA8, section_in, 0xA8, key_info, 0x80);

	//Encrypt section 0 of eid0.
	aes_setkey_enc(&aes_ctxt, key_info, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0xC0, indiv + INDIV_EID0_SEC_0_IV_OFFSET, section_in, section_out);
}

// brief Hash and encrypt section 0 of EID0.
// param section_in Input section.
// param section_out Output section.
void eid0_hash_encrypt_section_A(uint8 *section_in, uint8 *section_out) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid0_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	aes_setkey_enc(&aes_ctxt, indiv + INDIV_EID0_SEC_A_GENKEY_OFFSET, 0x100);
	aes_crypt_ecb(&aes_ctxt, AES_ENCRYPT, eid0_keyseed_A, key_info);

	//Calculate aes omac1.
	aes_omac1(section_in + 0xA8, section_in, 0xA8, key_info, 0x80);

	//Encrypt section A of eid0.
	aes_setkey_enc(&aes_ctxt, key_info, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0xC0, indiv + INDIV_EID0_SEC_A_IV_OFFSET, section_in, section_out);
}

// brief Decrypt EID0.
// param file_in Input EID0.
// param file_out Prefix for decrypted EID0 sections.
void eid0_decrypt(char *file_in, char *file_out) {
	uint32 length;
	if (uint8 *eid0 = _read_buffer(file_in, &length)) {
		uint8 section_0[EID0_SECTION_0_SIZE];
		eid0_decrypt_section_0(eid0, section_0);

		uint8 section_6[EID0_SECTION_0_SIZE];
		eid0_decrypt_section_6(eid0, section_6);

		uint8 section_A[EID0_SECTION_0_SIZE];
		eid0_decrypt_section_A(eid0, section_A);

		char fname_0[128];
		sprintf(fname_0, "%s.section_0.bin", file_out);
		_write_buffer(fname_0, section_0, 0xC0);

		char fname_6[128];
		sprintf(fname_6, "%s.section_6.bin", file_out);
		_write_buffer(fname_6, section_6, 0xC0);

		char fname_A[128];
		sprintf(fname_A, "%s.section_A.bin", file_out);
		_write_buffer(fname_A, section_A, 0xC0);

		free(eid0);
	}
}

// brief Decrypt EID0.
// param file_in Input EID0.
// param file_out Prefix for decrypted EID0 sections.
void eid0_encrypt_section_A(char *file_in, char *file_out) {
	char fname_A_in[128];
	sprintf(fname_A_in, "%s.section_A", file_in);

	uint32 length;
	if (uint8 *section_A_decrypted = _read_buffer(fname_A_in, &length)) {
		uint8 section_A[EID0_SECTION_A_SIZE];
		eid0_hash_encrypt_section_A(section_A_decrypted, section_A);

		char fname_A[128];
		sprintf(fname_A, "%s.section_A", file_out);
		_write_buffer(fname_A, section_A, 0xC0);

		free(section_A_decrypted);
	}
}

// brief List infos on EID0.
// param file_in Input EID0.
void eid0_list_infos(char *file_in) {
	uint32 length;
	eid05_section *sptr;
	if (uint8 *eid0 = _read_buffer(file_in, &length)) {
		printf("EID0:\n");

		uint8 section_0[EID0_SECTION_0_SIZE];
		eid0_decrypt_section_0(eid0, section_0);
		_hexdump(stdout, "Section 0:", 0, section_0, EID0_SECTION_0_SIZE, TRUE);
		sptr = (eid05_section *)section_0;
		_hexdump(stdout, " Data:	", 0, sptr->data, 0x60, FALSE);
		_hexdump(stdout, " Common:	", 0, sptr->common, 0x30, FALSE);
		_hexdump(stdout, " Unk:	", 0, sptr->unk, 0x18, FALSE);
		_hexdump(stdout, " OMAC:	", 0, sptr->omac, 0x10, FALSE);
		_hexdump(stdout, " Pad:	", 0, sptr->pad, 0x08, FALSE);

		uint8 section_A[EID0_SECTION_A_SIZE];
		eid0_decrypt_section_A(eid0, section_A);
		_hexdump(stdout, "Section A:", 0, section_A, EID0_SECTION_A_SIZE, TRUE);
		sptr = (eid05_section *)section_A;
		_hexdump(stdout, " Data:	", 0, sptr->data, 0x60, FALSE);
		_hexdump(stdout, " Common:	", 0, sptr->common, 0x30, FALSE);
		_hexdump(stdout, " Unk:	", 0, sptr->unk, 0x18, FALSE);
		_hexdump(stdout, " OMAC:	", 0, sptr->omac, 0x10, FALSE);
		_hexdump(stdout, " Pad:	", 0, sptr->pad, 0x08, FALSE);

		free(eid0);
	}
}

// brief Decrypt EID1 buffer.
// param eid1 Input/Output EID1.
void eid1_decrypt_buffer(uint8 *eid1) {
	uint8 indiv[INDIV_SIZE];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid1_indiv_seed, NULL, NULL, NULL, indiv);

	//Calculate eid1 aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, eid1, 0x290, indiv+0x20, 0x100);

	if (memcmp(digest, eid1+0x290, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid1 hash check failed!\n");

	//Decrypt eid1.
	aes_setkey_dec(&aes_ctxt, indiv + INDIV_EID1_KEY_OFFSET, 0x100);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0x290, indiv + INDIV_EID1_IV_OFFSET, eid1, eid1);
}

// brief Decrypt EID1.
// param file_in Input EID1.
// param file_out Decrypted EID1 output.
void eid1_decrypt(char *file_in, char *file_out) {
	uint32 length;
	if (uint8 *eid1 = _read_buffer(file_in, &length)) {
		eid1_decrypt_buffer(eid1);
		_write_buffer(file_out, eid1, 0x290);
		free(eid1);
	}
}

// brief Generate P/S block buffer from EID2.
// param eid2 Input EID2.
// param blocktype Type of block to generate.
uint8 *eid2_generate_block_buffer(uint8 *eid2, uint32 blocktype) {
	uint8		*res = NULL;
	uint8		indiv[INDIV_SIZE];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid2_indiv_seed, NULL, NULL, NULL, indiv);

	eid2_header *h = (eid2_header *)eid2;

	switch(blocktype) {
		case EID2_BLOCKTYPE_P:
			res = (uint8*)malloc(h->p_len);
			aes_setkey_dec(&aes_ctxt, indiv + INDIV_EID2_KEY_OFFSET, 0x100);
			aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, h->p_len, indiv + INDIV_EID2_IV_OFFSET, eid2 + sizeof(eid2_header), res);
			break;
		case EID2_BLOCKTYPE_S:
			res = (uint8*)malloc(h->s_len);
			aes_setkey_dec(&aes_ctxt, indiv + INDIV_EID2_KEY_OFFSET, 0x100);
			aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, h->s_len, indiv + INDIV_EID2_IV_OFFSET, eid2 + sizeof(eid2_header) + h->p_len, res);
			break;
	}

	return res;
}

// brief Generate P/S block from EID2.
// param file_in Input EID2.
// param blocktype Type of block to generate.
// param file_out Output file.
// param size Size of Output file
void eid2_generate_block(char *file_in, uint32 blocktype, char *file_out, uint32 size) {
	uint32 length;
	if (uint8 *eid2 = _read_buffer(file_in, &length)) {
		if (uint8 *block = eid2_generate_block_buffer(eid2, blocktype)) {
			_write_buffer(file_out, block, size);
			free(block);
		}
		free(eid2);
	}
}

// brief Decrypt EID2 block.
// block EID2 block.
// length Block length.
// out Output File
void eid2_decrypt_block(char *block, uint32 length, char* out) {
	uint8 *block_read = _read_buffer(block, NULL);
	uint8 tmp[0x08], iv[0x08];
	int block_size = 8;
	int num_blocks = (int)(length / block_size);

	memcpy(iv, eid2_des_iv, 0x08);

	if (num_blocks > 0) {
		des_context ctx;
		des_setkey_dec(&ctx, eid2_des_key);
		for (int i = 0; i < num_blocks - 1; ++i) {
			uint8 *ptr = block_read + i * block_size;
			memcpy(tmp, ptr, block_size);
			des_crypt_ecb(&ctx, ptr, ptr);
			if (i > 0) {
				for (int j = 0; j < block_size; ++j)
					ptr[j] = ptr[j] ^ iv[j];
			}
			memcpy(iv, tmp, block_size);
		}
	}
	_write_buffer(out,tmp,length);
}

// brief Decrypt EID3 buffer.
// param eid3 Input/Output EID3.
void eid3_decrypt_buffer(uint8 *eid3) {
	uint8 indiv[INDIV_SIZE];
	uint8 key_info[0x10], iv[0x10];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid3_indiv_seed, NULL, NULL, NULL, indiv);

	//Generate key_info.
	memset(iv, 0, 0x10);
	aes_setkey_enc(&aes_ctxt, indiv + 0x20, 0x100);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0x10, iv, eid3_keyseed, key_info);

	//Calculate eid3 aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, eid3, 0xF0, key_info, 0x80);

	if (memcmp(digest, eid3 + 0xF0, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid3 omac1 hash check failed!\n");

	//Decrypt eid3.
	aes_setkey_dec(&aes_ctxt, key_info, 0x80);
	memcpy(iv, eid3 + 0x10, 0x10);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0xD0, iv, eid3 + 0x20, eid3 + 0x20);

	//Decrypt second layer.
	memset(iv, 0, 0x10);
	aes_setkey_dec(&aes_ctxt, eid3_static_key, 0x80);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0xD0, iv, eid3 + 0x20, eid3 + 0x20);


	uint8 sha1_digest[20];
	sha1(eid3 + 0x20, 0xB8, sha1_digest);

	if (memcmp(sha1_digest, eid3 + 0x20 + 0xB8, 20) != 0)
		printf("warning: eid3 sha1 hash check failed!\n");
}

// brief Decrypt EID3.
// param file_in Input EID3.
// param file_out Decrypted EID3 output.
void eid3_decrypt(char *file_in, char *file_out) {
	uint32 length;
	if (uint8 *eid3 = _read_buffer(file_in, &length)) {
		eid3_decrypt_buffer(eid3);
		_write_buffer(file_out, eid3, EID3_SIZE);
		free(eid3);
	}
}

// brief Decrypt EID4 buffer.
// param eid4 Input/Output EID4.
void eid4_decrypt_buffer(uint8 *eid4) {
	uint8 indiv[INDIV_SIZE];
	aes_context aes_ctxt;

	//Generate individuals.
	indiv_gen(eid4_indiv_seed, NULL, NULL, NULL, indiv);

	//Calculate eid4 aes omac1.
	uint8 digest[AES_OMAC1_DIGEST_SIZE];
	aes_omac1(digest, eid4, 0x20, indiv + INDIV_EID4_KEY_OFFSET, 0x100);

	if (memcmp(digest, eid4 + 0x20, AES_OMAC1_DIGEST_SIZE) != 0)
		printf("warning: eid4 hash check failed!\n");

	//Decrypt eid4.
	aes_setkey_dec(&aes_ctxt, indiv + INDIV_EID4_KEY_OFFSET, 0x100);
	aes_crypt_cbc(&aes_ctxt, AES_DECRYPT, 0x20, indiv + INDIV_EID4_IV_OFFSET, eid4, eid4);
}

// brief Decrypt EID4.
// param file_in Input EID4.
// param file_out Decrypted EID4 output.
void eid4_decrypt(char *file_in, char *file_out) {
	uint32 length;
	if (uint8 *eid4 = _read_buffer(file_in, &length)) {
		eid4_decrypt_buffer(eid4);
		_write_buffer(file_out, eid4, EID4_SIZE);
		free(eid4);
	}
}

//encdec data key_info seed
uint8 encdec_seed_00[] = {
	0xE2, 0xD0, 0x5D, 0x40, 0x71, 0x94, 0x5B, 0x01, 0xC3, 0x6D, 0x51, 0x51, 0xE8, 0x8C, 0xB8, 0x33,
	0x4A, 0xAA, 0x29, 0x80, 0x81, 0xD8, 0xC4, 0x4F, 0x18, 0x5D, 0xC6, 0x60, 0xED, 0x57, 0x56, 0x86
};

//encdec tweak key_info seed
uint8 encdec_seed_20[] = {
	0x02, 0x08, 0x32, 0x92, 0xC3, 0x05, 0xD5, 0x38, 0xBC, 0x50, 0xE6, 0x99, 0x71, 0x0C, 0x0A, 0x3E,
	0x55, 0xF5, 0x1C, 0xBA, 0xA5, 0x35, 0xA3, 0x80, 0x30, 0xB6, 0x7F, 0x79, 0xC9, 0x05, 0xBD, 0xA3

};

//sb indiv seed 0x00-0x1F
uint8 sb_indiv_seed_00[] = {
	0xD9, 0x2D, 0x65, 0xDB, 0x05, 0x7D, 0x49, 0xE1, 0xA6, 0x6F, 0x22, 0x74, 0xB8, 0xBA, 0xC5, 0x08,
	0x83, 0x84, 0x4E, 0xD7, 0x56, 0xCA, 0x79, 0x51, 0x63, 0x62, 0xEA, 0x8A, 0xDA, 0xC6, 0x03, 0x26
};

//sb indiv seed 0x20-0x3F
uint8 sb_indiv_seed_20[] = {
	0xC3, 0xB3, 0xB5, 0xAA, 0xCC, 0x74, 0xCD, 0x6A, 0x48, 0xEF, 0xAB, 0xF4, 0x4D, 0xCD, 0xF1, 0x6E,
	0x37, 0x9F, 0x55, 0xF5, 0x77, 0x7D, 0x09, 0xFB, 0xEE, 0xDE, 0x07, 0x05, 0x8E, 0x94, 0xBE, 0x08
};

void generate_ata_keys(uint8 *eid_root_key, uint8 *eid_root_iv, uint8 *data_key_dst, uint8 *tweak_key_dst) {
	aes_context aes_ctxt;
	uint8 iv[0x10];

	//Generate ATA data key_info.
	aes_setkey_enc(&aes_ctxt, eid_root_key, 0x100);
	memcpy(iv, eid_root_iv, 0x10);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0x20, iv, sb_indiv_seed_00, data_key_dst);

	//Generate ATA tweak key_info.
	aes_setkey_enc(&aes_ctxt, eid_root_key, 0x100);
	memcpy(iv, eid_root_iv, 0x10);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0x20, iv, sb_indiv_seed_20, tweak_key_dst);
}

void generate_encdec_keys(uint8 *eid_root_key, uint8 *eid_root_iv, uint8 *data_key_dst, uint8 *tweak_key_dst) {
	aes_context aes_ctxt;
	uint8 iv[0x10];

	//Generate encdec_k1.
	aes_setkey_enc(&aes_ctxt, eid_root_key, 0x100);
	memcpy(iv, eid_root_iv, 0x10);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0x20, iv, encdec_seed_00, data_key_dst);

	//Generate encdec_k3.
	aes_setkey_enc(&aes_ctxt, eid_root_key, 0x100);
	memcpy(iv, eid_root_iv, 0x10);
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, 0x20, iv, encdec_seed_20, tweak_key_dst);
}

// EID0 section 0 iv offset.
#define INDIV_EID0_SEC_0_IV_OFFSET 0x10
// EID0 section 0 keygen key_info offset.
#define INDIV_EID0_SEC_0_GENKEY_OFFSET 0x20

// EID0 section A iv offset.
#define INDIV_EID0_SEC_A_IV_OFFSET 0x10
// EID0 section A keygen key_info offset.
#define INDIV_EID0_SEC_A_GENKEY_OFFSET 0x20

// EID1 iv offset.
#define INDIV_EID1_IV_OFFSET 0x10
// EID1 key_info offset.
#define INDIV_EID1_KEY_OFFSET 0x20

// EID2 iv offset.
#define INDIV_EID2_IV_OFFSET 0x10
// EID2 key_info offset.
#define INDIV_EID2_KEY_OFFSET 0x20

// EID4 iv offset.
#define INDIV_EID4_IV_OFFSET 0x10
// EID4 key_info offset.
#define INDIV_EID4_KEY_OFFSET 0x20

// brief Generate individuals.
// param indiv Individuals dest.
// param seed0 Seed chunk 0.
// param seed1 Seed chunk 1.
// param seed2 Seed chunk 2.
// param seed3 Seed chunk 3.

void indiv_gen(uint8 *seed0, uint8 *seed1, uint8 *seed2, uint8 *seed3, uint8 *indiv) {
	uint32	rounds = INDIV_SIZE / INDIV_CHUNK_SIZE;
	uint8	iv[0x10];
	aes_context aes_ctxt;

	memset(indiv, 0, INDIV_SIZE);

	//Copy seeds.
	if (seed0 != NULL)
		memcpy(indiv, seed0, INDIV_SEED_SIZE);
	if (seed1 != NULL)
		memcpy(indiv + INDIV_SEED_SIZE, seed1, INDIV_SEED_SIZE);
	if (seed2 != NULL)
		memcpy(indiv + INDIV_SEED_SIZE * 2, seed2, INDIV_SEED_SIZE);
	if (seed3 != NULL)
		memcpy(indiv + INDIV_SEED_SIZE * 3, seed3, INDIV_SEED_SIZE);

	//Generate.
	for (int i = 0; i < rounds; i++, indiv += INDIV_CHUNK_SIZE) {
		//Set key_info and iv.
		aes_setkey_enc(&aes_ctxt, eid_root_key, KEY_BITS(ISO_ROOT_KEY_SIZE));
		memcpy(iv, eid_root_key+0x20, ISO_ROOT_IV_SIZE);
		//Encrypt one chunk.
		aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, INDIV_CHUNK_SIZE, iv, indiv, indiv);
	}
}


void generate_hdd_individuals() {
	uint8 ata_k1[0x20], ata_k2[0x20], edec_k1[0x20], edec_k2[0x20];

	//fetching root_key
	eid_root_key = _read_buffer("data/eid_root_key", NULL);

	//Generate keys.
	generate_ata_keys(eid_root_key, eid_root_key + 0x20, ata_k1, ata_k2);
	generate_encdec_keys(eid_root_key, eid_root_key + 0x20, edec_k1, edec_k2);

	_hexdump(stdout, "ATA-DATA-KEY	", 0, ata_k1, 0x20, 0);
	_hexdump(stdout, "ATA-TWEAK-KEY	", 0, ata_k2, 0x20, 0);
	_hexdump(stdout, "ENCDEC-DATA-KEY ", 0, edec_k1, 0x20, 0);
	_hexdump(stdout, "ENCDEC-TWEAK-KEY", 0, edec_k2, 0x20, 0);
}

void decrypt_eid() {
	//fetching root_key
	eid_root_key = _read_buffer("data/eid_root_key", NULL);

	//unpacking eid
	eid_unpack("eid/eid");

	//decrypting
	eid0_decrypt("eid/eid0","eid/eid0decrypted");
	eid1_decrypt("eid/eid1","eid/eid1decrypted.bin");
	eid2_generate_block("eid/eid2",EID2_BLOCKTYPE_P,"eid/eid2pblock.bin",0x80);
	eid2_generate_block("eid/eid2",EID2_BLOCKTYPE_S,"eid/eid2sblock.bin",0x690);
	eid2_decrypt_block("eid/eid2pblock.bin",0x80,"eid/eid2pblockdec.bin");
	eid2_decrypt_block("eid/eid2sblock.bin",0x690,"eid/eid2sblockdec.bin");
	eid3_decrypt("eid/eid3","eid/eid3decrypted.bin");
	eid4_decrypt("eid/eid4","eid/eid4decrypted.bin");
}

void encrypt_eid0_section_A() {
	//fetching root_key
	eid_root_key = _read_buffer("data/eid_root_key", NULL);

	//encrypting
	eid0_encrypt_section_A("eid/eid0decrypted","eid/eid0encrypted");
}

void syscon_auth() {
	aes_context aes_ctxt;
	uint8 indiv[0x40];
	uint8 indiv_key[0x20];
	uint8 zero_iv[0x10]={0};
	uint8 enc_key_seed[INDIV_SIZE];

	//fetching root_key
	eid_root_key = _read_buffer("data/eid_root_key", NULL);

	//Generate individuals.
	indiv_gen(eid1_indiv_seed, NULL, NULL, NULL, indiv);
	_write_buffer("syscon/indiv", indiv, 0x40);

	//Generate seeds
	memcpy(indiv_key,indiv + 0x20,0x20);
	aes_setkey_enc(&aes_ctxt, indiv_key, KEY_BITS(0x20));
	aes_crypt_cbc(&aes_ctxt, AES_ENCRYPT, INDIV_SIZE, zero_iv, syscon_key_seed, enc_key_seed);
	_write_buffer("syscon/enc_key_seed", enc_key_seed, INDIV_SIZE);
}

int main()
{
	//Decrypt eEID(missing eid5)
	decrypt_eid();
	//Encrypt EID0 Section A
	encrypt_eid0_section_A();
	//Generate Syscon AUTH seeds(Acording to wiki)
	syscon_auth();
	//Generate HDD Keys
	generate_hdd_individuals();
}
#endif


