#include "stream.h"
#include "base/bits.h"
#include "codec/vlc.h"

using namespace iso;
/*
CABAC	Context-based Adaptive Binary Arithmetic Coding
CAVLC	Context-based Adaptive Variable Length Coding
CBR		Constant Bit Rate
CPB		Coded Picture Buffer
DPB		Decoded Picture Buffer
DUT		Decoder under test
FIFO	First-In, First-Out
HRD		Hypothetical Reference Decoder
HSS		Hypothetical Stream Scheduler
IDR		Instantaneous Decoding Refresh
LSB		Least Significant Bit
MB		Macroblock
MBAFF	Macroblock-Adaptive Frame-Field Coding
MSB		Most Significant Bit
MVC		Multiview Video Coding
MVCD	Multiview Video Coding with Depth
NAL		Network Abstraction Layer
RBSP	Raw Byte Sequence Payload
SEI		Supplemental Enhancement Information
SODB	String Of Data Bits
SVC		Scalable Video Coding
UUID	Universal Unique Identifier
VBR		Variable Bit Rate
VCL		Video Coding Layer
VLC		Variable Length Coding
VUI		Video Usability Information

byte_aligned() is specified as follows:
- If the current position in the bitstream is on a byte boundary, i.e., the next bit in the bitstream is the first bit in a byte, the return value of byte_aligned() is equal to TRUE.
- Otherwise, the return value of byte_aligned() is equal to FALSE.
more_data_in_byte_stream(), which is used only in the byte stream NAL unit syntax structure specified in Annex B, is specified as follows:
- If more data follow in the byte stream, the return value of more_data_in_byte_stream() is equal to TRUE.
- Otherwise, the return value of more_data_in_byte_stream() is equal to FALSE.
more_rbsp_data() is specified as follows:
- If there is no more data in the RBSP, the return value of more_rbsp_data() is equal to FALSE.
- Otherwise, the RBSP data is searched for the last (least significant, right-most) bit equal to 1 that is present in the RBSP. Given the position of this bit, which is the first bit (rbsp_stop_one_bit) of the rbsp_trailing_bits() syntax structure, the following applies:
- If there is more data in an RBSP before the rbsp_trailing_bits() syntax structure, the return value of more_rbsp_data() is equal to TRUE.
- Otherwise, the return value of more_rbsp_data() is equal to FALSE.
The method for enabling determination of whether there is more data in the RBSP is specified by the application (or in Annex B for applications that use the byte stream format).
more_rbsp_trailing_data() is specified as follows:
- If there is more data in an RBSP, the return value of more_rbsp_trailing_data() is equal to TRUE.
- Otherwise, the return value of more_rbsp_trailing_data() is equal to FALSE.
next_bits(n ) provides the next bits in the bitstream for comparison purposes, without advancing the bitstream pointer. Provides a look at the next n bits in the bitstream with n being its argument. When used within the byte stream as specified in Annex B, next_bits(n ) returns a value of 0 if fewer than n bits remain within the byte stream.
read_bits(n ) reads the next n bits from the bitstream and advances the bitstream pointer by n bit positions. When n is equal to 0, read_bits(n ) is specified to return a value equal to 0 and to not advance the bitstream pointer.
- ae(v): context-adaptive arithmetic entropy-coded syntax element. The parsing process for this descriptor is specified in clause 9.3.
- b(8): byte having any pattern of bit string (8 bits). The parsing process for this descriptor is specified by the return value of the function read_bits(8 ).
- ce(v): context-adaptive variable-length entropy-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.2.
- f(n): fixed-pattern bit string using n bits written (from left to right) with the left bit first. The parsing process for this descriptor is specified by the return value of the function read_bits(n ).
- i(n): signed integer using n bits. When n is "v" in the syntax table, the number of bits varies in a manner dependent on the value of other syntax elements. The parsing process for this descriptor is specified by the return value of the function read_bits(n ) interpreted as a two's complement integer representation with most significant bit written first.
- me(v): mapped Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
- se(v): signed integer Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
- te(v): truncated Exp-Golomb-coded syntax element with left bit first. The parsing process for this descriptor is specified in clause 9.1.
- u(n): unsigned integer using n bits. When n is "v" in the syntax table, the number of bits varies in a manner dependent on the value of other syntax elements. The parsing process for this descriptor is specified by the return value of the function read_bits(n ) interpreted as a binary representation of an unsigned integer with most significant bit written first.
- ue(v): unsigned integer Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
*/

//													Content of NAL unit and RBSP syntax structure							C,			Annex A		Annex G & H			Annex I & J
enum NALtype {
	NAL_unspecified0						= 0,	//Unspecified															,			non-VCL,	non-VCL,			non-VCL
	NAL_slice_layer_without_partitioning	= 1,	//Coded slice of a non-IDR picture										2, 3, 4,	VCL,		VCL,				VCL
	NAL_slice_data_partition_a_layer		= 2,	//Coded slice data partition A											2,			VCL,		not applicable,		not applicable
	NAL_slice_data_partition_b_layer		= 3,	//Coded slice data partition B											3,			VCL,		not applicable,		not applicable
	NAL_slice_data_partition_c_layer		= 4,	//Coded slice data partition C											4,			VCL,		not applicable,		not applicable
	NAL_slice_layer_without_partitioning5	= 5,	//Coded slice of an IDR pictur											2, 3,		VCL,		VCL,				VCL
	NAL_sei									= 6,	//Supplemental enhancement information (SEI)										non-VCL,	non-VCL,			non-VCL
	NAL_seq_parameter_set					= 7,	//Sequence parameter set												0,			non-VCL,	non-VCL,			non-VCL
	NAL_pic_parameter_set					= 8,	//Picture parameter set													1,			non-VCL,	non-VCL,			non-VCL
	NAL_access_unit_delimiter				= 9,	//Access unit delimiter													6,			non-VCL,	non-VCL,			non-VCL
	NAL_end_of_seq							= 10,	//End of sequence														7,			non-VCL,	non-VCL,			non-VCL
	NAL_end_of_stream						= 11,	//End of stream															8,			non-VCL,	non-VCL,			non-VCL
	NAL_filler_data							= 12,	//Filler data															9,			non-VCL,	non-VCL,			non-VCL
	NAL_seq_parameter_set_extension			= 13,	//Sequence parameter set extension										10,			non-VCL,	non-VCL,			non-VCL
	NAL_prefix_nal_unit						= 14,	//Prefix NAL unit														2,			non-VCL,	suffix dependent,	suffix dependent
	NAL_subset_seq_parameter_set			= 15,	//Subset sequence parameter set											0,			non-VCL,	non-VCL,			non-VCL
	NAL_depth_parameter_set					= 16,	//Depth parameter set													11,			non-VCL,	non-VCL,			non-VCL
	NAL_reserved17							= 17,	//Reserved																,			non-VCL,	non-VCL,			non-VCL
	NAL_reserved18							= 18,	//Reserved																,			non-VCL,	non-VCL,			non-VCL
	NAL_slice_layer_without_partitioning19	= 19,	//Coded slice of an auxiliary coded picture without partitioning		2, 3, 4		non-VCL,	non-VCL,			non-VCL
	NAL_slice_layer_extension				= 20,	//Coded slice extension													2, 3, 4,	non-VCL,	VCL,				VCL
	NAL_slice_layer_extension21				= 21,	//Coded slice extension for a depth view component or a 3D-AVC texture	2, 3, 4,	non-VCL,	non-VCL,			VCL
	NAL_reserved22							= 22,	//Reserved																,			non-VCL,	non-VCL,			VCL
	NAL_reserved23							= 23,	//Reserved																,			non-VCL,	non-VCL,			VCL
	NAL_unspecified24						= 24,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified25						= 25,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified26						= 26,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified27						= 27,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified28						= 28,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified29						= 29,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified30						= 30,	//Unspecified															,			non-VCL		non-VCL				non-VCL
	NAL_unspecified31						= 31,	//Unspecified															,			non-VCL		non-VCL				non-VCL
};

enum Intra4x4PredMode {
 	Intra_4x4_Vertical,
 	Intra_4x4_Horizontal,
 	Intra_4x4_DC,
 	Intra_4x4_Diagonal_Down_Left,
 	Intra_4x4_Diagonal_Down_Right,
 	Intra_4x4_Vertical_Right,
 	Intra_4x4_Horizontal_Down,
 	Intra_4x4_Vertical_Left,
 	Intra_4x4_Horizontal_Up,
};

enum Intra8x8PredMode {
 	Intra_8x8_Vertical,
 	Intra_8x8_Horizontal,
 	Intra_8x8_DC,
 	Intra_8x8_Diagonal_Down_Left,
 	Intra_8x8_Diagonal_Down_Right,
 	Intra_8x8_Vertical_Right,
 	Intra_8x8_Horizontal_Down,
 	Intra_8x8_Vertical_Left,
 	Intra_8x8_Horizontal_Up,
};
enum Intra16x16PredMode {
 	Intra_16x16_Vertical,
 	Intra_16x16_Horizontal,
 	Intra_16x16_DC,
 	Intra_16x16_Plane,
};
enum IntraChromaPredMode {
 	Intra_Chroma_DC,
 	Intra_Chroma_Horizontal,
 	Intra_Chroma_Vertical,
 	Intra_Chroma_Plane,
};

enum BlockType {
	Inter,
	Intra_4x4,
	Intra_8x8,
};

enum BlockMode {
	Intra16x16DCLevel,		Intra16x16ACLevel,		LumaLevel4x4,
	CbIntra16x16DCLevel,	CbIntra16x16ACLevel,	CbLevel4x4,
	CrIntra16x16DCLevel,	CrIntra16x16ACLevel,	CrLevel4x4,
	ChromaACLevel
};

enum ChromaArrayType {
	CT0,
	CT1,
	CT2,
	CT3,
};

uint8 table9_4[][2] = {
//ChromaArrayType is 1 or 2
//	Intra 	Inter
	{47,   0	},	//0,
	{31,   16	},	//1,
	{15,   1	},	//2,
	{0,    2	},	//3,
	{23,   4	},	//4,
	{27,   8	},	//5,
	{29,   32	},	//6,
	{30,   3	},	//7,
	{7,    5	},	//8,
	{11,   10	},	//9,
	{13,   12	},	//10,
	{14,   15	},	//11,
	{39,   47	},	//12,
	{43,   7	},	//13,
	{45,   11	},	//14,
	{46,   13	},	//15,
	{16,   14	},	//16,
	{3,    6	},	//17,
	{5,    9	},	//18,
	{10,   31	},	//19,
	{12,   35	},	//20,
	{19,   37	},	//21,
	{21,   42	},	//22,
	{26,   44	},	//23,
	{28,   33	},	//24,
	{35,   34	},	//25,
	{37,   36	},	//26,
	{42,   40	},	//27,
	{44,   39	},	//28,
	{1,    43	},	//29,
	{2,    45	},	//30,
	{4,    46	},	//31,
	{8,    17	},	//32,
	{17,   18	},	//33,
	{18,   20	},	//34,
	{20,   24	},	//35,
	{24,   19	},	//36,
	{6,    21	},	//37,
	{9,    26	},	//38,
	{22,   28	},	//39,
	{25,   23	},	//40,
	{32,   27	},	//41,
	{33,   29	},	//42,
	{34,   30	},	//43,
	{36,   22	},	//44,
	{40,   25	},	//45,
	{38,   38	},	//46,
	{41,   41	},	//47,
//ChromaArrayType is 0 or 3
	{15,   0	},	//0,
	{0,    1	},	//1,
	{7,    2	},	//2,
	{11,   4	},	//3,
	{13,   8	},	//4,
	{14,   3	},	//5,
	{3,    5	},	//6,
	{5,    10	},	//7,
	{10,   12	},	//8,
	{12,   15	},	//9,
	{1,    7	},	//10,
	{2,    11	},	//11,
	{4,    13	},	//12,
	{8,    14	},	//13,
	{6,    6	},	//14,
	{9,    9	},	//15,
};

struct Table9_5 {
	uint8	trailing_ones;
	uint8	coeff_token;
	uint16	coeff0, coeff2, coeff4, coeff8, coeff_1, coeff_2;
};

#if 0
Table9_5 table9_5[] = {
	{0,	0,	1,						11,					1111,			0000 11,	01,			1				},
	{0,	1,	0001 01,				0010 11,			0011 11,		0000 00,	0001 11,	0001 111 		},
	{1,	1,	01,						10,					1110,			0000 01,	1,			01 				},
	{0,	2,	0000 0111,				0001 11,			0010 11,		0001 00,	0001 00,	0001 110 		},
	{1,	2,	0001 00,				0011 1,				0111 1,			0001 01,	0001 10,	0001 101 		},
	{2,	2,	001,					011,				1101,			0001 10,	001,		001 			},
	{0,	3,	0000 0011 1,			0000 111,			0010 00,		0010 00,	0000 11,	0000 0011 1 	},
	{1,	3,	0000 0110,				0010 10,			0110 0,			0010 01,	0000 011,	0001 100 		},
	{2,	3,	0000 101,				0010 01,			0111 0,			0010 10,	0000 010,	0001 011 		},
	{3,	3,	0001 1,					0101,				1100,			0010 11,	0001 01,	0000 1 			},
	{0,	4,	0000 0001 11,			0000 0111,			0001 111,		0011 00,	0000 10,	0000 0011 0 	},
	{1,	4,	0000 0011 0,			0001 10,			0101 0,			0011 01,	0000 0011,	0000 0010 1 	},
	{2,	4,	0000 0101,				0001 01,			0101 1,			0011 10,	0000 0010,	0001 010 		},
	{3,	4,	0000 11,				0100,				1011,			0011 11,	0000 000,	0000 01 		},
	{0,	5,	0000 0000 111,			0000 0100,			0001 011,		0100 00,	0,			0000 0001 11 	},
	{1,	5,	0000 0001 10,			0000 110,			0100 0,			0100 01,	0,			0000 0001 10 	},
	{2,	5,	0000 0010 1,			0000 101,			0100 1,			0100 10,	0,			0000 0010 0 	},
	{3,	5,	0000 100,				0011 0,				1010,			0100 11,	0,			0001 001 		},
	{0,	6,	0000 0000 0111 1,		0000 0011 1,		0001 001,		0101 00,	0,			0000 0000 111 	},
	{1,	6,	0000 0000 110,			0000 0110,			0011 10,		0101 01,	0,			0000 0000 110 	},
	{2,	6,	0000 0001 01,			0000 0101,			0011 01,		0101 10,	0,			0000 0001 01 	},
	{3,	6,	0000 0100,				0010 00,			1001,			0101 11,	0,			0001 000 		},
	{0,	7,	0000 0000 0101 1,		0000 0001 111,		0001 000,		0110 00,	0,			0000 0000 0111 	},
	{1,	7,	0000 0000 0111 0,		0000 0011 0,		0010 10,		0110 01,	0,			0000 0000 0110 	},
	{2,	7,	0000 0000 101,			0000 0010 1,		0010 01,		0110 10,	0,			0000 0000 101 	},
	{3,	7,	0000 0010 0,			0001 00,			1000,			0110 11,	0,			0000 0001 00 	},
	{0,	8,	0000 0000 0100 0,		0000 0001 011,		0000 1111,		0111 00,	0,			0000 0000 0011 1},
	{1,	8,	0000 0000 0101 0,		0000 0001 110,		0001 110,		0111 01,	0,			0000 0000 0101 	},
	{2,	8,	0000 0000 0110 1,		0000 0001 101,		0001 101,		0111 10,	0,			0000 0000 0100 	},
	{3,	8,	0000 0001 00,			0000 100,			0110 1,			0111 11,	0,			0000 0000 100 	},
	{0,	9,	0000 0000 0011 11,		0000 0000 1111,		0000 1011,		1000 00,	0,			0				},
	{1,	9,	0000 0000 0011 10,		0000 0001 010,		0000 1110,		1000 01,	0,			0				},
	{2,	9,	0000 0000 0100 1,		0000 0001 001,		0001 010,		1000 10,	0,			0				},
	{3,	9,	0000 0000 100,			0000 0010 0,		0011 00,		1000 11,	0,			0				},
	{0,	10,	0000 0000 0010 11,		0000 0000 1011,		0000 0111 1,	1001 00,	0,			0				},
	{1,	10,	0000 0000 0010 10,		0000 0000 1110,		0000 1010,		1001 01,	0,			0				},
	{2,	10,	0000 0000 0011 01,		0000 0000 1101,		0000 1101,		1001 10,	0,			0				},
	{3,	10,	0000 0000 0110 0,		0000 0001 100,		0001 100,		1001 11,	0,			0				},
	{0,	11,	0000 0000 0001 111,		0000 0000 1000,		0000 0101 1,	1010 00,	0,			0				},
	{1,	11,	0000 0000 0001 110,		0000 0000 1010,		0000 0111 0,	1010 01,	0,			0				},
	{2,	11,	0000 0000 0010 01,		0000 0000 1001,		0000 1001,		1010 10,	0,			0				},
	{3,	11,	0000 0000 0011 00,		0000 0001 000,		0000 1100,		1010 11,	0,			0				},
	{0,	12,	0000 0000 0001 011,		0000 0000 0111 1,	0000 0100 0,	1011 00,	0,			0				},
	{1,	12,	0000 0000 0001 010,		0000 0000 0111 0,	0000 0101 0,	1011 01,	0,			0				},
	{2,	12,	0000 0000 0001 101,		0000 0000 0110 1,	0000 0110 1,	1011 10,	0,			0				},
	{3,	12,	0000 0000 0010 00,		0000 0000 1100,		0000 1000,		1011 11,	0,			0				},
	{0,	13,	0000 0000 0000 1111,	0000 0000 0101 1,	0000 0011 01,	1100 00,	0,			0				},
	{1,	13,	0000 0000 0000 001,		0000 0000 0101 0,	0000 0011 1,	1100 01,	0,			0				},
	{2,	13,	0000 0000 0001 001,		0000 0000 0100 1,	0000 0100 1,	1100 10,	0,			0				},
	{3,	13,	0000 0000 0001 100,		0000 0000 0110 0,	0000 0110 0,	1100 11,	0,			0				},
	{0,	14,	0000 0000 0000 1011,	0000 0000 0011 1,	0000 0010 01,	1101 00,	0,			0				},
	{1,	14,	0000 0000 0000 1110,	0000 0000 0010 11,	0000 0011 00,	1101 01,	0,			0				},
	{2,	14,	0000 0000 0000 1101,	0000 0000 0011 0,	0000 0010 11,	1101 10,	0,			0				},
	{3,	14,	0000 0000 0001 000,		0000 0000 0100 0,	0000 0010 10,	1101 11,	0,			0				},
	{0,	15,	0000 0000 0000 0111,	0000 0000 0010 01,	0000 0001 01,	1110 00,	0,			0				},
	{1,	15,	0000 0000 0000 1010,	0000 0000 0010 00,	0000 0010 00,	1110 01,	0,			0				},
	{2,	15,	0000 0000 0000 1001,	0000 0000 0010 10,	0000 0001 11,	1110 10,	0,			0				},
	{3,	15,	0000 0000 0000 1100,	0000 0000 0000 1,	0000 0001 10,	1110 11,	0,			0				},
	{0,	16,	0000 0000 0000 0100,	0000 0000 0001 11,	0000 0000 01,	1111 00,	0,			0				},
	{1,	16,	0000 0000 0000 0110,	0000 0000 0001 10,	0000 0001 00,	1111 01,	0,			0				},
	{2,	16,	0000 0000 0000 0101,	0000 0000 0001 01,	0000 0000 11,	1111 10,	0,			0				},
	{3,	16,	0000 0000 0000 1000,	0000 0000 0001 00,	0000 0000 10,	1111 11,	0,			0				},
};
#endif

#if 0
//Table 9-11
//arithmetic prediction
// 				 				Table 			SI 			I 			P, SP 			B
//slice_data
mb_skip_flag 					13,14									11..13 			24..26
mb_field_decoding_flag 			18 				70..72 		70..72 		70..72 			70..72
//macroblock_layer
mb_type 						12,13,14 		0..10 		3..10 		14..20 			27..35
transform_size_8x8_flag 		16 				na 			399..401 	399..401 		399..401
coded_block_pattern (luma) 		18 				73..76 		73..76 		73..76 			73..76
coded_block_pattern (chroma) 	18 				77..84 		77..84 		77..84 			77..84
mb_qp_delta 					17 				60..63 		60..63 		60..63 			60..63
//mb_pred
prev_intra4x4_pred_mode_flag 	17 				68 			68 			68 				68
rem_intra4x4_pred_mode 			17 				69 			69 			69 				69
prev_intra8x8_pred_mode_flag 	17 				na 			68 			68 				68
rem_intra8x8_pred_mode 			17 				na 			69 			69 				69
intra_chroma_pred_mode 			17 				64..67 		64..67 		64..67 			64..67
//mb_pred & sub_mb_pred
ref_idx_l0 						16 	 	 								54..59 			54..59
ref_idx_l1 						16 	 	 	 											54..59
mvd_l0[][ ][ 0 ] 				15 	 	 								40..46 			40..46
mvd_l1[][ ][ 0 ] 				15 	 	 	 											40..46
mvd_l0[][ ][ 1 ] 				15 	 	 								47..53 			47..53
mvd_l1[][ ][ 1 ] 				15 	 	 	 											47..53
//sub_mb_pred
sub_mb_type[] 					13 14 	 	 							21..23 			36..39
//residual_block_cabac
coded_block_flag 				18				85..104		85..104		85..104		 	85..104
								25				460..483	460..483	460..483		460..483
								33							1012..1023	1012..1023		1012..1023
 significant_coeff_flag 		19				105..165	105..165	105..165		105..165
								22				277..337	277..337	277..337		277..337
								24 							402..416	402..416		402..416
								24 							436..450	436..450		436..450
								26 							484..571	484..571		484..571
								30 							776..863	776..863		776..863
								28 							660..689	660..689		660..689
								29							718..747	718..747		718..747
 last_significant_coeff_flag 	20				166..226	166..226	166..226		166..226
								23 				338..398	338..398	338..398		338..398
								24 							417..425	417..425		417..425
								24 							451..459	451..459		451..459
								27 							572..659	572..659		572..659
								31 							864..951	864..951		864..951
								28 							690..707	690..707		690..707
								29							748..765	748..765		748..765
 coeff_abs_level_minus1 		21				227..275	227..275	227..275		227..275
								24 							426..435 	426..435 		426..435
								32 							952..1011	952..1011		952..1011
								28 							708..717 	708..717 		708..717
								29							766..775	766..775		766..775

#endif


struct mn { int8 m, n; };

mn table9_12[] = {	//0..10
	{20,	-15	},
	{2,		54	},
	{3,		74	},
	{20,	-15	},
	{2,		54	},
	{3,		74	},
	{-28,	127	},
	{-23,	104	},
	{-6,	53	},
	{-1,	54	},
	{7,		51	},
};

mn table9_13[] = {	//11..23
	{23,	33,	},
	{23,	2,	},
	{21,	0,	},
	{1,		9,	},
	{0,		49,	},
	{-37,	118,},
	{5,		57,	},
	{-13,	78,	},
	{-11,	65,	},
	{1,		62,	},
	{12,	49,	},
	{-4,	73,	},
	{17,	50,	},

	{22,	25,	},
	{34,	0,	},
	{16,	0,	},
	{-2,	9,	},
	{4,		41,	},
	{-29,	118,},
	{2,		65,	},
	{-6,	71,	},
	{-13,	79,	},
	{5,		52,	},
	{9,		50,	},
	{-3,	70,	},
	{10,	54,	},

	{29,	16	},
	{25,	0	},
	{14,	0	},
	{-10,	51	},
	{-3,	62	},
	{-27,	99	},
	{26,	16	},
	{-4,	85	},
	{-24,	102	},
	{5,		57	},
	{6,		57	},
	{-17,	73	},
	{14,	57	},
};

mn table9_14[] = {	//24..39
	{18,	64,	},
	{9,		43,	},
	{29,	0,	},
	{26,	67,	},
	{16,	90,	},
	{9,		104,},
	{-46,	127,},
	{-20,	104,},
	{1,		67,	},
	{-13,	78,	},
	{-11,	65,	},
	{1,		62,	},
	{-6,	86,	},
	{-17,	95,	},
	{-6,	61,	},
	{9,		45,	},

	{26,	34,	},
	{19,	22,	},
	{40,	0,	},
	{57,	2,	},
	{41,	36,	},
	{26,	69,	},
	{-45,	127,},
	{-15,	101,},
	{-4,	76,	},
	{-6,	71,	},
	{-13,	79,	},
	{5,		52,	},
	{6,		69,	},
	{-13,	90,	},
	{0,		52,	},
	{8,		43,	},

	{20,	40	},
	{20,	10	},
	{29,	0	},
	{54,	0	},
	{37,	42	},
	{12,	97	},
	{-32,	127	},
	{-22,	117	},
	{-2,	74	},
	{-4,	85	},
	{-24,	102	},
	{5,		57	},
	{-6,	93	},
	{-14,	88	},
	{-6,	44	},
	{4,		55	},
};

mn table9_15[] = {	//40..53
	{-3,	69,},
	{-6,	81,},
	{-11,	96,},
	{6,		55,},
	{7,		67,},
	{-5,	86,},
	{2,		88,},
	{0,		58,},
	{-3,	76,},
	{-10,	94,},
	{5,		54,},
	{4,		69,},
	{-3,	81,},
	{0,		88,},

	{-2,	69,	},
	{-5,	82,	},
	{-10,	96,	},
	{2,		59,	},
	{2,		75,	},
	{-3,	87,	},
	{-3,	100,},
	{1,		56,	},
	{-3,	74,	},
	{-6,	85,	},
	{0,		59,	},
	{-3,	81,	},
	{-7,	86,	},
	{-5,	95,	},

	{-11,	89	},
	{-15,	103	},
	{-21,	116	},
	{19,	57	},
	{20,	58	},
	{4,		84	},
	{6,		96	},
	{1,		63	},
	{-5,	85	},
	{-13,	106	},
	{5,		63	},
	{6,		75	},
	{-3,	90	},
	{-1,	101	},
};

mn table9_16[] = {	//54..59, 399..401
	{0,		0,	},	//na
	{0,		0,	},	//na
	{0,		0,	},	//na
	{0,		0,	},	//na
	{0,		0,	},	//na
	{0,		0,	},	//na
	{31,	21,	},
	{31,	31,	},
	{25,	50,	},

	{-7,	67,	},
	{-5,	74,	},
	{-4,	74,	},
	{-5,	80,	},
	{-7,	72,	},
	{1,		58,	},
	{12,	40,	},
	{11,	51,	},
	{14,	59,	},

	{-1,	66,	},
	{-1,	77,	},
	{1,		70,	},
	{-2,	86,	},
	{-5,	72,	},
	{0,		61,	},
	{25,	32,	},
	{21,	49,	},
	{21,	54,	},

	{3,		55,	},
	{-4,	79,	},
	{-2,	75,	},
	{-12,	97,	},
	{-7,	50,	},
	{1,		60,	},
	{21,	33,	},
	{19,	50,	},
	{17,	61,	},
};

mn table9_17[] = {	//60..69
	{0,		41,	},
	{0,		63,	},
	{0,		63,	},
	{0,		63,	},
	{-9, 	83,	},
	{4,		86,	},
	{0,		97,	},
	{-7, 	72,	},
	{13,	41,	},
	{3,		62,	},
};


mn table9_18[] = {	//70..104
/*70*/	{0,		11, },	{0,		45,	},	{13,	15, },	{7,		34, },
/*71*/	{1,		55, },	{-4,	78,	},	{7,		51, },	{-9,	88, },
/*72*/	{0,		69, },	{-3,	96,	},	{2,		80, },	{-20,	127,},
/*73*/	{-17,	127,},	{-27,	126,},	{-39,	127,},	{-36,	127,},
/*74*/	{-13,	102,},	{-28,	98,	},	{-18,	91, },	{-17,	91, },
/*75*/	{0,		82, },	{-25,	101,},	{-17,	96, },	{-14,	95, },
/*76*/	{-7,	74, },	{-23,	67,	},	{-26,	81, },	{-25,	84, },
/*77*/	{-21,	107,},	{-28,	82,	},	{-35,	98, },	{-25,	86, },
/*78*/	{-27,	127,},	{-20,	94,	},	{-24,	102,},	{-12,	89, },
/*79*/	{-31,	127,},	{-16,	83,	},	{-23,	97, },	{-17,	91, },
/*80*/	{-24,	127,},	{-22,	110,},	{-27,	119,},	{-31,	127,},
/*81*/	{-18,	95, },	{-21,	91,	},	{-24,	99, },	{-14,	76, },
/*82*/	{-27,	127,},	{-18,	102,},	{-21,	110,},	{-18,	103,},
/*83*/	{-21,	114,},	{-13,	93,	},	{-18,	102,},	{-13,	90, },
/*84*/	{-30,	127,},	{-29,	127,},	{-36,	127,},	{-37,	127,},
/*85*/	{-17,	123,},	{-7,	92,	},	{0,		80, },	{11,	80, },
/*86*/	{-12,	115,},	{-5,	89,	},	{-5,	89, },	{5,		76, },
/*87*/	{-16,	122,},	{-7,	96,	},	{-7,	94, },	{2,		84, },
		{-11,	115,},	{-13,	108,},	{-4,	92, },	{5,		78, },
		{-12,	63, },	{-3,	46, },	{0,		39, },	{-6,	55, },
		{-2,	68, },	{-1,	65, },	{0,		65, },	{4,		61, },
		{-15,	84, },	{-1,	57, },	{-15,	84, },	{-14,	83, },
		{-13,	104,},	{-9,	93, },	{-35,	127,},	{-37,	127,},
		{-3,	70, },	{-3,	74, },	{-2,	73, },	{-5,	79, },
		{-8,	93, },	{-9,	92, },	{-12,	104,},	{-11,	104,},
		{-10,	90, },	{-8,	87, },	{-9,	91, },	{-11,	91, },
		{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
		{-1,	74, },	{5,		54, },	{3,		55, },	{0,		65, },
		{-6,	97, },	{6,		60, },	{7,		56, },	{-2,	79, },
		{-7,	91, },	{6,		59, },	{7,		55, },	{0,		72, },
		{-20,	127,},	{6,		69, },	{8,		61, },	{-4,	92, },
		{-4,	56, },	{-1,	48, },	{-3,	53, },	{-6,	56, },
		{-5,	82, },	{0,		68, },	{0,		68, },	{3,		68, },
		{-7,	76, },	{-4,	69, },	{-7,	74, },	{-8,	71, },
		{-22,	125,},	{-8,	88, },	{-9,	88, },	{-13,	98, },
};
mn table9_19[] = {	//105..165
/*105*/	{-7,	93, },	{-2,	85,	},	{-13,	103,},	{-4,	86, },
/*106*/	{-11,	87, },	{-6,	78,	},	{-13,	91, },	{-12,	88, },
/*107*/	{-3,	77, },	{-1,	75,	},	{-9,	89, },	{-5,	82, },
/*108*/	{-5,	71, },	{-7,	77,	},	{-14,	92, },	{-3,	72, },
/*109*/	{-4,	63, },	{2,		54,	},	{-8,	76, },	{-4,	67, },
/*110*/	{-4,	68, },	{5,		50,	},	{-12,	87, },	{-8,	72, },
/*111*/	{-12,	84, },	{-3,	68,	},	{-23,	110,},	{-16,	89, },
/*112*/	{-7,	62, },	{1,		50,	},	{-24,	105,},	{-9,	69, },
/*113*/	{-7,	65, },	{6,		42,	},	{-10,	78, },	{-1,	59, },
/*114*/	{8,		61, },	{-4,	81,	},	{-20,	112,},	{5,		66, },
/*115*/	{5,		56, },	{1,		63,	},	{-17,	99, },	{4,		57, },
/*116*/	{-2,	66, },	{-4,	70,	},	{-78,	127,},	{-4,	71, },
/*117*/	{1,		64, },	{0,		67,	},	{-70,	127,},	{-2,	71, },
/*118*/	{0,		61, },	{2,		57,	},	{-50,	127,},	{2,		58, },
/*119*/	{-2,	78, },	{-2,	76,	},	{-46,	127,},	{-1,	74, },
/*120*/	{1,		50, },	{11,	35,	},	{-4,	66, },	{-4,	44, },
/*121*/	{7,		52, },	{4,		64,	},	{-5,	78, },	{-1,	69, },
/*122*/	{10,	35, },	{1,		61,	},	{-4,	71, },	{0,		62, },
/*123*/	{0,		44, },	{11,	35,	},	{-8,	72, },	{-7,	51, },
/*124*/	{11,	38, },	{18,	25,	},	{2,		59, },	{-4,	47, },
/*125*/	{1,		45, },	{12,	24,	},	{-1,	55, },	{-6,	42, },
/*126*/	{0,		46, },	{13,	29,	},	{-7,	70, },	{-3,	41, },
/*127*/	{5,		44, },	{13,	36,	},	{-6,	75, },	{-6,	53, },
/*128*/	{31,	17, },	{-10,	93,	},	{-8,	89, },	{8,		76, },
/*129*/	{1,		51, },	{-7,	73,	},	{-34,	119,},	{-9,	78, },
/*130*/	{7,		50, },	{-2,	73,	},	{-3,	75, },	{-11,	83, },
/*131*/	{28,	19, },	{13,	46,	},	{32,	20, },	{9,		52, },
/*132*/	{16,	33, },	{9,		49,	},	{30,	22, },	{0,		67, },
/*133*/	{14,	62, },	{-7,	100,},	{-44,	127,},	{-5,	90, },
/*134*/	{-13,	108,},	{9,		53,	},	{0,		54, },	{1,		67, },
/*135*/	{-15,	100,},	{2,		53,	},	{-5,	61, },	{-15,	72, },
		{-13,	101,},	{5,		53, },	{0,		58, },	{-5,	75, },
		{-13,	91, },	{-2,	61, },	{-1,	60, },	{-8,	80, },
		{-12,	94, },	{0,		56, },	{-3,	61, },	{-21,	83, },
		{-10,	88, },	{0,		56, },	{-8,	67, },	{-21,	64, },
		{-16,	84, },	{-13,	63, },	{-25,	84, },	{-13,	31, },
		{-10,	86, },	{-5,	60, },	{-14,	74, },	{-25,	64, },
		{-7,	83, },	{-1,	62, },	{-5,	65, },	{-29,	94, },
		{-13,	87, },	{4,		57, },	{5,		52, },	{9,		75, },
		{-19,	94, },	{-6,	69, },	{2,		57, },	{17,	63, },
		{1,		70, },	{4,		57, },	{0,		61, },	{-8,	74, },
		{0,		72, },	{14,	39, },	{-9,	69, },	{-5,	35, },
		{-5,	74, },	{4,		51, },	{-11,	70, },	{-2,	27, },
		{18,	59, },	{13,	68, },	{18,	55, },	{13,	91, },
		{-8,	102,},	{3,		64, },	{-4,	71, },	{3,		65, },
		{-15,	100,},	{1,		61, },	{0,		58, },	{-7,	69, },
		{0,		95, },	{9,		63, },	{7,		61, },	{8,		77, },
		{-4,	75, },	{7,		50, },	{9,		41, },	{-10,	66, },
		{2,		72, },	{16,	39, },	{18,	25, },	{3,		62, },
		{-11,	75, },	{5,		44, },	{9,		32, },	{-3,	68, },
		{-3,	71, },	{4,		52, },	{5,		43, },	{-20,	81, },
		{15,	46, },	{11,	48, },	{9,		47, },	{0,		30, },
		{-13,	69, },	{-5,	60, },	{0,		44, },	{1,		7 , },
		{0,		62, },	{-1,	59, },	{0,		51, },	{-3,	23, },
		{0,		65, },	{0,		59, },	{2,		46, },	{-21,	74, },
		{21,	37, },	{22,	33, },	{19,	38, },	{16,	66, },
		{-15,	72, },	{5,		44, },	{-4,	66, },	{-23,	124,},
		{9,		57, },	{14,	43, },	{15,	38, },	{17,	37, },
		{16,	54, },	{-1,	78, },	{12,	42, },	{44,	-18,},
		{0,		62, },	{0,		60, },	{9,		34, },	{50,	-34,},
		{12,	72, },	{9,		69, },	{0,		89, },	{-22,	127,},
};
mn table9_20[] = {	//166..226
/*166*/	{24,	0,  },	{11,	28,	},	{4,		45, },	{4,		39, },
/*167*/	{15,	9,  },	{2,		40,	},	{10,	28, },	{0,		42, },
/*168*/	{8,		25, },	{3,		44,	},	{10,	31, },	{7,		34, },
/*169*/	{13,	18, },	{0,		49,	},	{33,	-11,},	{11,	29, },
/*170*/	{15,	9,  },	{0,		46,	},	{52,	-43,},	{8,		31, },
/*171*/	{13,	19, },	{2,		44,	},	{18,	15, },	{6,		37, },
/*172*/	{10,	37, },	{2,		51,	},	{28,	0,  },	{7,		42, },
/*173*/	{12,	18, },	{0,		47,	},	{35,	-22,},	{3,		40, },
/*174*/	{6,		29, },	{4,		39,	},	{38,	-25,},	{8,		33, },
/*175*/	{20,	33, },	{2,		62,	},	{34,	0,  },	{13,	43, },
/*176*/	{15,	30, },	{6,		46,	},	{39,	-18,},	{13,	36, },
/*177*/	{4,		45, },	{0,		54,	},	{32,	-12,},	{4,		47, },
/*178*/	{1,		58, },	{3,		54,	},	{102,	-94,},	{3,		55, },
/*179*/	{0,		62, },	{2,		58,	},	{0,		0,  },	{2,		58, },
/*180*/	{7,		61, },	{4,		63,	},	{56,	-15,},	{6,		60, },
/*181*/	{12,	38, },	{6,		51,	},	{33,	-4, },	{8,		44, },
/*182*/	{11,	45, },	{6,		57,	},	{29,	10, },	{11,	44, },
/*183*/	{15,	39, },	{7,		53,	},	{37,	-5, },	{14,	42, },
/*184*/	{11,	42, },	{6,		52,	},	{51,	-29,},	{7,		48, },
/*185*/	{13,	44, },	{6,		55,	},	{39,	-9, },	{4,		56, },
/*186*/	{16,	45, },	{11,	45,	},	{52,	-34,},	{4,		52, },
/*187*/	{12,	41, },	{14,	36,	},	{69,	-58,},	{13,	37, },
/*188*/	{10,	49, },	{8,		53,	},	{67,	-63,},	{9,		49, },
/*189*/	{30,	34, },	{-1,	82,	},	{44,	-5, },	{19,	58, },
/*190*/	{18,	42, },	{7,		55,	},	{32,	7,  },	{10,	48, },
/*191*/	{10,	55, },	{-3,	78,	},	{55,	-29,},	{12,	45, },
/*192*/	{17,	51, },	{15,	46,	},	{32,	1,  },	{0,		69, },
/*193*/	{17,	46, },	{22,	31,	},	{0,		0,  },	{20,	33, },
/*194*/	{0,		89, },	{-1,	84,	},	{27,	36, },	{8,		63, },
/*195*/	{26,	-19,},	{25,	7,	},	{33,	-25,},	{35,	-18,},
/*196*/	{22,	-17,},	{30,	-7,	},	{34,	-30,},	{33,	-25,},
		{26,	-17,},	{28,	3,  },	{36,	-28,},	{28,	-3, },
		{30,	-25,},	{28,	4,  },	{38,	-28,},	{24,	10, },
		{28,	-20,},	{32,	0,  },	{38,	-27,},	{27,	0 , },
		{33,	-23,},	{34,	-1, },	{34,	-18,},	{34,	-14,},
		{37,	-27,},	{30,	6,  },	{35,	-16,},	{52,	-44,},
		{33,	-23,},	{30,	6,  },	{34,	-14,},	{39,	-24,},
		{40,	-28,},	{32,	9,  },	{32,	-8, },	{19,	17, },
		{38,	-17,},	{31,	19, },	{37,	-6, },	{31,	25, },
		{33,	-11,},	{26,	27, },	{35,	0,  },	{36,	29, },
		{40,	-15,},	{26,	30, },	{30,	10, },	{24,	33, },
		{41,	-6, },	{37,	20, },	{28,	18, },	{34,	15, },
		{38,	1,  },	{28,	34, },	{26,	25, },	{30,	20, },
		{41,	17, },	{17,	70, },	{29,	41, },	{22,	73, },
		{30,	-6, },	{1,		67, },	{0,		75, },	{20,	34, },
		{27,	3,  },	{5,		59, },	{2,		72, },	{19,	31, },
		{26,	22, },	{9,		67, },	{8,		77, },	{27,	44, },
		{37,	-16,},	{16,	30, },	{14,	35, },	{19,	16, },
		{35,	-4, },	{18,	32, },	{18,	31, },	{15,	36, },
		{38,	-8, },	{18,	35, },	{17,	35, },	{15,	36, },
		{38,	-3, },	{22,	29, },	{21,	30, },	{21,	28, },
		{37,	3,  },	{24,	31, },	{17,	45, },	{25,	21, },
		{38,	5,  },	{23,	38, },	{20,	42, },	{30,	20, },
		{42,	0,  },	{18,	43, },	{18,	45, },	{31,	12, },
		{35,	16, },	{20,	41, },	{27,	26, },	{27,	16, },
		{39,	22, },	{11,	63, },	{16,	54, },	{24,	42, },
		{14,	48, },	{9,		59, },	{7,		66, },	{0,		93, },
		{27,	37, },	{9,		64, },	{16,	56, },	{14,	56, },
		{21,	60, },	{-1,	94, },	{11,	73, },	{15,	57, },
		{12,	68, },	{-2,	89, },	{10,	67, },	{26,	38, },
		{2,		97, },	{-9,	108,},	{-10,	116,},	{-24,	127,},
};
mn table9_21[] = {	//227..275
/*227*/	{-3,	71, },	{-6,	76,	},	{-23,	112,},	{-24,	115,},
/*228*/	{-6,	42, },	{-2,	44,	},	{-15,	71, },	{-22,	82, },
/*229*/	{-5,	50, },	{0,		45,	},	{-7,	61, },	{-9,	62, },
/*230*/	{-3,	54, },	{0,		52,	},	{0,		53, },	{0,		53, },
/*231*/	{-2,	62, },	{-3,	64,	},	{-5,	66, },	{0,		59, },
/*232*/	{0,		58, },	{-2,	59,	},	{-11,	77, },	{-14,	85, },
/*233*/	{1,		63, },	{-4,	70,	},	{-9,	80, },	{-13,	89, },
/*234*/	{-2,	72, },	{-4,	75,	},	{-9,	84, },	{-13,	94, },
/*235*/	{-1,	74, },	{-8,	82,	},	{-10,	87, },	{-11,	92, },
/*236*/	{-9,	91, },	{-17,	102,},	{-34,	127,},	{-29,	127,},
/*237*/	{-5,	67, },	{-9,	77,	},	{-21,	101,},	{-21,	100,},
/*238*/	{-5,	27, },	{3,		24,	},	{-3,	39, },	{-14,	57, },
/*239*/	{-3,	39, },	{0,		42,	},	{-5,	53, },	{-12,	67, },
/*240*/	{-2,	44, },	{0,		48,	},	{-7,	61, },	{-11,	71, },
/*241*/	{0,		46, },	{0,		55,	},	{-11,	75, },	{-10,	77, },
/*242*/	{-16,	64, },	{-6,	59,	},	{-15,	77, },	{-21,	85, },
/*243*/	{-8,	68, },	{-7,	71,	},	{-17,	91, },	{-16,	88, },
/*244*/	{-10,	78, },	{-12,	83,	},	{-25,	107,},	{-23,	104,},
/*245*/	{-6,	77, },	{-11,	87,	},	{-25,	111,},	{-15,	98, },
/*246*/	{-10,	86, },	{-30,	119,},	{-28,	122,},	{-37,	127,},
/*247*/	{-12,	92, },	{1,		58,	},	{-11,	76, },	{-10,	82, },
/*248*/	{-15,	55, },	{-3,	29,	},	{-10,	44, },	{-8,	48, },
/*249*/	{-10,	60, },	{-1,	36,	},	{-10,	52, },	{-8,	61, },
/*250*/	{-6,	62, },	{1,		38,	},	{-10,	57, },	{-8,	66, },
/*251*/	{-4,	65, },	{2,		43,	},	{-9,	58, },	{-7,	70, },
		{-12,	73, },	{-6,	55, },	{-16,	72, },	{-14,	75, },
		{-8,	76, },	{0,		58, },	{-7,	69, },	{-10,	79, },
		{-7,	80, },	{0,		64, },	{-4,	69, },	{-9,	83, },
		{-9,	88, },	{-3,	74, },	{-5,	74, },	{-12,	92, },
		{-17,	110,},	{-10,	90, },	{-9,	86, },	{-18,	108,},
		{-11,	97, },	{0,		70, },	{2,		66, },	{-4,	79, },
		{-20,	84, },	{-4,	29, },	{-9,	34, },	{-22,	69, },
		{-11,	79, },	{5,		31, },	{1,		32, },	{-16,	75, },
		{-6,	73, },	{7,		42, },	{11,	31, },	{-2,	58, },
		{-4,	74, },	{1,		59, },	{5,		52, },	{1,		58, },
		{-13,	86, },	{-2,	58, },	{-2,	55, },	{-13,	78, },
		{-13,	96, },	{-3,	72, },	{-2,	67, },	{-9,	83, },
		{-11,	97, },	{-3,	81, },	{0,		73, },	{-4,	81, },
		{-19,	117,},	{-11,	97, },	{-8,	89, },	{-13,	99, },
		{-8,	78, },	{0,		58, },	{3,		52, },	{-13,	81, },
		{-5,	33, },	{8,		5,  },	{7,		4,  },	{-6,	38, },
		{-4,	48, },	{10,	14, },	{10,	8,  },	{-13,	62, },
		{-2,	53, },	{14,	18, },	{17,	8,  },	{-6,	58, },
		{-3,	62, },	{13,	27, },	{16,	19, },	{-2,	59, },
		{-13,	71, },	{2,		40, },	{3,		37, },	{-16,	73, },
		{-10,	79, },	{0,		58, },	{-1,	61, },	{-10,	76, },
		{-12,	86, },	{-3,	70, },	{-5,	73, },	{-13,	86, },
		{-13,	90, },	{-6,	79, },	{-1,	70, },	{-9,	83, },
		{-14,	97, },	{-8,	85, },	{-4,	78, },	{-10,	87, },
};
mn table9_22[] = {	//277..337
/*277*/	{-6,	93, },	{-13,	106,},	{-21,	126,},	{-22,	127,},
/*278*/	{-6,	84, },	{-16,	106,},	{-23,	124,},	{-25,	127,},
/*279*/	{-8,	79, },	{-10,	87,	},	{-20,	110,},	{-25,	120,},
/*280*/	{0,		66, },	{-21,	114,},	{-26,	126,},	{-27,	127,},
/*281*/	{-1,	71, },	{-18,	110,},	{-25,	124,},	{-19,	114,},
/*282*/	{0,		62, },	{-14,	98,	},	{-17,	105,},	{-23,	117,},
/*283*/	{-2,	60, },	{-22,	110,},	{-27,	121,},	{-25,	118,},
/*284*/	{-2,	59, },	{-21,	106,},	{-27,	117,},	{-26,	117,},
/*285*/	{-5,	75, },	{-18,	103,},	{-17,	102,},	{-24,	113,},
/*286*/	{-3,	62, },	{-21,	107,},	{-26,	117,},	{-28,	118,},
/*287*/	{-4,	58, },	{-23,	108,},	{-27,	116,},	{-31,	120,},
/*288*/	{-9,	66, },	{-26,	112,},	{-33,	122,},	{-37,	124,},
/*289*/	{-1,	79, },	{-10,	96,	},	{-10,	95, },	{-10,	94, },
/*290*/	{0,		71, },	{-12,	95,	},	{-14,	100,},	{-15,	102,},
/*291*/	{3,		68, },	{-5,	91,	},	{-8,	95, },	{-10,	99, },
/*292*/	{10,	44, },	{-9,	93,	},	{-17,	111,},	{-13,	106,},
/*293*/	{-7,	62, },	{-22,	94,	},	{-28,	114,},	{-50,	127,},
/*294*/	{15,	36, },	{-5,	86,	},	{-6,	89, },	{-5,	92, },
/*295*/	{14,	40, },	{9,		67,	},	{-2,	80, },	{17,	57, },
/*296*/	{16,	27, },	{-4,	80,	},	{-4,	82, },	{-5,	86, },
/*297*/	{12,	29, },	{-10,	85,	},	{-9,	85, },	{-13,	94, },
/*298*/	{1,		44, },	{-1,	70,	},	{-8,	81, },	{-12,	91, },
/*299*/	{20,	36, },	{7,		60,	},	{-1,	72, },	{-2,	77, },
/*300*/	{18,	32, },	{9,		58,	},	{5,		64, },	{0,		71, },
/*301*/	{5,		42, },	{5,		61,	},	{1,		67, },	{-1,	73, },
/*302*/	{1,		48, },	{12,	50,	},	{9,		56, },	{4,		64, },
/*303*/	{10,	62, },	{15,	50,	},	{0,		69, },	{-7,	81, },
/*304*/	{17,	46, },	{18,	49,	},	{1,		69, },	{5,		64, },
/*305*/	{9,		64, },	{17,	54,	},	{7,		69, },	{15,	57, },
/*306*/	{-12,	104,},	{10,	41,	},	{-7,	69, },	{1,		67, },
/*307*/	{-11,	97, },	{7,		46,	},	{-6,	67, },	{0,		68, },
		{-16,	96, },	{-1,	51, },	{-16,	77, },	{-10,	67, },
		{-7,	88, },	{7,		49, },	{-2,	64, },	{1,		68, },
		{-8,	85, },	{8,		52, },	{2,		61, },	{0,		77, },
		{-7,	85, },	{9,		41, },	{-6,	67, },	{2,		64, },
		{-9,	85, },	{6,		47, },	{-3,	64, },	{0,		68, },
		{-13,	88, },	{2,		55, },	{2,		57, },	{-5,	78, },
		{4,		66, },	{13,	41, },	{-3,	65, },	{7,		55, },
		{-3,	77, },	{10,	44, },	{-3,	66, },	{5,		59, },
		{-3,	76, },	{6,		50, },	{0,		62, },	{2,		65, },
		{-6,	76, },	{5,		53, },	{9,		51, },	{14,	54, },
		{10,	58, },	{13,	49, },	{-1,	66, },	{15,	44, },
		{-1,	76, },	{4,		63, },	{-2,	71, },	{5,		60, },
		{-1,	83, },	{6,		64, },	{-2,	75, },	{2,		70, },
		{-7,	99, },	{-2,	69, },	{-1,	70, },	{-2,	76, },
		{-14,	95, },	{-2,	59, },	{-9,	72, },	{-18,	86, },
		{2,		95, },	{6,		70, },	{14,	60, },	{12,	70, },
		{0,		76, },	{10,	44, },	{16,	37, },	{5,		64, },
		{-5,	74, },	{9,		31, },	{0,		47, },	{-12,	70, },
		{0,		70, },	{12,	43, },	{18,	35, },	{11,	55, },
		{-11,	75, },	{3,		53, },	{11,	37, },	{5,		56, },
		{1,		68, },	{14,	34, },	{12,	41, },	{0,		69, },
		{0,		65, },	{10,	38, },	{10,	41, },	{2,		65, },
		{-14,	73, },	{-3,	52, },	{2,		48, },	{-6,	74, },
		{3,		62, },	{13,	40, },	{12,	41, },	{5,		54, },
		{4,		62, },	{17,	32, },	{13,	41, },	{7,		54, },
		{-1,	68, },	{7,		44, },	{0,		59, },	{-6,	76, },
		{-13,	75, },	{7,		38, },	{3,		50, },	{-11,	82, },
		{11,	55, },	{13,	50, },	{19,	40, },	{-2,	77, },
		{5,		64, },	{10,	57, },	{3,		66, },	{-2,	77, },
		{12,	70, },	{26,	43, },	{18,	50, },	{25,	42, },
};
mn table9_23[] = {	//338..398
/*338*/	{15,	6,  },	{14,	11,	},	{19,	-6, },	{17,	-13,},
/*339*/	{6,		19, },	{11,	14,	},	{18,	-6, },	{16,	-9, },
/*340*/	{7,		16, },	{9,		11,	},	{14,	0,  },	{17,	-12,},
/*341*/	{12,	14, },	{18,	11,	},	{26,	-12,},	{27,	-21,},
/*342*/	{18,	13, },	{21,	9,	},	{31,	-16,},	{37,	-30,},
/*343*/	{13,	11, },	{23,	-2,	},	{33,	-25,},	{41,	-40,},
/*344*/	{13,	15, },	{32,	-15,},	{33,	-22,},	{42,	-41,},
/*345*/	{15,	16, },	{32,	-15,},	{37,	-28,},	{48,	-47,},
/*346*/	{12,	23, },	{34,	-21,},	{39,	-30,},	{39,	-32,},
/*347*/	{13,	23, },	{39,	-23,},	{42,	-30,},	{46,	-40,},
/*348*/	{15,	20, },	{42,	-33,},	{47,	-42,},	{52,	-51,},
/*349*/	{14,	26, },	{41,	-31,},	{45,	-36,},	{46,	-41,},
/*350*/	{14,	44, },	{46,	-28,},	{49,	-34,},	{52,	-39,},
/*351*/	{17,	40, },	{38,	-12,},	{41,	-17,},	{43,	-19,},
/*352*/	{17,	47, },	{21,	29,	},	{32,	9,  },	{32,	11, },
/*353*/	{24,	17, },	{45,	-24,},	{69,	-71,},	{61,	-55,},
/*354*/	{21,	21, },	{53,	-45,},	{63,	-63,},	{56,	-46,},
/*355*/	{25,	22, },	{48,	-26,},	{66,	-64,},	{62,	-50,},
/*356*/	{31,	27, },	{65,	-43,},	{77,	-74,},	{81,	-67,},
/*357*/	{22,	29, },	{43,	-19,},	{54,	-39,},	{45,	-20,},
/*358*/	{19,	35, },	{39,	-10,},	{52,	-35,},	{35,	-2, },
/*359*/	{14,	50, },	{30,	9,	},	{41,	-10,},	{28,	15, },
/*360*/	{10,	57, },	{18,	26,	},	{36,	0,  },	{34,	1,  },
/*361*/	{7,		63, },	{20,	27,	},	{40,	-1, },	{39,	1,  },
/*362*/	{-2,	77, },	{0,		57,	},	{30,	14, },	{30,	17, },
/*363*/	{-4,	82, },	{-14,	82,	},	{28,	26, },	{20,	38, },
/*364*/	{-3,	94, },	{-5,	75,	},	{23,	37, },	{18,	45, },
/*365*/	{9,		69, },	{-19,	97,	},	{12,	55, },	{15,	54, },
/*366*/	{-12,	109,},	{-35,	125,},	{11,	65, },	{0,		79, },
/*367*/	{36,	-35,},	{27,	0,	},	{37,	-33,},	{36,	-16,},
/*368*/	{36,	-34,},	{28,	0,	},	{39,	-36,},	{37,	-14,},
		{32,	-26,},	{31,	-4, },	{40,	-37,},	{37,	-17,},
		{37,	-30,},	{27,	6,  },	{38,	-30,},	{32,	1 , },
		{44,	-32,},	{34,	8,  },	{46,	-33,},	{34,	15, },
		{34,	-18,},	{30,	10, },	{42,	-30,},	{29,	15, },
		{34,	-15,},	{24,	22, },	{40,	-24,},	{24,	25, },
		{40,	-15,},	{33,	19, },	{49,	-29,},	{34,	22, },
		{33,	-7, },	{22,	32, },	{38,	-12,},	{31,	16, },
		{35,	-5, },	{26,	31, },	{40,	-10,},	{35,	18, },
		{33,	0,  },	{21,	41, },	{38,	-3, },	{31,	28, },
		{38,	2,  },	{26,	44, },	{46,	-5, },	{33,	41, },
		{33,	13, },	{23,	47, },	{31,	20, },	{36,	28, },
		{23,	35, },	{16,	65, },	{29,	30, },	{27,	47, },
		{13,	58, },	{14,	71, },	{25,	44, },	{21,	62, },
		{29,	-3, },	{8,		60, },	{12,	48, },	{18,	31, },
		{26,	0,  },	{6,		63, },	{11,	49, },	{19,	26, },
		{22,	30, },	{17,	65, },	{26,	45, },	{36,	24, },
		{31,	-7, },	{21,	24, },	{22,	22, },	{24,	23, },
		{35,	-15,},	{23,	20, },	{23,	22, },	{27,	16, },
		{34,	-3, },	{26,	23, },	{27,	21, },	{24,	30, },
		{34,	3,  },	{27,	32, },	{33,	20, },	{31,	29, },
		{36,	-1, },	{28,	23, },	{26,	28, },	{22,	41, },
		{34,	5,  },	{28,	24, },	{30,	24, },	{22,	42, },
		{32,	11, },	{23,	40, },	{27,	34, },	{16,	60, },
		{35,	5,  },	{24,	32, },	{18,	42, },	{15,	52, },
		{34,	12, },	{28,	29, },	{25,	39, },	{14,	60, },
		{39,	11, },	{23,	42, },	{18,	50, },	{3,		78, },
		{30,	29, },	{19,	57, },	{12,	70, },	{-16,	123,},
		{34,	26, },	{22,	53, },	{21,	54, },	{21,	53, },
		{29,	39, },	{22,	61, },	{14,	71, },	{22,	56, },
		{19,	66, },	{11,	86, },	{11,	83, },	{25,	61, },
};
mn table9_24[] = {	//402..459
/*402*/	{-17,	120,},	{-4,	79,	},	{-5,	85, },	{-3,	78, },
/*403*/	{-20,	112,},	{-7,	71,	},	{-6,	81, },	{-8,	74, },
/*404*/	{-18,	114,},	{-5,	69,	},	{-10,	77, },	{-9,	72, },
/*405*/	{-11,	85, },	{-9,	70,	},	{-7,	81, },	{-10,	72, },
/*406*/	{-15,	92, },	{-8,	66,	},	{-17,	80, },	{-18,	75, },
/*407*/	{-14,	89, },	{-10,	68,	},	{-18,	73, },	{-12,	71, },
/*408*/	{-26,	71, },	{-19,	73,	},	{-4,	74, },	{-11,	63, },
/*409*/	{-15,	81, },	{-12,	69,	},	{-10,	83, },	{-5,	70, },
/*410*/	{-14,	80, },	{-16,	70,	},	{-9,	71, },	{-17,	75, },
/*411*/	{0,		68, },	{-15,	67,	},	{-9,	67, },	{-14,	72, },
/*412*/	{-14,	70, },	{-20,	62,	},	{-1,	61, },	{-16,	67, },
/*413*/	{-24,	56, },	{-19,	70,	},	{-8,	66, },	{-8,	53, },
/*414*/	{-23,	68, },	{-16,	66,	},	{-14,	66, },	{-14,	59, },
/*415*/	{-24,	50, },	{-22,	65,	},	{0,		59, },	{-9,	52, },
/*416*/	{-11,	74, },	{-20,	63,	},	{2,		59, },	{-11,	68, },
/*417*/	{23,	-13,},	{9,		-2,	},	{17,	-10,},	{9,		-2, },
/*418*/	{26,	-13,},	{26,	-9,	},	{32,	-13,},	{30,	-10,},
/*419*/	{40,	-15,},	{33,	-9,	},	{42,	-9, },	{31,	-4, },
/*420*/	{49,	-14,},	{39,	-7,	},	{49,	-5, },	{33,	-1, },
/*421*/	{44,	3,  },	{41,	-2,	},	{53,	0,  },	{33,	7,  },
/*422*/	{45,	6,  },	{45,	3,	},	{64,	3,  },	{31,	12, },
/*423*/	{44,	34, },	{49,	9,	},	{68,	10, },	{37,	23, },
/*424*/	{33,	54, },	{45,	27,	},	{66,	27, },	{31,	38, },
/*425*/	{19,	82, },	{36,	59,	},	{47,	57, },	{20,	64, },
/*426*/	{-3,	75, },	{-6,	66,	},	{-5,	71, },	{-9,	71, },
/*427*/	{-1,	23, },	{-7,	35,	},	{0,		24, },	{-7,	37, },
/*428*/	{1,		34, },	{-7,	42,	},	{-1,	36, },	{-8,	44, },
/*429*/	{1,		43, },	{-8,	45,	},	{-2,	42, },	{-11,	49, },
/*430*/	{0,		54, },	{-5,	48,	},	{-2,	52, },	{-10,	56, },
		{-2,	55, },	{-12,	56, },	{-9,	57, },	{-12,	59, },
		{0,		61, },	{-6,	60, },	{-6,	63, },	{-8,	63, },
		{1,		64, },	{-5,	62, },	{-4,	65, },	{-9,	67, },
		{0,		68, },	{-8,	66, },	{-4,	67, },	{-6,	68, },
		{-9,	92, },	{-8,	76, },	{-7,	82, },	{-10,	79, },
		{-14,	106,},	{-5,	85, },	{-3,	81, },	{-3,	78, },
		{-13,	97, },	{-6,	81, },	{-3,	76, },	{-8,	74, },
		{-15,	90, },	{-10,	77, },	{-7,	72, },	{-9,	72, },
		{-12,	90, },	{-7,	81, },	{-6,	78, },	{-10,	72, },
		{-18,	88, },	{-17,	80, },	{-12,	72, },	{-18,	75, },
		{-10,	73, },	{-18,	73, },	{-14,	68, },	{-12,	71, },
		{-9,	79, },	{-4,	74, },	{-3,	70, },	{-11,	63, },
		{-14,	86, },	{-10,	83, },	{-6,	76, },	{-5,	70, },
		{-10,	73, },	{-9,	71, },	{-5,	66, },	{-17,	75, },
		{-10,	70, },	{-9,	67, },	{-5,	62, },	{-14,	72, },
		{-10,	69, },	{-1,	61, },	{0,		57, },	{-16,	67, },
		{-5,	66, },	{-8,	66, },	{-4,	61, },	{-8,	53, },
		{-9,	64, },	{-14,	66, },	{-9,	60, },	{-14,	59, },
		{-5,	58, },	{0,		59, },	{1,		54, },	{-9,	52, },
		{2,		59, },	{2,		59, },	{2,		58, },	{-11,	68, },
		{21,	-10,},	{21,	-13,},	{17,	-10,},	{9,		-2, },
		{24,	-11,},	{33,	-14,},	{32,	-13,},	{30,	-10,},
		{28,	-8, },	{39,	-7, },	{42,	-9, },	{31,	-4, },
		{28,	-1, },	{46,	-2, },	{49,	-5, },	{33,	-1, },
		{29,	3,  },	{51,	2,  },	{53,	0,  },	{33,	7 , },
		{29,	9,  },	{60,	6,  },	{64,	3,  },	{31,	12, },
		{35,	20, },	{61,	17, },	{68,	10, },	{37,	23, },
		{29,	36, },	{55,	34, },	{66,	27, },	{31,	38, },
		{14,	67, },	{42,	62, },	{47,	57, },	{20,	64, },
};
mn table9_25[] = {	//485..571
/*460*/	{-17,	123,},	{-7,	92,	},	{0,		80, },	{11,	80, },
/*461*/	{-12,	115,},	{-5,	89,	},	{-5,	89, },	{5,		76, },
/*462*/	{-16,	122,},	{-7,	96,	},	{-7,	94, },	{2,		84, },
/*463*/	{-11,	115,},	{-13,	108,},	{-4,	92, },	{5,		78, },
/*464*/	{-12,	63, },	{-3,	46,	},	{0,		39, },	{-6,	55, },
/*465*/	{-2,	68, },	{-1,	65,	},	{0,		65, },	{4,		61, },
/*466*/	{-15,	84, },	{-1,	57,	},	{-15,	84, },	{-14,	83, },
/*467*/	{-13,	104,},	{-9,	93,	},	{-35,	127,},	{-37,	127,},
/*468*/	{-3,	70, },	{-3,	74,	},	{-2,	73, },	{-5,	79, },
/*469*/	{-8,	93, },	{-9,	92,	},	{-12,	104,},	{-11,	104,},
/*470*/	{-10,	90, },	{-8,	87,	},	{-9,	91, },	{-11,	91, },
/*471*/	{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
		{-17,	123,},	{-7,	92, },	{0,		80, },	{11,	80, },
		{-12,	115,},	{-5,	89, },	{-5,	89, },	{5,		76, },
		{-16,	122,},	{-7,	96, },	{-7,	94, },	{2,		84, },
		{-11,	115,},	{-13,	108,},	{-4,	92, },	{5,		78, },
		{-12,	63, },	{-3,	46, },	{0,		39, },	{-6,	55, },
		{-2,	68, },	{-1,	65, },	{0,		65, },	{4,		61, },
		{-15,	84, },	{-1,	57, },	{-15,	84, },	{-14,	83, },
		{-13,	104,},	{-9,	93, },	{-35,	127,},	{-37,	127,},
		{-3,	70, },	{-3,	74, },	{-2,	73, },	{-5,	79, },
		{-8,	93, },	{-9,	92, },	{-12,	104,},	{-11,	104,},
		{-10,	90, },	{-8,	87, },	{-9,	91, },	{-11,	91, },
		{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
};
mn table9_26[] = {	//484..571
/*484*/	{-7,	93, },	{-2,	85,	},	{-13,	103,},	{-4,	86, },
/*485*/	{-11,	87, },	{-6,	78,	},	{-13,	91, },	{-12,	88, },
/*486*/	{-3,	77, },	{-1,	75,	},	{-9,	89, },	{-5,	82, },
/*487*/	{-5,	71, },	{-7,	77,	},	{-14,	92, },	{-3,	72, },
/*488*/	{-4,	63, },	{2,		54,	},	{-8,	76, },	{-4,	67, },
/*489*/	{-4,	68, },	{5,		50,	},	{-12,	87, },	{-8,	72, },
/*490*/	{-12,	84, },	{-3,	68,	},	{-23,	110,},	{-16,	89, },
/*491*/	{-7,	62, },	{1,		50,	},	{-24,	105,},	{-9,	69, },
/*492*/	{-7,	65, },	{6,		42,	},	{-10,	78, },	{-1,	59, },
/*493*/	{8,		61, },	{-4,	81,	},	{-20,	112,},	{5,		66, },
/*494*/	{5,		56, },	{1,		63,	},	{-17,	99, },	{4,		57, },
/*495*/	{-2,	66, },	{-4,	70,	},	{-78,	127,},	{-4,	71, },
/*496*/	{1,		64, },	{0,		67,	},	{-70,	127,},	{-2,	71, },
/*497*/	{0,		61, },	{2,		57,	},	{-50,	127,},	{2,		58, },
/*498*/	{-2,	78, },	{-2,	76,	},	{-46,	127,},	{-1,	74, },
/*499*/	{1,		50, },	{11,	35,	},	{-4,	66, },	{-4,	44, },
/*500*/	{7,		52, },	{4,		64,	},	{-5,	78, },	{-1,	69, },
/*501*/	{10,	35, },	{1,		61,	},	{-4,	71, },	{0,		62, },
/*502*/	{0,		44, },	{11,	35,	},	{-8,	72, },	{-7,	51, },
/*503*/	{11,	38, },	{18,	25,	},	{2,		59, },	{-4,	47, },
/*504*/	{1,		45, },	{12,	24,	},	{-1,	55, },	{-6,	42, },
/*505*/	{0,		46, },	{13,	29,	},	{-7,	70, },	{-3,	41, },
/*506*/	{5,		44, },	{13,	36,	},	{-6,	75, },	{-6,	53, },
/*507*/	{31,	17, },	{-10,	93,	},	{-8,	89, },	{8,		76, },
/*508*/	{1,		51, },	{-7,	73,	},	{-34,	119,},	{-9,	78, },
/*509*/	{7,		50, },	{-2,	73,	},	{-3,	75, },	{-11,	83, },
/*510*/	{28,	19, },	{13,	46,	},	{32,	20, },	{9,		52, },
/*511*/	{16,	33, },	{9,		49,	},	{30,	22, },	{0,		67, },
/*512*/	{14,	62, },	{-7,	100,},	{-44,	127,},	{-5,	90, },
/*513*/	{-13,	108,},	{9,		53,	},	{0,		54, },	{1,		67, },
/*514*/	{-15,	100,},	{2,		53,	},	{-5,	61, },	{-15,	72, },
/*515*/	{-13,	101,},	{5,		53,	},	{0,		58, },	{-5,	75, },
/*516*/	{-13,	91, },	{-2,	61,	},	{-1,	60, },	{-8,	80, },
/*517*/	{-12,	94, },	{0,		56,	},	{-3,	61, },	{-21,	83, },
/*518*/	{-10,	88, },	{0,		56,	},	{-8,	67, },	{-21,	64, },
/*519*/	{-16,	84, },	{-13,	63,	},	{-25,	84, },	{-13,	31, },
/*520*/	{-10,	86, },	{-5,	60,	},	{-14,	74, },	{-25,	64, },
/*521*/	{-7,	83, },	{-1,	62,	},	{-5,	65, },	{-29,	94, },
/*522*/	{-13,	87, },	{4,		57,	},	{5,		52, },	{9,		75, },
/*523*/	{-19,	94, },	{-6,	69,	},	{2,		57, },	{17,	63, },
/*524*/	{1,		70, },	{4,		57,	},	{0,		61, },	{-8,	74, },
/*525*/	{0,		72, },	{14,	39,	},	{-9,	69, },	{-5,	35, },
/*526*/	{-5,	74, },	{4,		51,	},	{-11,	70, },	{-2,	27, },
/*527*/	{18,	59, },	{13,	68,	},	{18,	55, },	{13,	91, },
		{-7,	93, },	{-2,	85, },	{-13,	103,},	{-4,	86, },
		{-11,	87, },	{-6,	78, },	{-13,	91, },	{-12,	88, },
		{-3,	77, },	{-1,	75, },	{-9,	89, },	{-5,	82, },
		{-5,	71, },	{-7,	77, },	{-14,	92, },	{-3,	72, },
		{-4,	63, },	{2,		54, },	{-8,	76, },	{-4,	67, },
		{-4,	68, },	{5,		50, },	{-12,	87, },	{-8,	72, },
		{-12,	84, },	{-3,	68, },	{-23,	110,},	{-16,	89, },
		{-7,	62, },	{1,		50, },	{-24,	105,},	{-9,	69, },
		{-7,	65, },	{6,		42, },	{-10,	78, },	{-1,	59, },
		{8,		61, },	{-4,	81, },	{-20,	112,},	{5,		66, },
		{5,		56, },	{1,		63, },	{-17,	99, },	{4,		57, },
		{-2,	66, },	{-4,	70, },	{-78,	127,},	{-4,	71, },
		{1,		64, },	{0,		67, },	{-70,	127,},	{-2,	71, },
		{0,		61, },	{2,		57, },	{-50,	127,},	{2,		58, },
		{-2,	78, },	{-2,	76, },	{-46,	127,},	{-1,	74, },
		{1,		50, },	{11,	35, },	{-4,	66, },	{-4,	44, },
		{7,		52, },	{4,		64, },	{-5,	78, },	{-1,	69, },
		{10,	35, },	{1,		61, },	{-4,	71, },	{0,		62, },
		{0,		44, },	{11,	35, },	{-8,	72, },	{-7,	51, },
		{11,	38, },	{18,	25, },	{2,		59, },	{-4,	47, },
		{1,		45, },	{12,	24, },	{-1,	55, },	{-6,	42, },
		{0,		46, },	{13,	29, },	{-7,	70, },	{-3,	41, },
		{5,		44, },	{13,	36, },	{-6,	75, },	{-6,	53, },
		{31,	17, },	{-10,	93, },	{-8,	89, },	{8,		76, },
		{1,		51, },	{-7,	73, },	{-34,	119,},	{-9,	78, },
		{7,		50, },	{-2,	73, },	{-3,	75, },	{-11,	83, },
		{28,	19, },	{13,	46, },	{32,	20, },	{9,		52, },
		{16,	33, },	{9,		49, },	{30,	22, },	{0,		67, },
		{14,	62, },	{-7,	100,},	{-44,	127,},	{-5,	90, },
		{-13,	108,},	{9,		53, },	{0,		54, },	{1,		67, },
		{-15,	100,},	{2,		53, },	{-5,	61, },	{-15,	72, },
		{-13,	101,},	{5,		53, },	{0,		58, },	{-5,	75, },
		{-13,	91, },	{-2,	61, },	{-1,	60, },	{-8,	80, },
		{-12,	94, },	{0,		56, },	{-3,	61, },	{-21,	83, },
		{-10,	88, },	{0,		56, },	{-8,	67, },	{-21,	64, },
		{-16,	84, },	{-13,	63, },	{-25,	84, },	{-13,	31, },
		{-10,	86, },	{-5,	60, },	{-14,	74, },	{-25,	64, },
		{-7,	83, },	{-1,	62, },	{-5,	65, },	{-29,	94, },
		{-13,	87, },	{4,		57, },	{5,		52, },	{9,		75, },
		{-19,	94, },	{-6,	69, },	{2,		57, },	{17,	63, },
		{1,		70, },	{4,		57, },	{0,		61, },	{-8,	74, },
		{0,		72, },	{14,	39, },	{-9,	69, },	{-5,	35, },
		{-5,	74, },	{4,		51, },	{-11,	70, },	{-2,	27, },
		{18,	59, },	{13,	68, },	{18,	55, },	{13,	91, },
};
mn table9_27[] = {	//572..659
/*572*/	{24,	0,  },	{11,	28,	},	{4,		45, },	{4,		39, },
/*573*/	{15,	9,  },	{2,		40,	},	{10,	28, },	{0,		42, },
/*574*/	{8,		25, },	{3,		44,	},	{10,	31, },	{7,		34, },
/*575*/	{13,	18, },	{0,		49,	},	{33,	-11,},	{11,	29, },
/*576*/	{15,	9,  },	{0,		46,	},	{52,	-43,},	{8,		31, },
/*577*/	{13,	19, },	{2,		44,	},	{18,	15, },	{6,		37, },
/*578*/	{10,	37, },	{2,		51,	},	{28,	0,  },	{7,		42, },
/*579*/	{12,	18, },	{0,		47,	},	{35,	-22,},	{3,		40, },
/*580*/	{6,		29, },	{4,		39,	},	{38,	-25,},	{8,		33, },
/*581*/	{20,	33, },	{2,		62,	},	{34,	0,  },	{13,	43, },
/*582*/	{15,	30, },	{6,		46,	},	{39,	-18,},	{13,	36, },
/*583*/	{4,		45, },	{0,		54,	},	{32,	-12,},	{4,		47, },
/*584*/	{1,		58, },	{3,		54,	},	{102,	-94,},	{3,		55, },
/*585*/	{0,		62, },	{2,		58,	},	{0,		0,  },	{2,		58, },
/*586*/	{7,		61, },	{4,		63,	},	{56,	-15,},	{6,		60, },
/*587*/	{12,	38, },	{6,		51,	},	{33,	-4, },	{8,		44, },
/*588*/	{11,	45, },	{6,		57,	},	{29,	10, },	{11,	44, },
/*589*/	{15,	39, },	{7,		53,	},	{37,	-5, },	{14,	42, },
/*590*/	{11,	42, },	{6,		52,	},	{51,	-29,},	{7,		48, },
/*591*/	{13,	44, },	{6,		55,	},	{39,	-9, },	{4,		56, },
/*592*/	{16,	45, },	{11,	45,	},	{52,	-34,},	{4,		52, },
/*593*/	{12,	41, },	{14,	36,	},	{69,	-58,},	{13,	37, },
/*594*/	{10,	49, },	{8,		53,	},	{67,	-63,},	{9,		49, },
/*595*/	{30,	34, },	{-1,	82,	},	{44,	-5, },	{19,	58, },
/*596*/	{18,	42, },	{7,		55,	},	{32,	7,  },	{10,	48, },
/*597*/	{10,	55, },	{-3,	78,	},	{55,	-29,},	{12,	45, },
/*598*/	{17,	51, },	{15,	46,	},	{32,	1,  },	{0,		69, },
/*599*/	{17,	46, },	{22,	31,	},	{0,		0,  },	{20,	33, },
/*600*/	{0,		89, },	{-1,	84,	},	{27,	36, },	{8,		63, },
/*601*/	{26,	-19,},	{25,	7,	},	{33,	-25,},	{35,	-18,},
/*602*/	{22,	-17,},	{30,	-7,	},	{34,	-30,},	{33,	-25,},
/*603*/	{26,	-17,},	{28,	3,	},	{36,	-28,},	{28,	-3, },
/*604*/	{30,	-25,},	{28,	4,	},	{38,	-28,},	{24,	10, },
/*605*/	{28,	-20,},	{32,	0,	},	{38,	-27,},	{27,	0,  },
/*606*/	{33,	-23,},	{34,	-1,	},	{34,	-18,},	{34,	-14,},
/*607*/	{37,	-27,},	{30,	6,	},	{35,	-16,},	{52,	-44,},
/*608*/	{33,	-23,},	{30,	6,	},	{34,	-14,},	{39,	-24,},
/*609*/	{40,	-28,},	{32,	9,	},	{32,	-8, },	{19,	17, },
/*610*/	{38,	-17,},	{31,	19,	},	{37,	-6, },	{31,	25, },
/*611*/	{33,	-11,},	{26,	27,	},	{35,	0,  },	{36,	29, },
/*612*/	{40,	-15,},	{26,	30,	},	{30,	10, },	{24,	33, },
/*613*/	{41,	-6, },	{37,	20,	},	{28,	18, },	{34,	15, },
/*614*/	{38,	1,  },	{28,	34,	},	{26,	25, },	{30,	20, },
/*615*/	{41,	17, },	{17,	70,	},	{29,	41, },	{22,	73, },
		{24,	0,  },	{11,	28, },	{4,		45, },	{4,		39, },
		{15,	9,  },	{2,		40, },	{10,	28, },	{0,		42, },
		{8,		25, },	{3,		44, },	{10,	31, },	{7,		34, },
		{13,	18, },	{0,		49, },	{33,	-11,},	{11,	29, },
		{15,	9,  },	{0,		46, },	{52,	-43,},	{8,		31, },
		{13,	19, },	{2,		44, },	{18,	15, },	{6,		37, },
		{10,	37, },	{2,		51, },	{28,	0,  },	{7,		42, },
		{12,	18, },	{0,		47, },	{35,	-22,},	{3,		40, },
		{6,		29, },	{4,		39, },	{38,	-25,},	{8,		33, },
		{20,	33, },	{2,		62, },	{34,	0,  },	{13,	43, },
		{15,	30, },	{6,		46, },	{39,	-18,},	{13,	36, },
		{4,		45, },	{0,		54, },	{32,	-12,},	{4,		47, },
		{1,		58, },	{3,		54, },	{102,	-94,},	{3,		55, },
		{0,		62, },	{2,		58, },	{0,		0,  },	{2,		58, },
		{7,		61, },	{4,		63, },	{56,	-15,},	{6,		60, },
		{12,	38, },	{6,		51, },	{33,	-4, },	{8,		44, },
		{11,	45, },	{6,		57, },	{29,	10, },	{11,	44, },
		{15,	39, },	{7,		53, },	{37,	-5, },	{14,	42, },
		{11,	42, },	{6,		52, },	{51,	-29,},	{7,		48, },
		{13,	44, },	{6,		55, },	{39,	-9, },	{4,		56, },
		{16,	45, },	{11,	45, },	{52,	-34,},	{4,		52, },
		{12,	41, },	{14,	36, },	{69,	-58,},	{13,	37, },
		{10,	49, },	{8,		53, },	{67,	-63,},	{9,		49, },
		{30,	34, },	{-1,	82, },	{44,	-5, },	{19,	58, },
		{18,	42, },	{7,		55, },	{32,	7,  },	{10,	48, },
		{10,	55, },	{-3,	78, },	{55,	-29,},	{12,	45, },
		{17,	51, },	{15,	46, },	{32,	1,  },	{0,		69, },
		{17,	46, },	{22,	31, },	{0,		0,  },	{20,	33, },
		{0,		89, },	{-1,	84, },	{27,	36, },	{8,		63, },
		{26,	-19,},	{25,	7,  },	{33,	-25,},	{35,	-18,},
		{22,	-17,},	{30,	-7, },	{34,	-30,},	{33,	-25,},
		{26,	-17,},	{28,	3,  },	{36,	-28,},	{28,	-3, },
		{30,	-25,},	{28,	4,  },	{38,	-28,},	{24,	10, },
		{28,	-20,},	{32,	0,  },	{38,	-27,},	{27,	0 , },
		{33,	-23,},	{34,	-1, },	{34,	-18,},	{34,	-14,},
		{37,	-27,},	{30,	6,  },	{35,	-16,},	{52,	-44,},
		{33,	-23,},	{30,	6,  },	{34,	-14,},	{39,	-24,},
		{40,	-28,},	{32,	9,  },	{32,	-8, },	{19,	17, },
		{38,	-17,},	{31,	19, },	{37,	-6, },	{31,	25, },
		{33,	-11,},	{26,	27, },	{35,	0,  },	{36,	29, },
		{40,	-15,},	{26,	30, },	{30,	10, },	{24,	33, },
		{41,	-6, },	{37,	20, },	{28,	18, },	{34,	15, },
		{38,	1,  },	{28,	34, },	{26,	25, },	{30,	20, },
		{41,	17, },	{17,	70, },	{29,	41, },	{22,	73, },
};
mn table9_28[] = {	//660..717
/*660*/	{-17,	120,},	{-4,	79,	},	{-5,	85, },	{-3,	78, },
/*661*/	{-20,	112,},	{-7,	71,	},	{-6,	81, },	{-8,	74, },
/*662*/	{-18,	114,},	{-5,	69,	},	{-10,	77, },	{-9,	72, },
/*663*/	{-11,	85, },	{-9,	70,	},	{-7,	81, },	{-10,	72, },
/*664*/	{-15,	92, },	{-8,	66,	},	{-17,	80, },	{-18,	75, },
/*665*/	{-14,	89, },	{-10,	68,	},	{-18,	73, },	{-12,	71, },
/*666*/	{-26,	71, },	{-19,	73,	},	{-4,	74, },	{-11,	63, },
/*667*/	{-15,	81, },	{-12,	69,	},	{-10,	83, },	{-5,	70, },
/*668*/	{-14,	80, },	{-16,	70,	},	{-9,	71, },	{-17,	75, },
/*669*/	{0,		68, },	{-15,	67,	},	{-9,	67, },	{-14,	72, },
/*670*/	{-14,	70, },	{-20,	62,	},	{-1,	61, },	{-16,	67, },
/*671*/	{-24,	56, },	{-19,	70,	},	{-8,	66, },	{-8,	53, },
/*672*/	{-23,	68, },	{-16,	66,	},	{-14,	66, },	{-14,	59, },
/*673*/	{-24,	50, },	{-22,	65,	},	{0,		59, },	{-9,	52, },
/*674*/	{-11,	74, },	{-20,	63,	},	{2,		59, },	{-11,	68, },
/*675*/	{-14,	106,},	{-5,	85,	},	{-3,	81, },	{-3,	78, },
/*676*/	{-13,	97, },	{-6,	81,	},	{-3,	76, },	{-8,	74, },
/*677*/	{-15,	90, },	{-10,	77,	},	{-7,	72, },	{-9,	72, },
/*678*/	{-12,	90, },	{-7,	81,	},	{-6,	78, },	{-10,	72, },
/*679*/	{-18,	88, },	{-17,	80,	},	{-12,	72, },	{-18,	75, },
/*680*/	{-10,	73, },	{-18,	73,	},	{-14,	68, },	{-12,	71, },
/*681*/	{-9,	79, },	{-4,	74,	},	{-3,	70, },	{-11,	63, },
/*682*/	{-14,	86, },	{-10,	83,	},	{-6,	76, },	{-5,	70, },
/*683*/	{-10,	73, },	{-9,	71,	},	{-5,	66, },	{-17,	75, },
/*684*/	{-10,	70, },	{-9,	67,	},	{-5,	62, },	{-14,	72, },
/*685*/	{-10,	69, },	{-1,	61,	},	{0,		57, },	{-16,	67, },
/*686*/	{-5,	66, },	{-8,	66,	},	{-4,	61, },	{-8,	53, },
/*687*/	{-9,	64, },	{-14,	66,	},	{-9,	60, },	{-14,	59, },
/*688*/	{-5,	58, },	{0,		59,	},	{1,		54, },	{-9,	52, },
		{2,		59, },	{2,		59, },	{2,		58, },	{-11,	68, },
		{23,	-13,},	{9,		-2, },	{17,	-10,},	{9,		-2, },
		{26,	-13,},	{26,	-9, },	{32,	-13,},	{30,	-10,},
		{40,	-15,},	{33,	-9, },	{42,	-9, },	{31,	-4, },
		{49,	-14,},	{39,	-7, },	{49,	-5, },	{33,	-1, },
		{44,	3,  },	{41,	-2, },	{53,	0,  },	{33,	7 , },
		{45,	6,  },	{45,	3,  },	{64,	3,  },	{31,	12, },
		{44,	34, },	{49,	9,  },	{68,	10, },	{37,	23, },
		{33,	54, },	{45,	27, },	{66,	27, },	{31,	38, },
		{19,	82, },	{36,	59, },	{47,	57, },	{20,	64, },
		{21,	-10,},	{21,	-13,},	{17,	-10,},	{9,		-2, },
		{24,	-11,},	{33,	-14,},	{32,	-13,},	{30,	-10,},
		{28,	-8, },	{39,	-7, },	{42,	-9, },	{31,	-4, },
		{28,	-1, },	{46,	-2, },	{49,	-5, },	{33,	-1, },
		{29,	3,  },	{51,	2,  },	{53,	0,  },	{33,	7 , },
		{29,	9,  },	{60,	6,  },	{64,	3,  },	{31,	12, },
		{35,	20, },	{61,	17, },	{68,	10, },	{37,	23, },
		{29,	36, },	{55,	34, },	{66,	27, },	{31,	38, },
		{14,	67, },	{42,	62, },	{47,	57, },	{20,	64, },
		{-3,	75, },	{-6,	66, },	{-5,	71, },	{-9,	71, },
		{-1,	23, },	{-7,	35, },	{0,		24, },	{-7,	37, },
		{1,		34, },	{-7,	42, },	{-1,	36, },	{-8,	44, },
		{1,		43, },	{-8,	45, },	{-2,	42, },	{-11,	49, },
		{0,		54, },	{-5,	48, },	{-2,	52, },	{-10,	56, },
		{-2,	55, },	{-12,	56, },	{-9,	57, },	{-12,	59, },
		{0,		61, },	{-6,	60, },	{-6,	63, },	{-8,	63, },
		{1,		64, },	{-5,	62, },	{-4,	65, },	{-9,	67, },
		{0,		68, },	{-8,	66, },	{-4,	67, },	{-6,	68, },
		{-9,	92, },	{-8,	76, },	{-7,	82, },	{-10,	79, },
};
mn table9_29[] = {	//718..775
/*718*/	{-17,	120,},	{-4,	79,	},	{-5,	85, },	{-3,	78, },
/*719*/	{-20,	112,},	{-7,	71,	},	{-6,	81, },	{-8,	74, },
/*720*/	{-18,	114,},	{-5,	69,	},	{-10,	77, },	{-9,	72, },
/*721*/	{-11,	85, },	{-9,	70,	},	{-7,	81, },	{-10,	72, },
/*722*/	{-15,	92, },	{-8,	66,	},	{-17,	80, },	{-18,	75, },
/*723*/	{-14,	89, },	{-10,	68,	},	{-18,	73, },	{-12,	71, },
/*724*/	{-26,	71, },	{-19,	73,	},	{-4,	74, },	{-11,	63, },
/*725*/	{-15,	81, },	{-12,	69,	},	{-10,	83, },	{-5,	70, },
/*726*/	{-14,	80, },	{-16,	70,	},	{-9,	71, },	{-17,	75, },
/*727*/	{0,		68, },	{-15,	67,	},	{-9,	67, },	{-14,	72, },
/*728*/	{-14,	70, },	{-20,	62,	},	{-1,	61, },	{-16,	67, },
/*729*/	{-24,	56, },	{-19,	70,	},	{-8,	66, },	{-8,	53, },
/*730*/	{-23,	68, },	{-16,	66,	},	{-14,	66, },	{-14,	59, },
/*731*/	{-24,	50, },	{-22,	65,	},	{0,		59, },	{-9,	52, },
/*732*/	{-11,	74, },	{-20,	63,	},	{2,		59, },	{-11,	68, },
/*733*/	{-14,	106,},	{-5,	85,	},	{-3,	81, },	{-3,	78, },
/*734*/	{-13,	97, },	{-6,	81,	},	{-3,	76, },	{-8,	74, },
/*735*/	{-15,	90, },	{-10,	77,	},	{-7,	72, },	{-9,	72, },
/*736*/	{-12,	90, },	{-7,	81,	},	{-6,	78, },	{-10,	72, },
/*737*/	{-18,	88, },	{-17,	80,	},	{-12,	72, },	{-18,	75, },
/*738*/	{-10,	73, },	{-18,	73,	},	{-14,	68, },	{-12,	71, },
/*739*/	{-9,	79, },	{-4,	74,	},	{-3,	70, },	{-11,	63, },
/*740*/	{-14,	86, },	{-10,	83,	},	{-6,	76, },	{-5,	70, },
/*741*/	{-10,	73, },	{-9,	71,	},	{-5,	66, },	{-17,	75, },
/*742*/	{-10,	70, },	{-9,	67,	},	{-5,	62, },	{-14,	72, },
/*743*/	{-10,	69, },	{-1,	61,	},	{0,		57, },	{-16,	67, },
/*744*/	{-5,	66, },	{-8,	66,	},	{-4,	61, },	{-8,	53, },
/*745*/	{-9,	64, },	{-14,	66,	},	{-9,	60, },	{-14,	59, },
/*746*/	{-5,	58, },	{0,		59,	},	{1,		54, },	{-9,	52, },
		{2,		59, },	{2,		59, },	{2,		58, },	{-11,	68, },
		{23,	-13,},	{9,		-2, },	{17,	-10,},	{9,		-2, },
		{26,	-13,},	{26,	-9, },	{32,	-13,},	{30,	-10,},
		{40,	-15,},	{33,	-9, },	{42,	-9, },	{31,	-4, },
		{49,	-14,},	{39,	-7, },	{49,	-5, },	{33,	-1, },
		{44,	3,  },	{41,	-2, },	{53,	0,  },	{33,	7 , },
		{45,	6,  },	{45,	3,  },	{64,	3,  },	{31,	12, },
		{44,	34, },	{49,	9,  },	{68,	10, },	{37,	23, },
		{33,	54, },	{45,	27, },	{66,	27, },	{31,	38, },
		{19,	82, },	{36,	59, },	{47,	57, },	{20,	64, },
		{21,	-10,},	{21,	-13,},	{17,	-10,},	{9,		-2, },
		{24,	-11,},	{33,	-14,},	{32,	-13,},	{30,	-10,},
		{28,	-8, },	{39,	-7, },	{42,	-9, },	{31,	-4, },
		{28,	-1, },	{46,	-2, },	{49,	-5, },	{33,	-1, },
		{29,	3,  },	{51,	2,  },	{53,	0,  },	{33,	7 , },
		{29,	9,  },	{60,	6,  },	{64,	3,  },	{31,	12, },
		{35,	20, },	{61,	17, },	{68,	10, },	{37,	23, },
		{29,	36, },	{55,	34, },	{66,	27, },	{31,	38, },
		{14,	67, },	{42,	62, },	{47,	57, },	{20,	64, },
		{-3,	75, },	{-6,	66, },	{-5,	71, },	{-9,	71, },
		{-1,	23, },	{-7,	35, },	{0,		24, },	{-7,	37, },
		{1,		34, },	{-7,	42, },	{-1,	36, },	{-8,	44, },
		{1,		43, },	{-8,	45, },	{-2,	42, },	{-11,	49, },
		{0,		54, },	{-5,	48, },	{-2,	52, },	{-10,	56, },
		{-2,	55, },	{-12,	56, },	{-9,	57, },	{-12,	59, },
		{0,		61, },	{-6,	60, },	{-6,	63, },	{-8,	63, },
		{1,		64, },	{-5,	62, },	{-4,	65, },	{-9,	67, },
		{0,		68, },	{-8,	66, },	{-4,	67, },	{-6,	68, },
		{-9,	92, },	{-8,	76, },	{-7,	82, },	{-10,	79, },
};
mn table9_30[] = {	//776..863
/*776*/	{-6,	93, },	{-13,	106,},	{-21,	126,},	{-22,	127,},
/*777*/	{-6,	84, },	{-16,	106,},	{-23,	124,},	{-25,	127,},
/*778*/	{-8,	79, },	{-10,	87,	},	{-20,	110,},	{-25,	120,},
/*779*/	{0,		66, },	{-21,	114,},	{-26,	126,},	{-27,	127,},
/*780*/	{-1,	71, },	{-18,	110,},	{-25,	124,},	{-19,	114,},
/*781*/	{0,		62, },	{-14,	98,	},	{-17,	105,},	{-23,	117,},
/*782*/	{-2,	60, },	{-22,	110,},	{-27,	121,},	{-25,	118,},
/*783*/	{-2,	59, },	{-21,	106,},	{-27,	117,},	{-26,	117,},
/*784*/	{-5,	75, },	{-18,	103,},	{-17,	102,},	{-24,	113,},
/*785*/	{-3,	62, },	{-21,	107,},	{-26,	117,},	{-28,	118,},
/*786*/	{-4,	58, },	{-23,	108,},	{-27,	116,},	{-31,	120,},
/*787*/	{-9,	66, },	{-26,	112,},	{-33,	122,},	{-37,	124,},
/*788*/	{-1,	79, },	{-10,	96,	},	{-10,	95, },	{-10,	94, },
/*789*/	{0,		71, },	{-12,	95,	},	{-14,	100,},	{-15,	102,},
/*790*/	{3,		68, },	{-5,	91,	},	{-8,	95, },	{-10,	99, },
/*791*/	{10,	44, },	{-9,	93,	},	{-17,	111,},	{-13,	106,},
/*792*/	{-7,	62, },	{-22,	94,	},	{-28,	114,},	{-50,	127,},
/*793*/	{15,	36, },	{-5,	86,	},	{-6,	89, },	{-5,	92, },
/*794*/	{14,	40, },	{9,		67,	},	{-2,	80, },	{17,	57, },
/*795*/	{16,	27, },	{-4,	80,	},	{-4,	82, },	{-5,	86, },
/*796*/	{12,	29, },	{-10,	85,	},	{-9,	85, },	{-13,	94, },
/*797*/	{1,		44, },	{-1,	70,	},	{-8,	81, },	{-12,	91, },
/*798*/	{20,	36, },	{7,		60,	},	{-1,	72, },	{-2,	77, },
/*799*/	{18,	32, },	{9,		58,	},	{5,		64, },	{0,		71, },
/*800*/	{5,		42, },	{5,		61,	},	{1,		67, },	{-1,	73, },
/*801*/	{1,		48, },	{12,	50,	},	{9,		56, },	{4,		64, },
/*802*/	{10,	62, },	{15,	50,	},	{0,		69, },	{-7,	81, },
/*803*/	{17,	46, },	{18,	49,	},	{1,		69, },	{5,		64, },
/*804*/	{9,		64, },	{17,	54,	},	{7,		69, },	{15,	57, },
/*805*/	{-12,	104,},	{10,	41,	},	{-7,	69, },	{1,		67, },
/*806*/	{-11,	97, },	{7,		46,	},	{-6,	67, },	{0,		68, },
/*807*/	{-16,	96, },	{-1,	51,	},	{-16,	77, },	{-10,	67, },
/*808*/	{-7,	88, },	{7,		49,	},	{-2,	64, },	{1,		68, },
/*809*/	{-8,	85, },	{8,		52,	},	{2,		61, },	{0,		77, },
/*810*/	{-7,	85, },	{9,		41,	},	{-6,	67, },	{2,		64, },
/*811*/	{-9,	85, },	{6,		47,	},	{-3,	64, },	{0,		68, },
/*812*/	{-13,	88, },	{2,		55,	},	{2,		57, },	{-5,	78, },
/*813*/	{4,		66, },	{13,	41,	},	{-3,	65, },	{7,		55, },
/*814*/	{-3,	77, },	{10,	44,	},	{-3,	66, },	{5,		59, },
/*815*/	{-3,	76, },	{6,		50,	},	{0,		62, },	{2,		65, },
/*816*/	{-6,	76, },	{5,		53,	},	{9,		51, },	{14,	54, },
/*817*/	{10,	58, },	{13,	49,	},	{-1,	66, },	{15,	44, },
/*818*/	{-1,	76, },	{4,		63,	},	{-2,	71, },	{5,		60, },
/*819*/	{-1,	83, },	{6,		64,	},	{-2,	75, },	{2,		70, },
		{-6,	93, },	{-13,	106,},	{-21,	126,},	{-22,	127,},
		{-6,	84, },	{-16,	106,},	{-23,	124,},	{-25,	127,},
		{-8,	79, },	{-10,	87, },	{-20,	110,},	{-25,	120,},
		{0,		66, },	{-21,	114,},	{-26,	126,},	{-27,	127,},
		{-1,	71, },	{-18,	110,},	{-25,	124,},	{-19,	114,},
		{0,		62, },	{-14,	98, },	{-17,	105,},	{-23,	117,},
		{-2,	60, },	{-22,	110,},	{-27,	121,},	{-25,	118,},
		{-2,	59, },	{-21,	106,},	{-27,	117,},	{-26,	117,},
		{-5,	75, },	{-18,	103,},	{-17,	102,},	{-24,	113,},
		{-3,	62, },	{-21,	107,},	{-26,	117,},	{-28,	118,},
		{-4,	58, },	{-23,	108,},	{-27,	116,},	{-31,	120,},
		{-9,	66, },	{-26,	112,},	{-33,	122,},	{-37,	124,},
		{-1,	79, },	{-10,	96, },	{-10,	95, },	{-10,	94, },
		{0,		71, },	{-12,	95, },	{-14,	100,},	{-15,	102,},
		{3,		68, },	{-5,	91, },	{-8,	95, },	{-10,	99, },
		{10,	44, },	{-9,	93, },	{-17,	111,},	{-13,	106,},
		{-7,	62, },	{-22,	94, },	{-28,	114,},	{-50,	127,},
		{15,	36, },	{-5,	86, },	{-6,	89, },	{-5,	92, },
		{14,	40, },	{9,		67, },	{-2,	80, },	{17,	57, },
		{16,	27, },	{-4,	80, },	{-4,	82, },	{-5,	86, },
		{12,	29, },	{-10,	85, },	{-9,	85, },	{-13,	94, },
		{1,		44, },	{-1,	70, },	{-8,	81, },	{-12,	91, },
		{20,	36, },	{7,		60, },	{-1,	72, },	{-2,	77, },
		{18,	32, },	{9,		58, },	{5,		64, },	{0,		71, },
		{5,		42, },	{5,		61, },	{1,		67, },	{-1,	73, },
		{1,		48, },	{12,	50, },	{9,		56, },	{4,		64, },
		{10,	62, },	{15,	50, },	{0,		69, },	{-7,	81, },
		{17,	46, },	{18,	49, },	{1,		69, },	{5,		64, },
		{9,		64, },	{17,	54, },	{7,		69, },	{15,	57, },
		{-12,	104,},	{10,	41, },	{-7,	69, },	{1,		67, },
		{-11,	97, },	{7,		46, },	{-6,	67, },	{0,		68, },
		{-16,	96, },	{-1,	51, },	{-16,	77, },	{-10,	67, },
		{-7,	88, },	{7,		49, },	{-2,	64, },	{1,		68, },
		{-8,	85, },	{8,		52, },	{2,		61, },	{0,		77, },
		{-7,	85, },	{9,		41, },	{-6,	67, },	{2,		64, },
		{-9,	85, },	{6,		47, },	{-3,	64, },	{0,		68, },
		{-13,	88, },	{2,		55, },	{2,		57, },	{-5,	78, },
		{4,		66, },	{13,	41, },	{-3,	65, },	{7,		55, },
		{-3,	77, },	{10,	44, },	{-3,	66, },	{5,		59, },
		{-3,	76, },	{6,		50, },	{0,		62, },	{2,		65, },
		{-6,	76, },	{5,		53, },	{9,		51, },	{14,	54, },
		{10,	58, },	{13,	49, },	{-1,	66, },	{15,	44, },
		{-1,	76, },	{4,		63, },	{-2,	71, },	{5,		60, },
		{-1,	83, },	{6,		64, },	{-2,	75, },	{2,		70, },
};
mn table9_31[] = {	//864..951
/*864*/	{15,	6,  },	{14,	11,	},	{19,	-6, },	{17,	-13,},
/*865*/	{6,		19, },	{11,	14,	},	{18,	-6, },	{16,	-9, },
/*866*/	{7,		16, },	{9,		11,	},	{14,	0,  },	{17,	-12,},
/*867*/	{12,	14, },	{18,	11,	},	{26,	-12,},	{27,	-21,},
/*868*/	{18,	13, },	{21,	9,	},	{31,	-16,},	{37,	-30,},
/*869*/	{13,	11, },	{23,	-2,	},	{33,	-25,},	{41,	-40,},
/*870*/	{13,	15, },	{32,	-15,},	{33,	-22,},	{42,	-41,},
/*871*/	{15,	16, },	{32,	-15,},	{37,	-28,},	{48,	-47,},
/*872*/	{12,	23, },	{34,	-21,},	{39,	-30,},	{39,	-32,},
/*873*/	{13,	23, },	{39,	-23,},	{42,	-30,},	{46,	-40,},
/*874*/	{15,	20, },	{42,	-33,},	{47,	-42,},	{52,	-51,},
/*875*/	{14,	26, },	{41,	-31,},	{45,	-36,},	{46,	-41,},
/*876*/	{14,	44, },	{46,	-28,},	{49,	-34,},	{52,	-39,},
/*877*/	{17,	40, },	{38,	-12,},	{41,	-17,},	{43,	-19,},
/*878*/	{17,	47, },	{21,	29,	},	{32,	9,  },	{32,	11, },
/*879*/	{24,	17, },	{45,	-24,},	{69,	-71,},	{61,	-55,},
/*880*/	{21,	21, },	{53,	-45,},	{63,	-63,},	{56,	-46,},
/*881*/	{25,	22, },	{48,	-26,},	{66,	-64,},	{62,	-50,},
/*882*/	{31,	27, },	{65,	-43,},	{77,	-74,},	{81,	-67,},
/*883*/	{22,	29, },	{43,	-19,},	{54,	-39,},	{45,	-20,},
/*884*/	{19,	35, },	{39,	-10,},	{52,	-35,},	{35,	-2, },
/*885*/	{14,	50, },	{30,	9,	},	{41,	-10,},	{28,	15, },
/*886*/	{10,	57, },	{18,	26,	},	{36,	0,  },	{34,	1,  },
/*887*/	{7,		63, },	{20,	27,	},	{40,	-1, },	{39,	1,  },
/*888*/	{-2,	77, },	{0,		57,	},	{30,	14, },	{30,	17, },
/*889*/	{-4,	82, },	{-14,	82,	},	{28,	26, },	{20,	38, },
/*890*/	{-3,	94, },	{-5,	75,	},	{23,	37, },	{18,	45, },
/*891*/	{9,		69, },	{-19,	97,	},	{12,	55, },	{15,	54, },
/*892*/	{-12,	109,},	{-35,	125,},	{11,	65, },	{0,		79, },
/*893*/	{36,	-35,},	{27,	0,	},	{37,	-33,},	{36,	-16,},
/*894*/	{36,	-34,},	{28,	0,	},	{39,	-36,},	{37,	-14,},
/*895*/	{32,	-26,},	{31,	-4,	},	{40,	-37,},	{37,	-17,},
/*896*/	{37,	-30,},	{27,	6,	},	{38,	-30,},	{32,	1,  },
/*897*/	{44,	-32,},	{34,	8,	},	{46,	-33,},	{34,	15, },
/*898*/	{34,	-18,},	{30,	10,	},	{42,	-30,},	{29,	15, },
/*899*/	{34,	-15,},	{24,	22,	},	{40,	-24,},	{24,	25, },
/*900*/	{40,	-15,},	{33,	19,	},	{49,	-29,},	{34,	22, },
/*901*/	{33,	-7, },	{22,	32,	},	{38,	-12,},	{31,	16, },
/*902*/	{35,	-5, },	{26,	31,	},	{40,	-10,},	{35,	18, },
/*903*/	{33,	0,  },	{21,	41,	},	{38,	-3, },	{31,	28, },
/*904*/	{38,	2,  },	{26,	44,	},	{46,	-5, },	{33,	41, },
/*905*/	{33,	13, },	{23,	47,	},	{31,	20, },	{36,	28, },
/*906*/	{23,	35, },	{16,	65,	},	{29,	30, },	{27,	47, },
/*907*/	{13,	58, },	{14,	71,	},	{25,	44, },	{21,	62, },
		{15,	6,  },	{14,	11, },	{19,	-6, },	{17,	-13,},
		{6,		19, },	{11,	14, },	{18,	-6, },	{16,	-9, },
		{7,		16, },	{9,		11, },	{14,	0,  },	{17,	-12,},
		{12,	14, },	{18,	11, },	{26,	-12,},	{27,	-21,},
		{18,	13, },	{21,	9,  },	{31,	-16,},	{37,	-30,},
		{13,	11, },	{23,	-2, },	{33,	-25,},	{41,	-40,},
		{13,	15, },	{32,	-15,},	{33,	-22,},	{42,	-41,},
		{15,	16, },	{32,	-15,},	{37,	-28,},	{48,	-47,},
		{12,	23, },	{34,	-21,},	{39,	-30,},	{39,	-32,},
		{13,	23, },	{39,	-23,},	{42,	-30,},	{46,	-40,},
		{15,	20, },	{42,	-33,},	{47,	-42,},	{52,	-51,},
		{14,	26, },	{41,	-31,},	{45,	-36,},	{46,	-41,},
		{14,	44, },	{46,	-28,},	{49,	-34,},	{52,	-39,},
		{17,	40, },	{38,	-12,},	{41,	-17,},	{43,	-19,},
		{17,	47, },	{21,	29, },	{32,	9,  },	{32,	11, },
		{24,	17, },	{45,	-24,},	{69,	-71,},	{61,	-55,},
		{21,	21, },	{53,	-45,},	{63,	-63,},	{56,	-46,},
		{25,	22, },	{48,	-26,},	{66,	-64,},	{62,	-50,},
		{31,	27, },	{65,	-43,},	{77,	-74,},	{81,	-67,},
		{22,	29, },	{43,	-19,},	{54,	-39,},	{45,	-20,},
		{19,	35, },	{39,	-10,},	{52,	-35,},	{35,	-2, },
		{14,	50, },	{30,	9,  },	{41,	-10,},	{28,	15, },
		{10,	57, },	{18,	26, },	{36,	0,  },	{34,	1 , },
		{7,		63, },	{20,	27, },	{40,	-1, },	{39,	1 , },
		{-2,	77, },	{0,		57, },	{30,	14, },	{30,	17, },
		{-4,	82, },	{-14,	82, },	{28,	26, },	{20,	38, },
		{-3,	94, },	{-5,	75, },	{23,	37, },	{18,	45, },
		{9,		69, },	{-19,	97, },	{12,	55, },	{15,	54, },
		{-12,	109,},	{-35,	125,},	{11,	65, },	{0,		79, },
		{36,	-35,},	{27,	0,  },	{37,	-33,},	{36,	-16,},
		{36,	-34,},	{28,	0,  },	{39,	-36,},	{37,	-14,},
		{32,	-26,},	{31,	-4, },	{40,	-37,},	{37,	-17,},
		{37,	-30,},	{27,	6,  },	{38,	-30,},	{32,	1 , },
		{44,	-32,},	{34,	8,  },	{46,	-33,},	{34,	15, },
		{34,	-18,},	{30,	10, },	{42,	-30,},	{29,	15, },
		{34,	-15,},	{24,	22, },	{40,	-24,},	{24,	25, },
		{40,	-15,},	{33,	19, },	{49,	-29,},	{34,	22, },
		{33,	-7, },	{22,	32, },	{38,	-12,},	{31,	16, },
		{35,	-5, },	{26,	31, },	{40,	-10,},	{35,	18, },
		{33,	0,  },	{21,	41, },	{38,	-3, },	{31,	28, },
		{38,	2,  },	{26,	44, },	{46,	-5, },	{33,	41, },
		{33,	13, },	{23,	47, },	{31,	20, },	{36,	28, },
		{23,	35, },	{16,	65, },	{29,	30, },	{27,	47, },
		{13,	58, },	{14,	71, },	{25,	44, },	{21,	62, },
};
mn table9_32[] = {	//952..1011
/*952*/	{-3,	71, },	{-6,	76,	},	{-23,	112,},	{-24,	115,},
/*953*/	{-6,	42, },	{-2,	44,	},	{-15,	71, },	{-22,	82, },
/*954*/	{-5,	50, },	{0,		45,	},	{-7,	61, },	{-9,	62, },
/*955*/	{-3,	54, },	{0,		52,	},	{0,		53, },	{0,		53, },
/*956*/	{-2,	62, },	{-3,	64,	},	{-5,	66, },	{0,		59, },
/*957*/	{0,		58, },	{-2,	59,	},	{-11,	77, },	{-14,	85, },
/*958*/	{1,		63, },	{-4,	70,	},	{-9,	80, },	{-13,	89, },
/*959*/	{-2,	72, },	{-4,	75,	},	{-9,	84, },	{-13,	94, },
/*960*/	{-1,	74, },	{-8,	82,	},	{-10,	87, },	{-11,	92, },
/*961*/	{-9,	91, },	{-17,	102,},	{-34,	127,},	{-29,	127,},
/*962*/	{-5,	67, },	{-9,	77,	},	{-21,	101,},	{-21,	100,},
/*963*/	{-5,	27, },	{3,		24,	},	{-3,	39, },	{-14,	57, },
/*964*/	{-3,	39, },	{0,		42,	},	{-5,	53, },	{-12,	67, },
/*965*/	{-2,	44, },	{0,		48,	},	{-7,	61, },	{-11,	71, },
/*966*/	{0,		46, },	{0,		55,	},	{-11,	75, },	{-10,	77, },
/*967*/	{-16,	64, },	{-6,	59,	},	{-15,	77, },	{-21,	85, },
/*968*/	{-8,	68, },	{-7,	71,	},	{-17,	91, },	{-16,	88, },
/*969*/	{-10,	78, },	{-12,	83,	},	{-25,	107,},	{-23,	104,},
/*970*/	{-6,	77, },	{-11,	87,	},	{-25,	111,},	{-15,	98, },
/*971*/	{-10,	86, },	{-30,	119,},	{-28,	122,},	{-37,	127,},
/*972*/	{-12,	92, },	{1,		58,	},	{-11,	76, },	{-10,	82, },
/*973*/	{-15,	55, },	{-3,	29,	},	{-10,	44, },	{-8,	48, },
/*974*/	{-10,	60, },	{-1,	36,	},	{-10,	52, },	{-8,	61, },
/*975*/	{-6,	62, },	{1,		38,	},	{-10,	57, },	{-8,	66, },
/*976*/	{-4,	65, },	{2,		43,	},	{-9,	58, },	{-7,	70, },
/*977*/	{-12,	73, },	{-6,	55,	},	{-16,	72, },	{-14,	75, },
/*978*/	{-8,	76, },	{0,		58,	},	{-7,	69, },	{-10,	79, },
/*979*/	{-7,	80, },	{0,		64,	},	{-4,	69, },	{-9,	83, },
/*980*/	{-9,	88, },	{-3,	74,	},	{-5,	74, },	{-12,	92, },
/*981*/	{-17,	110,},	{-10,	90,	},	{-9,	86, },	{-18,	108,},
		{-3,	71, },	{-6,	76, },	{-23,	112,},	{-24,	115,},
		{-6,	42, },	{-2,	44, },	{-15,	71, },	{-22,	82, },
		{-5,	50, },	{0,		45, },	{-7,	61, },	{-9,	62, },
		{-3,	54, },	{0,		52, },	{0,		53, },	{0,		53, },
		{-2,	62, },	{-3,	64, },	{-5,	66, },	{0,		59, },
		{0,		58, },	{-2,	59, },	{-11,	77, },	{-14,	85, },
		{1,		63, },	{-4,	70, },	{-9,	80, },	{-13,	89, },
		{-2,	72, },	{-4,	75, },	{-9,	84, },	{-13,	94, },
		{-1,	74, },	{-8,	82, },	{-10,	87, },	{-11,	92, },
		{-9,	91, },	{-17,	102,},	{-34,	127,},	{-29,	127,},
		{-5,	67, },	{-9,	77, },	{-21,	101,},	{-21,	100,},
		{-5,	27, },	{3,		24, },	{-3,	39, },	{-14,	57, },
		{-3,	39, },	{0,		42, },	{-5,	53, },	{-12,	67, },
		{-2,	44, },	{0,		48, },	{-7,	61, },	{-11,	71, },
		{0,		46, },	{0,		55, },	{-11,	75, },	{-10,	77, },
		{-16,	64, },	{-6,	59, },	{-15,	77, },	{-21,	85, },
		{-8,	68, },	{-7,	71, },	{-17,	91, },	{-16,	88, },
		{-10,	78, },	{-12,	83, },	{-25,	107,},	{-23,	104,},
		{-6,	77, },	{-11,	87, },	{-25,	111,},	{-15,	98, },
		{-10,	86, },	{-30,	119,},	{-28,	122,},	{-37,	127,},
		{-12,	92, },	{1,		58, },	{-11,	76, },	{-10,	82, },
		{-15,	55, },	{-3,	29, },	{-10,	44, },	{-8,	48, },
		{-10,	60, },	{-1,	36, },	{-10,	52, },	{-8,	61, },
		{-6,	62, },	{1,		38, },	{-10,	57, },	{-8,	66, },
		{-4,	65, },	{2,		43, },	{-9,	58, },	{-7,	70, },
		{-12,	73, },	{-6,	55, },	{-16,	72, },	{-14,	75, },
		{-8,	76, },	{0,		58, },	{-7,	69, },	{-10,	79, },
		{-7,	80, },	{0,		64, },	{-4,	69, },	{-9,	83, },
		{-9,	88, },	{-3,	74, },	{-5,	74, },	{-12,	92, },
		{-17,	110,},	{-10,	90, },	{-9,	86, },	{-18,	108,},
};
mn table9_33[] = {	//1012..1023
/*1012*/{-3,	70, },	{-3,	74,	},	{-2,	73, },	{-5,	79, },
/*1013*/{-8,	93, },	{-9,	92,	},	{-12,	104,},	{-11,	104,},
/*1014*/{-10,	90, },	{-8,	87,	},	{-9,	91, },	{-11,	91, },
/*1015*/{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
/*1016*/{-3,	70, },	{-3,	74,	},	{-2,	73, },	{-5,	79, },
/*1017*/{-8,	93, },	{-9,	92,	},	{-12,	104,},	{-11,	104,},
		{-10,	90, },	{-8,	87, },	{-9,	91, },	{-11,	91, },
		{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
		{-3,	70, },	{-3,	74, },	{-2,	73, },	{-5,	79, },
		{-8,	93, },	{-9,	92, },	{-12,	104,},	{-11,	104,},
		{-10,	90, },	{-8,	87, },	{-9,	91, },	{-11,	91, },
		{-30,	127,},	{-23,	126,},	{-31,	127,},	{-30,	127,},
};

struct slice_reader {

	static int	clip3(int x, int y, int z) { return min(max(z, x), y); }

	struct context_variable {
		int	pStateIdx;
		int	valMPS;

		context_variable(const mn &x, int SliceQPY) {
			int preCtxState = clip3( 1, 126, ( ( x.m * clip3( 0, 51, SliceQPY ) ) >> 4 ) + x.n );
			if (valMPS = preCtxState >= 64)
				pStateIdx = 63 - preCtxState;
			else
				pStateIdx = preCtxState - 64;
		}
	};
};

struct nal_reader {
	vlc_in<uint32, true, byte_reader&>	r;
	ChromaArrayType	chroma_array_type;
	BlockType		block_type;
	BlockMode		block_mode;

	int	exp_golumb() {
		int	zeros = 0;
		while (!r.get_bit())
			++zeros;
		return r.get(zeros) + (1 << zeros) - 1;
	}

	// context-adaptive arithmetic entropy-coded syntax element. The parsing process for this descriptor is specified in clause 9.3.
	int	ae() {
	}
	// byte having any pattern of bit string (8 bits). The parsing process for this descriptor is specified by the return value of the function read_bits(8 ).
	int	b() {
		return r.get(8);
	}
	// context-adaptive variable-length entropy-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.2.
	int	ce(int maxNumCoeff, int BlkIdx) {
	}
	// fixed-pattern bit string using n bits written (from left to right) with the left bit first. The parsing process for this descriptor is specified by the return value of the function read_bits(n ).
	int	f(int n) {
		return	r.get(n);
	}
	// signed integer using n bits. When n is "v" in the syntax table, the number of bits varies in a manner dependent on the value of other syntax elements. The parsing process for this descriptor is specified by the return value of the function read_bits(n ) interpreted as a two's complement integer representation with most significant bit written first.
	int	i(int n) {
		return	sign_extend(r.get(n), n);
	}
	// mapped Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
	int	me(int v) {
		return table9_4[(chroma_array_type == 0 || chroma_array_type == 3 ? 48 : 0) + exp_golumb()][block_type > Inter];
	}
	// signed integer Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
	int	se() {
		int	x = exp_golumb();
		return x & 1 ? (x + 1) >> 1 : -(x >> 1);
	}
	// truncated Exp-Golomb-coded syntax element with left bit first. The parsing process for this descriptor is specified in clause 9.1.
	int	te(int x) {
		return x > 1 ? exp_golumb() : int(!r.get_bit());
	}
	// unsigned integer using n bits. When n is "v" in the syntax table, the number of bits varies in a manner dependent on the value of other syntax elements. The parsing process for this descriptor is specified by the return value of the function read_bits(n ) interpreted as a binary representation of an unsigned integer with most significant bit written first.
	int	u(int n) {
		return	r.get(n);
	}
	// unsigned integer Exp-Golomb-coded syntax element with the left bit first. The parsing process for this descriptor is specified in clause 9.1.
	int	ue() {
		return exp_golumb();
	}

#if 0
	void CAVLC(int maxNumCoeff, int BlkIdx) {
		int	blkA, blkB;
		uint32	total_coeff, trailing_ones, nC;
		if (chroma_array_type == 1) {
			nC = -1;
		} else if (chroma_array_type == 2) {
			nC = -2;
		} else {
			switch (block_mode) {
				case Intra16x16DCLevel:
				case Intra16x16ACLevel:
				case LumaLevel4x4:/*
					clause 6.4.11.4 (luma4x4BlkIdx)
					output is assigned to mbAddrA, mbAddrB, luma4x4BlkIdxA, and luma4x4BlkIdxB
					The 4x4 luma block specified by mbAddrA\luma4x4BlkIdxA is assigned to blkA
					the 4x4 luma block specified by mbAddrB\luma4x4BlkIdxB is assigned to blkB
					*/
					break;
				case CbIntra16x16DCLevel:
				case CbIntra16x16ACLevel:
				case CbLevel4x4:/*
					in clause 6.4.11.6 (cb4x4BlkIdx)
					output is assigned to mbAddrA, mbAddrB, cb4x4BlkIdxA, and cb4x4BlkIdxB
					The 4x4 Cb block specified by mbAddrA\cb4x4BlkIdxA is assigned to blkA
					the 4x4 Cb block specified by mbAddrB\cb4x4BlkIdxB is assigned to blkB
				*/
				case CrIntra16x16DCLevel:
				case CrIntra16x16ACLevel:
				case CrLevel4x4:/*
					clause 6.4.11.6(cr4x4BlkIdx_
					output is assigned to mbAddrA, mbAddrB, cr4x4BlkIdxA, and cr4x4BlkIdxB
					The 4x4 Cr block specified by mbAddrA\cr4x4BlkIdxA is assigned to blkA
					the 4x4 Cr block specified by mbAddrB\cr4x4BlkIdxB is assigned to blkB
					*/
				default: //(ChromaACLevel)
					/*
					clause 6.4.11.5(chroma4x4BlkIdx)
					output is assigned to mbAddrA, mbAddrB, chroma4x4BlkIdxA, and chroma4x4BlkIdxB
					The 4x4 chroma block specified by mbAddrA\iCbCr\chroma4x4BlkIdxA is assigned to blkA
					the 4x4 chroma block specified by mbAddrB\iCbCr\chroma4x4BlkIdxB is assigned to blkB
					*/
			}
			bool	availableFlagA	= available(mbAddrA) && !(is_intra_prediction && constrained_intra_pred_flag && mbAddrA.is_inter && slicing);
			bool	availableFlagB	= available(mbAddrB) && !(is_intra_prediction && constrained_intra_pred_flag && mbAddrB.is_inter && slicing);

			if (availableFlagA) {
				if (mbAddrA.mb_type == P_Skip || mbAddrA.mb_type == B_Skip || (mbAddrA.mb_type != I_PCM && all_AC_residual_zero(neighbour blkA)))
					nA = 0;
				else if (mbAddrA.mb_type == I_PCM)
					nA = 16;
				else
					mA = TotalCoeff( coeff_token ) of the neighbouring block blkA;
			}
			if (availableFlagB) {
				if (mbAddrB.mb_type == P_Skip || mbAddrB.mb_type == B_Skip || (mbAddrB.mb_type != I_PCM && all_AC_residual_zero(neighbour blkB)))
					nB = 0;
				else if (mbAddrB.mb_type == I_PCM)
					nB = 16;
				else
					mB = TotalCoeff( coeff_token ) of the neighbouring block blkB;
			}

			if (availableFlagA && availableFlagB)
				nC = ( nA + nB + 1 ) >> 1;
			else if (availableFlagA)
				nC = nA;
			else if (availableFlagB)
				nC = nB;
			else
				nC = 0;
	}
	#endif
};



struct nal_unit {
//	uint8	forbidden_zero_bit:1, nal_ref_idc:2, nal_unit_type:5;
	union {
		struct { uint8	ISO_BITFIELDS3(
			forbidden_zero_bit	:1,
			nal_ref_idc			:2,
			nal_unit_type		:5
		); };
		uint8	u;
	};

	struct {
 		uint8	ISO_BITFIELDS11(
			present						:1,
			idr_flag					:1,
			priority_id					:6,
			no_inter_layer_pred_flag	:1,
			dependency_id				:3,
			quality_id					:4,
			temporal_id					:3,
			use_ref_base_pic_flag		:1,
			discardable_flag			:1,
			output_flag					:1,
			reserved_three_2bits		:2
		);
	} svc_extension;

	struct {
 		uint8	ISO_BITFIELDS7(
			present						:1,
 			view_idx 					:8,
 			depth_flag 					:1,
 			non_idr_flag 				:1,
 			temporal_id 				:3,
 			anchor_pic_flag 			:1,
			inter_view_flag 			:1
		);
	} _3davc_extension;

	memory_block	get_nal(const memory_block &mem) {
		memory_reader	r(mem);
		u	= r.getc();

		svc_extension.present = _3davc_extension.present	= false;
		if ((nal_unit_type == 14 || nal_unit_type == 20 || nal_unit_type == 21) && (r.peekc() & 0x80)) {
			if (nal_unit_type == 21)
				_3davc_extension = r.get();
			else
				svc_extension = r.get();
		}

		uint8	*d	= mem;
		uint32	u	= 0;
		for (uint8 *s = mem + r.tell(), *e = mem.end(); s != e; ) {
			u |= (*s << 24);
			if (u == 1 || (u >>= 8) == 1)
				break;

			if (u == 0x000003) {
				*d++ = *s++;
				u = (u | (*s << 24)) >> 8;
				*d++ = *s++;
				++s;
			} else {
				*d++ = *s++;
			}
		}
		return memory_block(mem, d - mem);
	}
	uint8	*scan_for_marker(const memory_block &mem) {
		uint32	u = 0;
		for (uint8 *p = mem, *e = mem.end(); p != e;) {
			u |= (*p++ << 24);
			if (u == 1 || (u >>= 8) == 1)
				return p;
		}
		return 0;
	}
};

#if 0
seq_parameter_set_rbsp() {	//	C 	Descriptor
	seq_parameter_set_data();// 	0
	rbsp_trailing_bits();// 	0
}

seq_parameter_set_data() {//	C 	Descriptor
	profile_idc;// 	0 	u(8)
	constraint_set0_flag;// 	0 	u(1)
	constraint_set1_flag;// 	0 	u(1)
	constraint_set2_flag;// 	0 	u(1)
	constraint_set3_flag;// 	0 	u(1)
	constraint_set4_flag;// 	0 	u(1)
	constraint_set5_flag;// 	0 	u(1)
	reserved_zero_2bits;//  /* equal to 0 */ 	0 	u(2)
	level_idc;// 	0 	u(8)
	seq_parameter_set_id;// 	0 	ue(v)
	if (profile_idc == 100 || profile_idc == 110 || profile_idc == 122 || profile_idc == 244 || profile_idc == 44 || profile_idc == 83 || profile_idc == 86 || profile_idc == 118 || profile_idc == 128 || profile_idc == 138 || profile_idc == 139 || profile_idc == 134 || profile_idc == 135) {
		chroma_format_idc;// 	0 	ue(v)
		if (chroma_format_idc == 3)
			separate_colour_plane_flag;// 	0 	u(1)
		bit_depth_luma_minus8;// 	0 	ue(v)
		bit_depth_chroma_minus8;// 	0 	ue(v)
		qpprime_y_zero_transform_bypass_flag;// 	0 	u(1)
		seq_scaling_matrix_present_flag;// 	0 	u(1)
		if (seq_scaling_matrix_present_flag);//
		for (i = 0; i < ((chroma_format_idc != 3) ? 8 : 12); i++) {
			seq_scaling_list_present_flag[i];// 	0 	u(1)
			if (seq_scaling_list_present_flag[i])
				if (i < 6)
					scaling_list(ScalingList4x4[i], 16, UseDefaultScalingMatrix4x4Flag[i]);// 	0
				else
					scaling_list(ScalingList8x8[i - 6], 64, UseDefaultScalingMatrix8x8Flag[i - 6]);// 	0
		}
	}
	log2_max_frame_num_minus4;// 	0 	ue(v)
	pic_order_cnt_type 	0;//	ue(v)
	if (pic_order_cnt_type == 0)
		log2_max_pic_order_cnt_lsb_minus4;// 	0 	ue(v)
	else if (pic_order_cnt_type == 1) {
		delta_pic_order_always_zero_flag;// 	0 	u(1)
		offset_for_non_ref_pic;// 	0 	se(v)
		offset_for_top_to_bottom_field;// 	0 	se(v)
		num_ref_frames_in_pic_order_cnt_cycle;// 	0 	ue(v)
		for (i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++)
			offset_for_ref_frame[i];// 	0 	se(v)
	}
	max_num_ref_frames;// 	0 	ue(v)
	gaps_in_frame_num_value_allowed_flag;// 	0 	u(1)
	pic_width_in_mbs_minus1;// 	0 	ue(v)
	pic_height_in_map_units_minus1;// 	0 	ue(v)
	frame_mbs_only_flag;// 	0 	u(1)
	if (!frame_mbs_only_flag)
		mb_adaptive_frame_field_flag;// 	0 	u(1)
	direct_8x8_inference_flag;// 	0 	u(1)
	frame_cropping_flag;// 	0 	u(1)
	if (frame_cropping_flag) {
		frame_crop_left_offset;// 	0 	ue(v)
		frame_crop_right_offset;// 	0 	ue(v)
		frame_crop_top_offset;// 	0 	ue(v)
		frame_crop_bottom_offset;// 	0 	ue(v)
	}
	vui_parameters_present_flag;//	0 	u(1)
	if (vui_parameters_present_flag)
		vui_parameters();//	0
}

scaling_list(scalingList, sizeOfScalingList, useDefaultScalingMatrixFlag) {//	C 	Descriptor
	lastScale = 8;//
	nextScale = 8;//
	for (j = 0; j < sizeOfScalingList; j++) {
		if (nextScale != 0) {
			delta_scale;// 	0 | 1 	se(v)
			nextScale = (lastScale + delta_scale + 256) % 256;//
			useDefaultScalingMatrixFlag = (j == 0 && nextScale == 0);//
		}
		scalingList[j] = (nextScale == 0) ? lastScale : nextScale;//
		lastScale = scalingList[j];//
	}
}

seq_parameter_set_extension_rbsp() {	//	C 	Descriptor
	seq_parameter_set_id;// 	10 	ue(v)
	aux_format_idc;// 	10 	ue(v)
	if (aux_format_idc != 0) {
		bit_depth_aux_minus8;// 	10 	ue(v)
		alpha_incr_flag;// 	10 	u(1)
		alpha_opaque_value;// 	10 	u(v)
		alpha_transparent_value;// 	10 	u(v)
	}
	additional_extension_flag;// 	10 	u(1)
	rbsp_trailing_bits();// 	10
}

subset_seq_parameter_set_rbsp() {	//	C 	Descriptor
	seq_parameter_set_data();// 	0
	if (profile_idc == 83 || profile_idc == 86) {
		seq_parameter_set_svc_extension();//  /* specified in Annex G */ 	0
		svc_vui_parameters_present_flag;//	0 	u(1)
		if (svc_vui_parameters_present_flag == 1)
			svc_vui_parameters_extension();//  /* specified in Annex G */ 	0
	} else if (profile_idc == 118 || profile_idc == 128 || profile_idc == 134) {
		bit_equal_to_one;//  /* equal to 1 */ 	0 	f(1)
		seq_parameter_set_mvc_extension();//  /* specified in Annex H */ 	0
		mvc_vui_parameters_present_flag;// 	0 	u(1)
		if (mvc_vui_parameters_present_flag == 1)
			mvc_vui_parameters_extension();//  /* specified in Annex H */ 	0
	} else if (profile_idc == 138 || profile_idc == 135) {
		bit_equal_to_one;//  /* equal to 1 */ 	0 	f(1)
		seq_parameter_set_mvcd_extension();//  /* specified in Annex I */
	} else if (profile_idc == 139) {
		bit_equal_to_one;//  /* equal to 1 */ 	0 	f(1)
		seq_parameter_set_mvcd_extension();//  /* specified in Annex I */ 	0
		seq_parameter_set_3davc_extension();// /* specified in Annex J */ 	0
	}
	additional_extension2_flag;// 	0 	u(1)
	if (additional_extension2_flag == 1)
		while (more_rbsp_data())
			additional_extension2_data_flag;// 	0 	u(1)
	rbsp_trailing_bits();// 	0
}

pic_parameter_set_rbsp() {	//	C 	Descriptor
	pic_parameter_set_id;// 	1 	ue(v)
	seq_parameter_set_id;// 	1 	ue(v)
	entropy_coding_mode_flag;//	1 	u(1)
	bottom_field_pic_order_in_frame_present_flag;// 	1 	u(1)
	num_slice_groups_minus1;// 	1 	ue(v)
	if (num_slice_groups_minus1 > 0) {
		slice_group_map_type;// 	1 	ue(v)
		if (slice_group_map_type == 0)
			for (iGroup = 0; iGroup <= num_slice_groups_minus1; iGroup++)
				run_length_minus1[iGroup];// 	1 	ue(v)
		else if (slice_group_map_type == 2)
			for (iGroup = 0; iGroup < num_slice_groups_minus1; iGroup++) {
				top_left[iGroup];// 	1 	ue(v)
				bottom_right[iGroup];// 	1 	ue(v)
			}


		else if (slice_group_map_type == 3 || slice_group_map_type == 4 || slice_group_map_type == 5) {
			slice_group_change_direction_flag;// 	1 	u(1)
			slice_group_change_rate_minus1;// 	1 	ue(v)
		} else if (slice_group_map_type == 6) {
			pic_size_in_map_units_minus1;// 	1 	ue(v)
			for (i = 0; i <= pic_size_in_map_units_minus1; i++)
				slice_group_id[i];// 	1 	u(v)
		}
	}
	num_ref_idx_l0_default_active_minus1;// 	1 	ue(v)
	num_ref_idx_l1_default_active_minus1;// 	1 	ue(v)
	weighted_pred_flag;// 	1 	u(1)
	weighted_bipred_idc;// 	1 	u(2)
	pic_init_qp_minus26;//  /* relative to 26 */ 	1 	se(v)
	pic_init_qs_minus26;//  /* relative to 26 */ 	1 	se(v)
	chroma_qp_index_offset;// 	1 	se(v)
	deblocking_filter_control_present_flag;// 	1 	u(1)
	constrained_intra_pred_flag;// 	1 	u(1)
	redundant_pic_cnt_present_flag;// 	1 	u(1)
	if (more_rbsp_data()) {
		transform_8x8_mode_flag;// 	1 	u(1)
		pic_scaling_matrix_present_flag;// 	1 	u(1)
		if (pic_scaling_matrix_present_flag)


			for (i = 0; i < 6 + ((chroma_format_idc != 3) ? 2 : 6) * transform_8x8_mode_flag; i++) {
				pic_scaling_list_present_flag[i];// 	1 	u(1)
				if (pic_scaling_list_present_flag[i])
					if (i < 6)
						scaling_list(ScalingList4x4[i], 16, UseDefaultScalingMatrix4x4Flag[i]);// 	1
					else
						scaling_list(ScalingList8x8[i - 6], 64, UseDefaultScalingMatrix8x8Flag[i - 6]);// 	1
			}
		second_chroma_qp_index_offset;// 	1 	se(v)
	}
	rbsp_trailing_bits();// 	1
}

sei_rbsp() {//	C 	Descriptor
	do
		sei_message();// 	5
	while (more_rbsp_data());//
	rbsp_trailing_bits();// 	5
}

sei_message() {	//	C 	Descriptor
	payloadType = 0;//
	while (next_bits(8) == 0xFF) {
		ff_byte;//  /* equal to 0xFF */ 	5 	f(8)
		payloadType += 255;//
	}
	last_payload_type_byte;// 	5 	u(8)
	payloadType += last_payload_type_byte;//
	payloadSize = 0;//
	while (next_bits(8) == 0xFF) {
		ff_byte;//  /* equal to 0xFF */ 	5 	f(8)
		payloadSize += 255;//
	}
	last_payload_size_byte;// 	5 	u(8)
	payloadSize += last_payload_size_byte;//
	sei_payload(payloadType, payloadSize);// 	5
}

access_unit_delimiter_rbsp() {	//	C 	Descriptor
	primary_pic_type;// 	6 	u(3)
	rbsp_trailing_bits();// 	6
}

end_of_seq_rbsp() {		//	C 	Descriptor
}
end_of_stream_rbsp() {	//	C 	Descriptor
}

filler_data_rbsp() {	//	C 	Descriptor
	while (next_bits(8) == 0xFF)
		ff_byte;//  /* equal to 0xFF */ 	9 	f(8)
	rbsp_trailing_bits();// 	9
}

slice_layer_without_partitioning_rbsp() {	//	C 	Descriptor
	slice_header();// 	2
	slice_data();//  /* all categories of slice_data( ) syntax */ 	2 | 3 | 4
	rbsp_slice_trailing_bits();// 	2
}

slice_data_partition_a_layer_rbsp() {	//	C 	Descriptor
	slice_header();// 	2
	slice_id;// 	All 	ue(v)
	slice_data();//  /* only category 2 parts of slice_data( ) syntax */ 	2
	rbsp_slice_trailing_bits();// 	2
}

slice_data_partition_b_layer_rbsp() {	//	C 	Descriptor
	slice_id;// 	All 	ue(v)
	if (separate_colour_plane_flag == 1)
		colour_plane_id;// 	All 	u(2)
	if (redundant_pic_cnt_present_flag)
		redundant_pic_cnt;// 	All 	ue(v)
	slice_data();//  /* only category 3 parts of slice_data( ) syntax */ 	3
	rbsp_slice_trailing_bits();// 	3
}

slice_data_partition_c_layer_rbsp() {	//	C 	Descriptor
	slice_id;// 	All 	ue(v)
	if (separate_colour_plane_flag == 1)
		colour_plane_id;// 	All 	u(2)
	if (redundant_pic_cnt_present_flag)
		redundant_pic_cnt;// 	All 	ue(v)
	slice_data();//  /* only category 4 parts of slice_data( ) syntax */ 	4
	rbsp_slice_trailing_bits();// 	4
}

rbsp_slice_trailing_bits() {	//	C 	Descriptor
	rbsp_trailing_bits();// 	All
	if (entropy_coding_mode_flag)
		while (more_rbsp_trailing_data())
			cabac_zero_word;//  /* equal to 0x0000 */ 	All 	f(16)
}

rbsp_trailing_bits() {	//	C 	Descriptor
	rbsp_stop_one_bit;//  /* equal to 1 */ 	All 	f(1)
	while (!byte_aligned())
		rbsp_alignment_zero_bit;//  /* equal to 0 */ 	All 	f(1)
}

prefix_nal_unit_rbsp() {	//	C 	Descriptor
	if (svc_extension_flag)
		prefix_nal_unit_svc();//  /* specified in Annex G */ 	2
}

slice_layer_extension_rbsp() {	//	C 	Descriptor
	if (svc_extension_flag) {
		slice_header_in_scalable_extension();//  /* specified in Annex G */ 	2
		if (!slice_skip_flag)
			slice_data_in_scalable_extension();//  /* specified in Annex G */ 	2 | 3 | 4
	} else if (avc_3d_extension_flag) {
		slice_header_in_3davc_extension();//  /* specified in Annex J */ 	2
		slice_data_in_3davc_extension();//  /* specified in Annex J */ 	2 | 3 | 4
	} else {
		slice_header();// 	2
		slice_data();// 	2 | 3 | 4
	}
	rbsp_slice_trailing_bits();// 	2
}

slice_header() {	//	C 	Descriptor
	first_mb_in_slice;// 	2 	ue(v)
	slice_type;// 	2 	ue(v)
	pic_parameter_set_id;// 	2 	ue(v)
	if (separate_colour_plane_flag == 1)
		colour_plane_id;// 	2 	u(2)
	frame_num;// 	2 	u(v)
	if (!frame_mbs_only_flag) {
		field_pic_flag;// 	2 	u(1)
		if (field_pic_flag)
			bottom_field_flag;// 	2 	u(1)
	}
	if (IdrPicFlag)
		idr_pic_id;// 	2 	ue(v)
	if (pic_order_cnt_type == 0) {
		pic_order_cnt_lsb;// 	2 	u(v)
		if (bottom_field_pic_order_in_frame_present_flag && !field_pic_flag)
			delta_pic_order_cnt_bottom;// 	2 	se(v)
	}
	if (pic_order_cnt_type == 1 && !delta_pic_order_always_zero_flag) {
		delta_pic_order_cnt[0];// 	2 	se(v)
		if (bottom_field_pic_order_in_frame_present_flag && !field_pic_flag)
			delta_pic_order_cnt[1];// 	2 	se(v)
	}
	if (redundant_pic_cnt_present_flag)
		redundant_pic_cnt;// 	2 	ue(v)
	if (slice_type == B)
		direct_spatial_mv_pred_flag;// 	2 	u(1)
	if (slice_type == P || slice_type == SP || slice_type == B) {
		num_ref_idx_active_override_flag;// 	2 	u(1)
		if (num_ref_idx_active_override_flag) {
			num_ref_idx_l0_active_minus1;// 	2 	ue(v)
			if (slice_type == B)
				num_ref_idx_l1_active_minus1;// 	2 	ue(v)
		}
	}
	if (nal_unit_type == 20 || nal_unit_type == 21)
		ref_pic_list_mvc_modification();//  /* specified in Annex H */ 	2
	else
		ref_pic_list_modification();// 	2
	if ((weighted_pred_flag && (slice_type == P || slice_type == SP)) || (weighted_bipred_idc == 1 && slice_type == B))
		pred_weight_table();// 	2
	if (nal_ref_idc != 0)
		dec_ref_pic_marking();// 	2
	if (entropy_coding_mode_flag && slice_type != I && slice_type != SI)
		cabac_init_idc;// 	2 	ue(v)
	slice_qp_delta;// 	2 	se(v)
	if (slice_type == SP || slice_type == SI) {
		if (slice_type == SP)
			sp_for_switch_flag;// 	2 	u(1)
		slice_qs_delta;// 	2 	se(v)
	}
	if (deblocking_filter_control_present_flag) {
		disable_deblocking_filter_idc;// 	2 	ue(v)
		if (disable_deblocking_filter_idc != 1) {
			slice_alpha_c0_offset_div2;// 	2 	se(v)
			slice_beta_offset_div2;// 	2 	se(v)
		}
	}
	if (num_slice_groups_minus1 > 0 &&
		slice_group_map_type >= 3 && slice_group_map_type <= 5)
		slice_group_change_cycle;// 	2 	u(v)
}

ref_pic_list_modification() {	//	C 	Descriptor
	if (slice_type % 5 != 2 && slice_type % 5 != 4) {
		ref_pic_list_modification_flag_l0;// 	2 	u(1)
		if (ref_pic_list_modification_flag_l0)
			do {
				modification_of_pic_nums_idc;//	2 	ue(v)
				if (modification_of_pic_nums_idc == 0 || modification_of_pic_nums_idc == 1)
					abs_diff_pic_num_minus1;// 	2 	ue(v)
				else if (modification_of_pic_nums_idc == 2)
					long_term_pic_num;// 	2 	ue(v)
			} while (modification_of_pic_nums_idc != 3);//
	}
	if (slice_type % 5 == 1) {
		ref_pic_list_modification_flag_l1;// 	2 	u(1)
		if (ref_pic_list_modification_flag_l1)
			do {
				modification_of_pic_nums_idc;// 	2 	ue(v)
				if (modification_of_pic_nums_idc == 0 || modification_of_pic_nums_idc == 1)
					abs_diff_pic_num_minus1;// 	2 	ue(v)
				else if (modification_of_pic_nums_idc == 2)
					long_term_pic_num;// 	2 	ue(v)
			} while (modification_of_pic_nums_idc != 3);//
	}
}

pred_weight_table() {	//	C 	Descriptor
	luma_log2_weight_denom;// 	2 	ue(v)
	if (ChromaArrayType != 0)
		chroma_log2_weight_denom;// 	2 	ue(v)
	for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {
		luma_weight_l0_flag;// 	2 	u(1)
		if (luma_weight_l0_flag) {
			luma_weight_l0[i];// 	2 	se(v)
			luma_offset_l0[i];// 	2 	se(v)
		}
		if (ChromaArrayType != 0) {
			chroma_weight_l0_flag;// 	2 	u(1)
			if (chroma_weight_l0_flag)
				for (j = 0; j < 2; j++) {
					chroma_weight_l0[i][j];// 	2 	se(v)
					chroma_offset_l0[i][j];// 	2 	se(v)
				}
		}
	}
	if (slice_type % 5 == 1)
		for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {
			luma_weight_l1_flag;// 	2 	u(1)
			if (luma_weight_l1_flag) {
				luma_weight_l1[i];// 	2 	se(v)
				luma_offset_l1[i];// 	2 	se(v)
			}
			if (ChromaArrayType != 0) {
				chroma_weight_l1_flag;// 	2 	u(1)
				if (chroma_weight_l1_flag)
					for (j = 0; j < 2; j++) {
						chroma_weight_l1[i][j];// 	2 	se(v)
						chroma_offset_l1[i][j];// 	2 	se(v)
					}
			}
		}
}

dec_ref_pic_marking() {	//	C 	Descriptor
	if (IdrPicFlag) {
		no_output_of_prior_pics_flag;// 	2 | 5 	u(1)
		long_term_reference_flag;// 	2 | 5 	u(1)
	} else {
		adaptive_ref_pic_marking_mode_flag;// 	2 | 5 	u(1)
		if (adaptive_ref_pic_marking_mode_flag)
			do {
				memory_management_control_operation;// 	2 | 5 	ue(v)


				if (memory_management_control_operation == 1 || memory_management_control_operation == 3)
					difference_of_pic_nums_minus1;// 	2 | 5 	ue(v)
				if (memory_management_control_operation == 2)
					long_term_pic_num;// 	2 | 5 	ue(v)


				if (memory_management_control_operation == 3 || memory_management_control_operation == 6)
					long_term_frame_idx;// 	2 | 5 	ue(v)
				if (memory_management_control_operation == 4)
					max_long_term_frame_idx_plus1;// 	2 | 5 	ue(v)
			} while (memory_management_control_operation != 0);//
	}
}

slice_data() {	//	C 	Descriptor
	if (entropy_coding_mode_flag)
		while (!byte_aligned())
			cabac_alignment_one_bit;// 	2 	f(1)
	CurrMbAddr = first_mb_in_slice * (1 + MbaffFrameFlag);//
	moreDataFlag = 1;//
	prevMbSkipped = 0;//
	do {
		if (slice_type != I && slice_type != SI)
			if (!entropy_coding_mode_flag) {
				mb_skip_run;// 	2 	ue(v)
				prevMbSkipped = (mb_skip_run > 0);//
				for (i = 0; i < mb_skip_run; i++)
					CurrMbAddr = NextMbAddress(CurrMbAddr);//
				if (mb_skip_run > 0)
					moreDataFlag = more_rbsp_data();//
			} else {
				mb_skip_flag;// 	2 	ae(v)
				moreDataFlag = !mb_skip_flag;//
			}
		if (moreDataFlag) {
			if (MbaffFrameFlag && (CurrMbAddr % 2 == 0 || (CurrMbAddr % 2 == 1 && prevMbSkipped)))
				mb_field_decoding_flag;// 	2 	u(1) | ae(v)
			macroblock_layer();// 	2 | 3 | 4
		}
		if (!entropy_coding_mode_flag)
			moreDataFlag = more_rbsp_data();//
		else {
			if (slice_type != I && slice_type != SI)
				prevMbSkipped = mb_skip_flag;//
			if (MbaffFrameFlag && CurrMbAddr % 2 == 0)
				moreDataFlag = 1;//
			else {
				end_of_slice_flag;// 	2 	ae(v)
				moreDataFlag = !end_of_slice_flag;//
			}
		}
		CurrMbAddr = NextMbAddress(CurrMbAddr);//
	} while (moreDataFlag);//
}

macroblock_layer() {	//	C 	Descriptor
	mb_type;// 	2 	ue(v) | ae(v)
	if (mb_type == I_PCM) {
		while (!byte_aligned())
			pcm_alignment_zero_bit;// 	3 	f(1)
		for (i = 0; i < 256; i++)
			pcm_sample_luma[i];// 	3 	u(v)
		for (i = 0; i < 2 * MbWidthC * MbHeightC; i++)
			pcm_sample_chroma[i];// 	3 	u(v)
	} else {
		noSubMbPartSizeLessThan8x8Flag = 1
			if (mb_type != I_NxN && MbPartPredMode(mb_type, 0) != Intra_16x16 && NumMbPart(mb_type) == 4) {
				sub_mb_pred(mb_type);// 	2
				for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
					if (sub_mb_type[mbPartIdx] != B_Direct_8x8) {
						if (NumSubMbPart(sub_mb_type[mbPartIdx]) > 1)
							noSubMbPartSizeLessThan8x8Flag = 0;//
					} else if (!direct_8x8_inference_flag)
						noSubMbPartSizeLessThan8x8Flag = 0;//
			} else {
				if (transform_8x8_mode_flag && mb_type == I_NxN)
					transform_size_8x8_flag;// 	2 	u(1) | ae(v)
				mb_pred(mb_type);// 	2
			}
		if (MbPartPredMode(mb_type, 0) != Intra_16x16) {
			coded_block_pattern;// 	2 	me(v) | ae(v)
			if (CodedBlockPatternLuma > 0 && transform_8x8_mode_flag && mb_type != I_NxN && noSubMbPartSizeLessThan8x8Flag && (mb_type != B_Direct_16x16 || direct_8x8_inference_flag))
				transform_size_8x8_flag;// 	2 	u(1) | ae(v)
		}
		if (CodedBlockPatternLuma > 0 || CodedBlockPatternChroma > 0 || MbPartPredMode(mb_type, 0) == Intra_16x16) {
			mb_qp_delta;// 	2 	se(v) | ae(v)
			residual(0, 15);// 	3 | 4
		}
	}
}

mb_pred(mb_type) {	//	C 	Descriptor
	if (MbPartPredMode(mb_type, 0) == Intra_4x4 || MbPartPredMode(mb_type, 0) == Intra_8x8 || MbPartPredMode(mb_type, 0) == Intra_16x16) {
		if (MbPartPredMode(mb_type, 0) == Intra_4x4)
			for (luma4x4BlkIdx = 0; luma4x4BlkIdx < 16; luma4x4BlkIdx++) {
				prev_intra4x4_pred_mode_flag[luma4x4BlkIdx];// 	2 	u(1) | ae(v)
				if (!prev_intra4x4_pred_mode_flag[luma4x4BlkIdx])
					rem_intra4x4_pred_mode[luma4x4BlkIdx];// 	2 	u(3) | ae(v)
			}
		if (MbPartPredMode(mb_type, 0) == Intra_8x8)
			for (luma8x8BlkIdx = 0; luma8x8BlkIdx < 4; luma8x8BlkIdx++) {
				prev_intra8x8_pred_mode_flag[luma8x8BlkIdx];// 	2 	u(1) | ae(v)
				if (!prev_intra8x8_pred_mode_flag[luma8x8BlkIdx])
					rem_intra8x8_pred_mode[luma8x8BlkIdx];// 	2 	u(3) | ae(v)
			}
		if (ChromaArrayType == 1 || ChromaArrayType == 2)
			intra_chroma_pred_mode;//	2 	ue(v) | ae(v)
	} else if (MbPartPredMode(mb_type, 0) != Direct) {
		for (mbPartIdx = 0; mbPartIdx < NumMbPart(mb_type); mbPartIdx++)


			if ((num_ref_idx_l0_active_minus1 > 0 || mb_field_decoding_flag != field_pic_flag) && MbPartPredMode(mb_type, mbPartIdx) != Pred_L1)
				ref_idx_l0[mbPartIdx];// 	2 	te(v) | ae(v)
		for (mbPartIdx = 0; mbPartIdx < NumMbPart(mb_type); mbPartIdx++)


			if ((num_ref_idx_l1_active_minus1 > 0 || mb_field_decoding_flag != field_pic_flag) && MbPartPredMode(mb_type, mbPartIdx) != Pred_L0)
				ref_idx_l1[mbPartIdx];// 	2 	te(v) | ae(v)
		for (mbPartIdx = 0; mbPartIdx < NumMbPart(mb_type); mbPartIdx++)
			if (MbPartPredMode(mb_type, mbPartIdx) != Pred_L1)
				for (compIdx = 0; compIdx < 2; compIdx++)
					mvd_l0[mbPartIdx][0][compIdx];//	2 	se(v) | ae(v)
		for (mbPartIdx = 0; mbPartIdx < NumMbPart(mb_type); mbPartIdx++)
			if (MbPartPredMode(mb_type, mbPartIdx) != Pred_L0)
				for (compIdx = 0; compIdx < 2; compIdx++)
					mvd_l1[mbPartIdx][0][compIdx];// 	2 	se(v) | ae(v)
	}
}

sub_mb_pred(mb_type) {	//	C 	Descriptor
	for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
		sub_mb_type[mbPartIdx] 	2 	ue(v) | ae(v)
		for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
			if ((num_ref_idx_l0_active_minus1 > 0 || mb_field_decoding_flag != field_pic_flag) && mb_type != P_8x8ref0 && sub_mb_type[mbPartIdx] != B_Direct_8x8 && SubMbPredMode(sub_mb_type[mbPartIdx]) != Pred_L1)
				ref_idx_l0[mbPartIdx];// 	2 	te(v) | ae(v)
	for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
		if ((num_ref_idx_l1_active_minus1 > 0 || mb_field_decoding_flag != field_pic_flag) && sub_mb_type[mbPartIdx] != B_Direct_8x8 && SubMbPredMode(sub_mb_type[mbPartIdx]) != Pred_L0)
			ref_idx_l1[mbPartIdx];// 	2 	te(v) | ae(v)
	for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
		if (sub_mb_type[mbPartIdx] != B_Direct_8x8 && SubMbPredMode(sub_mb_type[mbPartIdx]) != Pred_L1)
			for (subMbPartIdx = 0; subMbPartIdx < NumSubMbPart(sub_mb_type[mbPartIdx]); subMbPartIdx++)
				for (compIdx = 0; compIdx < 2; compIdx++)
					mvd_l0[mbPartIdx][subMbPartIdx][compIdx];// 	2 	se(v) | ae(v)
	for (mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++)
		if (sub_mb_type[mbPartIdx] != B_Direct_8x8 && SubMbPredMode(sub_mb_type[mbPartIdx]) != Pred_L0)
			for (subMbPartIdx = 0; subMbPartIdx < NumSubMbPart(sub_mb_type[mbPartIdx]); subMbPartIdx++)
				for (compIdx = 0; compIdx < 2; compIdx++)
					mvd_l1[mbPartIdx][subMbPartIdx][compIdx];// 	2 	se(v) | ae(v)
}

residual(startIdx, endIdx) {	//	C 	Descriptor
	if (!entropy_coding_mode_flag)
		residual_block = residual_block_cavlc;//
	else
		residual_block = residual_block_cabac;//

	residual_luma(i16x16DClevel, i16x16AClevel, level4x4, level8x8, startIdx, endIdx);// 	3 | 4
	Intra16x16DCLevel = i16x16DClevel;//
	Intra16x16ACLevel = i16x16AClevel;//
	LumaLevel4x4 = level4x4;//
	LumaLevel8x8 = level8x8;//
	if (ChromaArrayType == 1 || ChromaArrayType == 2) {
		NumC8x8 = 4 / (SubWidthC * SubHeightC)
			for (iCbCr = 0; iCbCr < 2; iCbCr++)

				if ((CodedBlockPatternChroma & 3) && startIdx == 0)
					/* chroma DC residual present */

					residual_block(ChromaDCLevel[iCbCr], 0, 4 * NumC8x8 - 1, 4 * NumC8x8);// 	3 | 4
				else
					for (i = 0; i < 4 * NumC8x8; i++)
						ChromaDCLevel[iCbCr][i] = 0;//
		for (iCbCr = 0; iCbCr < 2; iCbCr++)
			for (i8x8 = 0; i8x8 < NumC8x8; i8x8++)
				for (i4x4 = 0; i4x4 < 4; i4x4++)

					if (CodedBlockPatternChroma & 2)
						/* chroma AC residual present */

						residual_block(ChromaACLevel[iCbCr][i8x8 * 4 + i4x4], Max(0, startIdx - 1), endIdx - 1, 15);// 	3 | 4
					else
						for (i = 0; i < 15; i++)
							ChromaACLevel[iCbCr][i8x8 * 4 + i4x4][i] = 0;//
	} else if (ChromaArrayType == 3) {

		residual_luma(i16x16DClevel, i16x16AClevel, level4x4, level8x8, startIdx, endIdx);// 	3 | 4
		CbIntra16x16DCLevel = i16x16DClevel;//
		CbIntra16x16ACLevel = i16x16AClevel;//
		CbLevel4x4 = level4x4;//
		CbLevel8x8 = level8x8;//

		residual_luma(i16x16DClevel, i16x16AClevel, level4x4, level8x8, startIdx, endIdx);// 	3 | 4
		CrIntra16x16DCLevel = i16x16DClevel;//
		CrIntra16x16ACLevel = i16x16AClevel;//
		CrLevel4x4 = level4x4;//
		CrLevel8x8 = level8x8;//
	}
}
residual_luma(i16x16DClevel, i16x16AClevel, level4x4, level8x8, startIdx, endIdx) { // C 	Descriptor
	if (startIdx == 0 && MbPartPredMode(mb_type, 0) == Intra_16x16)
		residual_block(i16x16DClevel, 0, 15, 16);// 	3
	for (i8x8 = 0; i8x8 < 4; i8x8++)
		if (!transform_size_8x8_flag || !entropy_coding_mode_flag)
			for (i4x4 = 0; i4x4 < 4; i4x4++) {
				if (CodedBlockPatternLuma & (1 << i8x8))
					if (MbPartPredMode(mb_type, 0) == Intra_16x16)



						residual_block(i16x16AClevel[i8x8 * 4 + i4x4], Max(0, startIdx - 1), endIdx - 1, 15);// 	3
					else



						residual_block(level4x4[i8x8 * 4 + i4x4], startIdx, endIdx, 16);// 	3 | 4
				else if (MbPartPredMode(mb_type, 0) == Intra_16x16)
					for (i = 0; i < 15; i++)
						i16x16AClevel[i8x8 * 4 + i4x4][i] = 0;//
				else
					for (i = 0; i < 16; i++)
						level4x4[i8x8 * 4 + i4x4][i] = 0;//
				if (!entropy_coding_mode_flag && transform_size_8x8_flag)
					for (i = 0; i < 16; i++)
						level8x8[i8x8][4 * i + i4x4] = level4x4[i8x8 * 4 + i4x4][i];//
			} else if (CodedBlockPatternLuma & (1 << i8x8))
				residual_block(level8x8[i8x8], 4 * startIdx, 4 * endIdx + 3, 64);// 	3 | 4
			else
				for (i = 0; i < 64; i++)
					level8x8[i8x8][i] = 0;//
}

residual_block_cavlc(coeffLevel, startIdx, endIdx, maxNumCoeff) {	//	C 	Descriptor
	for (i = 0; i < maxNumCoeff; i++)
		coeffLevel[i] = 0;//
	coeff_token;// 	3 | 4 	ce(v)
	if (TotalCoeff(coeff_token) > 0) {
		if (TotalCoeff(coeff_token) > 10 && TrailingOnes(coeff_token) < 3)
			suffixLength = 1;//
		else
			suffixLength = 0;//
		for (i = 0; i < TotalCoeff(coeff_token); i++)
			if (i < TrailingOnes(coeff_token)) {
				trailing_ones_sign_flag;// 	3 | 4 	u(1)
				levelVal[i] = 1 - 2 * trailing_ones_sign_flag;//
			} else {
				level_prefix;// 	3 | 4 	ce(v)
				levelCode = (Min(15, level_prefix) << suffixLength);//
				if (suffixLength > 0 || level_prefix >= 14) {
					level_suffix;// 	3 | 4 	u(v)
					levelCode += level_suffix;//
				}
				if (level_prefix > = 15 && suffixLength == 0)
					levelCode += 15;//
				if (level_prefix > = 16)
					levelCode += (1 << (level_prefix - 3)) - 4096;//

				if (i == TrailingOnes(coeff_token) && TrailingOnes(coeff_token) < 3)
					levelCode += 2;//
				if (levelCode % 2 == 0)
					levelVal[i] = (levelCode + 2) >> 1;//
				else
					levelVal[i] = (-levelCode - 1) >> 1;//
				if (suffixLength == 0)
					suffixLength = 1;//

				if (Abs(levelVal[i]) > (3 << (suffixLength - 1)) && suffixLength < 6)
					suffixLength++;//
			}
		if (TotalCoeff(coeff_token) < endIdx - startIdx + 1) {
			total_zeros;// 	3 | 4 	ce(v)
			zerosLeft = total_zeros;//
		} else
			zerosLeft = 0;//
		for (i = 0; i < TotalCoeff(coeff_token) - 1; i++) {
			if (zerosLeft > 0) {
				run_before;// 	3 | 4 	ce(v)
				runVal[i] = run_before;//
			} else
				runVal[i] = 0;//
			zerosLeft = zerosLeft - runVal[i];//
		}
		runVal[TotalCoeff(coeff_token) - 1] = zerosLeft;//
		coeffNum = -1;//
		for (i = TotalCoeff(coeff_token) - 1; i >= 0; i--) {
			coeffNum += runVal[i] + 1;//
			coeffLevel[startIdx + coeffNum] = levelVal[i];//
		}
	}
}

residual_block_cabac(coeffLevel, startIdx, endIdx, maxNumCoeff) {//	C 	Descriptor
	if (maxNumCoeff != 64 || ChromaArrayType == 3)
		coded_block_flag;// 	3 | 4 	ae(v)
	for (i = 0; i < maxNumCoeff; i++)
		coeffLevel[i] = 0;//
	if (coded_block_flag) {
		numCoeff = endIdx + 1;//
		i = startIdx;//
		while (i < numCoeff - 1) {
			significant_coeff_flag[i];// 	3 | 4 	ae(v)
			if (significant_coeff_flag[i]) {
				last_significant_coeff_flag[i];// 	3 | 4 	ae(v)
				if (last_significant_coeff_flag[i])
					numCoeff = i + 1;//
			}
			i++;//
		}
		coeff_abs_level_minus1[numCoeff - 1];// 	3 | 4 	ae(v)
		coeff_sign_flag[numCoeff - 1];// 	3 | 4 	ae(v)
		coeffLevel[numCoeff - 1] = (coeff_abs_level_minus1[numCoeff - 1] + 1) *	(1 - 2 * coeff_sign_flag[numCoeff - 1]);//
		for (i = numCoeff - 2; i >= startIdx; i - -)
			if (significant_coeff_flag[i]) {
				coeff_abs_level_minus1[i];// 	3 | 4 	ae(v)
				coeff_sign_flag[i];// 	3 | 4 	ae(v)
				coeffLevel[i] = (coeff_abs_level_minus1[i] + 1) * (1 - 2 * coeff_sign_flag[i]);//
			}
	}
}

seq_parameter_set_svc_extension( ) { 	C 	Descriptor
 	inter_layer_deblocking_filter_control_present_flag 	0 	u(1)
 	extended_spatial_scalability_idc 	0 	u(2)
 	if( ChromaArrayType  ==  1 || ChromaArrayType  ==  2 )
 	 	chroma_phase_x_plus1_flag 	0 	u(1)
 	if( ChromaArrayType  ==  1 )
 	 	chroma_phase_y_plus1 	0 	u(2)
 	if( extended_spatial_scalability_idc  ==  1 ) {
 	 	if( ChromaArrayType > 0 ) {
 	 	 	seq_ref_layer_chroma_phase_x_plus1_flag 	0 	u(1)
 	 	 	seq_ref_layer_chroma_phase_y_plus1 	0 	u(2)
 	 	}
 	 	seq_scaled_ref_layer_left_offset 	0 	se(v)
 	 	seq_scaled_ref_layer_top_offset 	0 	se(v)
 	 	seq_scaled_ref_layer_right_offset 	0 	se(v)
 	 	seq_scaled_ref_layer_bottom_offset 	0 	se(v)
 	}
 	seq_tcoeff_level_prediction_flag 	0 	u(1)
 	if( seq_tcoeff_level_prediction_flag ) {
 	 	adaptive_tcoeff_level_prediction_flag 	0 	u(1)
 	}
 	slice_header_restriction_flag 	0 	u(1)
}

prefix_nal_unit_svc( ) { 	//C 	Descriptor
 	if( nal_ref_idc  !=  0 ) {
 	 	store_ref_base_pic_flag;// 	2 	u(1)
  if( ( use_ref_base_pic_flag || store_ref_base_pic_flag ) && !idr_flag )
 	 	 	dec_ref_base_pic_marking( ) 	2
 	 	additional_prefix_nal_unit_extension_flag 	2 	u(1)
 	 	if( additional_prefix_nal_unit_extension_flag  ==  1 )
 	 	 	while( more_rbsp_data( ) )
 	 	 	 	additional_prefix_nal_unit_extension_data_flag 	2 	u(1)
 	 	rbsp_trailing_bits( ) 	2
 	} else if( more_rbsp_data( ) ) {
 	 	while( more_rbsp_data( ) )
 	 	 	additional_prefix_nal_unit_extension_data_flag 	2 	u(1)
 	 	rbsp_trailing_bits( ) 	2
 	}
}


slice_header_in_scalable_extension( ) { 	//C  Descriptor
 	first_mb_in_slice 	2 	ue(v)
 	slice_type 	2 	ue(v)
 	pic_parameter_set_id 	2 	ue(v)
 	if( separate_colour_plane_flag  ==  1 )
 	 	colour_plane_id 	2 	u(2)
 	frame_num 	2 	u(v)
 	if( !frame_mbs_only_flag ) {
 	 	field_pic_flag 	2 	u(1)
 	 	if( field_pic_flag )
 	 	 	bottom_field_flag 	2 	u(1)
 	}
 	if( idr_flag  ==  1 )
 	 	idr_pic_id 	2 	ue(v)

	 	if( pic_order_cnt_type  ==  0 ) {
	 	 	pic_order_cnt_lsb 	2 	u(v)
	 	 	if( bottom_field_pic_order_in_frame_present_flag && !field_pic_flag )
	 	 	 	delta_pic_order_cnt_bottom 	2 	se(v)
	 	}
	 	if( pic_order_cnt_type  ==  1 && !delta_pic_order_always_zero_flag ) {
	 	 	delta_pic_order_cnt[ 0 ] 	2 	se(v)
	 	 	if( bottom_field_pic_order_in_frame_present_flag && !field_pic_flag )
	 	 	 	delta_pic_order_cnt[ 1 ] 	2 	se(v)
	 	}
	 	if( redundant_pic_cnt_present_flag )
	 	 	redundant_pic_cnt 	2 	ue(v)
	 	if( quality_id  ==  0 ) {
	 	 	if( slice_type  ==  EB )
	 	 	 	direct_spatial_mv_pred_flag 	2 	u(1)
	 	 	if( slice_type  ==  EP || slice_type  ==  EB ) {
	 	 	 	num_ref_idx_active_override_flag 	2 	u(1)
	 	 	 	if( num_ref_idx_active_override_flag ) {
	 	 	 	 	num_ref_idx_l0_active_minus1 	2 	ue(v)
	 	 	 	 	if( slice_type  ==  EB )
	 	 	 	 	 	num_ref_idx_l1_active_minus1 	2 	ue(v)
	 	 	 	}
	 	 	}
	 	 	ref_pic_list_modification( ) 	2
	 	 	if( ( weighted_pred_flag && slice_type == EP  ) ||
	 	 	 	( weighted_bipred_idc  ==  1 && slice_type  ==  EB ) ) {
	 	 	 	if( !no_inter_layer_pred_flag )
	 	 	 	 	base_pred_weight_table_flag 	2 	u(1)
	 	 	 	if( no_inter_layer_pred_flag || !base_pred_weight_table_flag )
	 	 	 	 	pred_weight_table( ) 	2
	 	 	}
	 	 	if( nal_ref_idc  !=  0 ) {
	 	 	 	dec_ref_pic_marking( ) 	2
	 	 	 	if( !slice_header_restriction_flag ) {
	 	 	 	 	store_ref_base_pic_flag 	2 	u(1)
    if( ( use_ref_base_pic_flag || store_ref_base_pic_flag ) && !idr_flag )
	 	 	 	 	 	dec_ref_base_pic_marking( ) 	2
	 	 	 	}
	 	 	}
	 	}
	 	if( entropy_coding_mode_flag && slice_type  !=  EI )
	 	 	cabac_init_idc 	2 	ue(v)
	 	slice_qp_delta 	2 	se(v)
	 	if( deblocking_filter_control_present_flag ) {
	 	 	disable_deblocking_filter_idc 	2 	ue(v)
	 	 	if( disable_deblocking_filter_idc  !=  1 ) {
	 	 	 	slice_alpha_c0_offset_div2 	2 	se(v)
	 	 	 	slice_beta_offset_div2 	2 	se(v)

	 	 	}
	 	}
	 	if( num_slice_groups_minus1 > 0 &&
	 	 	slice_group_map_type  >=  3 && slice_group_map_type  <=  5 )
	 	 	slice_group_change_cycle 	2 	u(v)
	 	if( !no_inter_layer_pred_flag && quality_id  ==  0 ) {
	 	 	ref_layer_dq_id 	2 	ue(v)
	 	 	if( inter_layer_deblocking_filter_control_present_flag ) {
	 	 	 	disable_inter_layer_deblocking_filter_idc 	2 	ue(v)
	 	 	 	if( disable_inter_layer_deblocking_filter_idc  !=  1 ) {
	 	 	 	 	inter_layer_slice_alpha_c0_offset_div2 	2 	se(v)
	 	 	 	 	inter_layer_slice_beta_offset_div2 	2 	se(v)
	 	 	 	}
	 	 	}
	 	 	constrained_intra_resampling_flag 	2 	u(1)
	 	 	if( extended_spatial_scalability_idc  ==  2 ) {
	 	 	 	if( ChromaArrayType > 0 ) {
	 	 	 	 	ref_layer_chroma_phase_x_plus1_flag 	2 	u(1)
	 	 	 	 	ref_layer_chroma_phase_y_plus1 	2 	u(2)
	 	 	 	}
	 	 	 	scaled_ref_layer_left_offset 	2 	se(v)
	 	 	 	scaled_ref_layer_top_offset 	2 	se(v)
	 	 	 	scaled_ref_layer_right_offset 	2 	se(v)
	 	 	 	scaled_ref_layer_bottom_offset 	2 	se(v)
	 	 	}
	 	}
	 	if( !no_inter_layer_pred_flag ) {
	 	 	slice_skip_flag 	2 	u(1)
	 	 	if( slice_skip_flag )
	 	 	 	num_mbs_in_slice_minus1 	2 	ue(v)
	 	 	else {
	 	 	 	adaptive_base_mode_flag 	2 	u(1)
	 	 	 	if( !adaptive_base_mode_flag )
	 	 	 	 	default_base_mode_flag 	2 	u(1)
	 	 	 	if( !default_base_mode_flag ) {
	 	 	 	 	adaptive_motion_prediction_flag 	2 	u(1)
	 	 	 	 	if( !adaptive_motion_prediction_flag )
	 	 	 	 	 	default_motion_prediction_flag 	2 	u(1)
	 	 	 	}
	 	 	 	adaptive_residual_prediction_flag 	2 	u(1)
	 	 	 	if( !adaptive_residual_prediction_flag )
	 	 	 	 	default_residual_prediction_flag 	2 	u(1)
	 	 	}
	 	 	if( adaptive_tcoeff_level_prediction_flag )
	 	 	 	tcoeff_level_prediction_flag 	2 	u(1)
	 	}
	 	if( !slice_header_restriction_flag && !slice_skip_flag ) {
	 	 	scan_idx_start 	2 	u(4)
	 	 	scan_idx_end 	2 	u(4)
 	}
}

G.7.3.3.5 Decoded reference base picture marking syntax

dec_ref_base_pic_marking( ) { 	//C  Descriptor
 	adaptive_ref_base_pic_marking_mode_flag 	2 	u(1)
 	if( adaptive_ref_base_pic_marking_mode_flag )
 	 	do {
 	 	 	memory_management_base_control_operation 	2 	ue(v)
 	 	 	if( memory_management_base_control_operation  ==  1 )
 	 	 	 	difference_of_base_pic_nums_minus1 	2 	ue(v)
 	 	 	if( memory_management_base_control_operation  ==  2  )
 	 	 	 	long_term_base_pic_num 	2 	ue(v)
 	 	} while( memory_management_base_control_operation  !=  0 )
}


slice_data_in_scalable_extension( ) { 	//C  Descriptor
 	if( entropy_coding_mode_flag)
 	 	while( !byte_aligned( ) )
 	 	 	cabac_alignment_one_bit 	2 	f(1)
 	CurrMbAddr = first_mb_in_slice * ( 1 + MbaffFrameFlag )
 	moreDataFlag = 1
 	prevMbSkipped = 0
 	do {
 	 	if( slice_type  !=  EI )
 	 	 	if( !entropy_coding_mode_flag ) {
 	 	 	 	mb_skip_run 	2 	ue(v)
 	 	 	 	prevMbSkipped = ( mb_skip_run > 0 )
 	 	 	 	for( i = 0; i < mb_skip_run; i++ )
 	 	 	 	 	CurrMbAddr = NextMbAddress( CurrMbAddr )
 	 	 	 	if( mb_skip_run > 0 )
 	 	 	 	 	moreDataFlag = more_rbsp_data( )
 	 	 	} else {
 	 	 	 	mb_skip_flag 	2 	ae(v)
 	 	 	 	moreDataFlag = !mb_skip_flag
 	 	 	}
 	 	if( moreDataFlag )  {
 	 	 	if( MbaffFrameFlag && ( ( CurrMbAddr % 2 )  ==  0 || ( ( CurrMbAddr % 2 )  ==  1 && prevMbSkipped ) ) )
 	 	 	 	mb_field_decoding_flag 	2 	u(1) | ae(v)
 	 	 	macroblock_layer_in_scalable_extension( ) 	2 | 3 | 4
 	 	}
 	 	if( !entropy_coding_mode_flag )
 	 	 	moreDataFlag = more_rbsp_data( )
 	 	else {
 	 	 	if( slice_type  !=  EI )
 	 	 	 	prevMbSkipped = mb_skip_flag
 	 	 	if( MbaffFrameFlag && ( CurrMbAddr % 2 )  ==  0 )
 	 	 	 	moreDataFlag = 1
 	 	 	else {
 	 	 	 	end_of_slice_flag 	2 	ae(v)
 	 	 	 	moreDataFlag = !end_of_slice_flag
 	 	 	}
 	 	}
 	 	CurrMbAddr = NextMbAddress( CurrMbAddr )
 	} while( moreDataFlag )
}

macroblock_layer_in_scalable_extension( ) {
 	if( InCropWindow( CurrMbAddr ) && adaptive_base_mode_flag )
 	 	base_mode_flag
 	if( !base_mode_flag)
 	 	mb_type
 	if( mb_type  ==  I_PCM ) {
 	 	while( !byte_aligned( ) )
 	 	 	pcm_alignment_zero_bit
 	 	for( i = 0; i < 256; i++ )
 	 	 	pcm_sample_luma[ i ]
 	 	for( i = 0; i < 2 * MbWidthC * MbHeightC; i++ )
 	 	 	pcm_sample_chroma[ i ]
 	} else {
 	 	if( !base_mode_flag )  {
 	 	 	noSubMbPartSizeLessThan8x8Flag = 1


 	 	 	if( mb_type  !=  I_NxN &&
   MbPartPredMode( mb_type, 0 )  !=  Intra_16x16 && NumMbPart( mb_type )  ==  4 ) {
 	 	 	 	sub_mb_pred_in_scalable_extension( mb_type )
 	 	 	 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	 	 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 ) {
 	 	 	 	 	 	if( NumSubMbPart( sub_mb_type[ mbPartIdx ] ) > 1 )
 	 	 	 	 	 	 	noSubMbPartSizeLessThan8x8Flag = 0
 	 	 	 	 	} else if( !direct_8x8_inference_flag )
 	 	 	 	 	 	noSubMbPartSizeLessThan8x8Flag = 0
 	 	 	} else {
 	 	 	 	if( transform_8x8_mode_flag && mb_type  ==  I_NxN )
 	 	 	 	 	transform_size_8x8_flag
 	 	 	 	mb_pred_in_scalable_extension( mb_type )
 	 	 	}
 	 	}





 	 	if( adaptive_residual_prediction_flag && slice_type  !=  EI &&
 	InCropWindow( CurrMbAddr ) &&
 	( base_mode_flag ||
 	  ( MbPartPredMode( mb_type, 0 )  !=  Intra_16x16 &&
 	 	MbPartPredMode( mb_type, 0 )  !=  Intra_8x8 &&
 	 	MbPartPredMode( mb_type, 0 )  !=  Intra_4x4 ) ) )
 	 	 	residual_prediction_flag
 	 	if( scan_idx_end >= scan_idx_start ) {

 	 	 	if( base_mode_flag ||
 	 	MbPartPredMode( mb_type, 0 )  !=  Intra_16x16 ) {
 	 	 	 	coded_block_pattern






 	 	  if( CodedBlockPatternLuma > 0 && transform_8x8_mode_flag && ( base_mode_flag || ( mb_type  !=  I_NxN && noSubMbPartSizeLessThan8x8Flag && ( mb_type  !=  B_Direct_16x16 || direct_8x8_inference_flag ) ) ) )
 	 	 	 	 	transform_size_8x8_flag
 	 	 	}


 	 	 if( CodedBlockPatternLuma > 0 || CodedBlockPatternChroma > 0 ||
 	 	 MbPartPredMode( mb_type, 0 )  ==  Intra_16x16 )  {
 	 	 	 	mb_qp_delta
 	 	 	 	residual( scan_idx_start, scan_idx_end )
 	 	 	}
 	 	}
 	}
}

mb_pred_in_scalable_extension( mb_type ) { 	//C  Descriptor


 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_4x4 || MbPartPredMode( mb_type, 0 )  ==  Intra_8x8 ||
 	MbPartPredMode( mb_type, 0 )  ==  Intra_16x16 ) {
 	 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_4x4 )
 	 	 	for( luma4x4BlkIdx = 0; luma4x4BlkIdx < 16; luma4x4BlkIdx++ ) {
 	 	 	 	prev_intra4x4_pred_mode_flag[ luma4x4BlkIdx ] 	2 	u(1) | ae(v)
 	 	 	 	if( !prev_intra4x4_pred_mode_flag[ luma4x4BlkIdx ] )
 	 	 	 	 	rem_intra4x4_pred_mode[ luma4x4BlkIdx ] 	2 	u(3) | ae(v)
 	 	 	}
 	 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_8x8 )
 	 	 	for( luma8x8BlkIdx = 0; luma8x8BlkIdx < 4; luma8x8BlkIdx++ ) {
 	 	 	 	prev_intra8x8_pred_mode_flag[ luma8x8BlkIdx ] 	2 	u(1) | ae(v)
 	 	 	 	if( !prev_intra8x8_pred_mode_flag[ luma8x8BlkIdx ] )
 	 	 	 	 	rem_intra8x8_pred_mode[ luma8x8BlkIdx ] 	2 	u(3) | ae(v)
 	 	 	}
 	 	if( ChromaArrayType  !=  0 )
 	 	 	intra_chroma_pred_mode 	2 	ue(v) | ae(v)
 	} else if( MbPartPredMode( mb_type, 0 )  !=  Direct ) {
 	 	if( InCropWindow( CurrMbAddr ) && adaptive_motion_prediction_flag ) {

	 	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++ )
	 	 	 	 	if( MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L1 )
	 	 	 	 	 	motion_prediction_flag_l0[ mbPartIdx ] 	2 	u(1) | ae(v)
	 	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++ )
	 	 	 	 	if( MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L0 )
	 	 	 	 	 	motion_prediction_flag_l1[ mbPartIdx ] 	2 	u(1) | ae(v)
	 	 	}
	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++ )
	 	 	 	if( ( num_ref_idx_l0_active_minus1 > 0 ||
 	 	 	 	   mb_field_decoding_flag  !=  field_pic_flag ) && MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L1 &&
	 	 	 	 	!motion_prediction_flag_l0[ mbPartIdx ]  )
	 	 	 	 	ref_idx_l0[ mbPartIdx ] 	2 	te(v) | ae(v)
	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++)
	 	 	 	if( ( num_ref_idx_l1_active_minus1 > 0 ||
 	 	 	 	   mb_field_decoding_flag  !=  field_pic_flag ) && MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L0 &&
	 	 	 	 	!motion_prediction_flag_l1[ mbPartIdx ] )
	 	 	 	 	ref_idx_l1[ mbPartIdx ] 	2 	te(v) | ae(v)
	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++ )
	 	 	 	if( MbPartPredMode ( mb_type, mbPartIdx )  !=  Pred_L1 )
	 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
	 	 	 	 	 	mvd_l0[ mbPartIdx ][ 0 ][ compIdx ] 	2 	se(v) | ae(v)
	 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++ )
	 	 	 	if( MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L0 )
	 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
	 	 	 	 	 	mvd_l1[ mbPartIdx ][ 0 ][ compIdx ] 	2 	se(v) | ae(v)
	 	}
}
G.7.3.6.2 Sub-macroblock prediction in scalable extension syntax

sub_mb_pred_in_scalable_extension( mb_type ) { 	//C  Descriptor
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	sub_mb_type[ mbPartIdx ] 	2 	ue(v) | ae(v)
 	if( InCropWindow( CurrMbAddr ) && adaptive_motion_prediction_flag ) {
 	 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
   if( SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Direct && SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L1 )
 	 	 	 	motion_prediction_flag_l0[ mbPartIdx ] 	2 	u(1) | ae(v)
 	 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
   if( SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Direct && SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L0 )
 	 	 	 	motion_prediction_flag_l1[ mbPartIdx ] 	2 	u(1) | ae(v)
 	}
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
  if( ( num_ref_idx_l0_active_minus1 > 0 || mb_field_decoding_flag  !=  field_pic_flag ) && mb_type  !=  P_8x8ref0 &&
 	 	 	sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L1 &&
 	 	 	!motion_prediction_flag_l0[ mbPartIdx ] )
 	 	 	ref_idx_l0[ mbPartIdx ] 	2 	te(v) | ae(v)
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
  if( ( num_ref_idx_l1_active_minus1 > 0 || mb_field_decoding_flag  !=  field_pic_flag ) && sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L0 &&
 	 	 	!motion_prediction_flag_l1[ mbPartIdx ] )
 	 	 	ref_idx_l1[ mbPartIdx ] 	2 	te(v) | ae(v)
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L1 )
 	 	 	for( subMbPartIdx = 0;
 	 	 	 	   subMbPartIdx < NumSubMbPart( sub_mb_type[ mbPartIdx ] );  	 	 	 	   subMbPartIdx++)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l0[ mbPartIdx ][ subMbPartIdx ][ compIdx ] 	2 	se(v) | ae(v)
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L0 )
 	 	 	for( subMbPartIdx = 0;
 	 	 	 	   subMbPartIdx < NumSubMbPart( sub_mb_type[ mbPartIdx ] );  	 	 	 	   subMbPartIdx++)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l1[ mbPartIdx ][ subMbPartIdx ][ compIdx ] 	2 	se(v) | ae(v)
}

scalability_info( payloadSize ) { 	//C  Descriptor
 	temporal_id_nesting_flag 	5 	u(1)
 	priority_layer_info_present_flag 	5 	u(1)
 	priority_id_setting_flag 	5 	u(1)
 	num_layers_minus1 	5 	ue(v)
 	for( i = 0; i <= num_layers_minus1; i++ ) {
 	 	layer_id[ i ] 	5 	ue(v)
 	 	priority_id[ i ] 	5 	u(6)
 	 	discardable_flag[ i ] 	5 	u(1)
 	 	dependency_id[ i ] 	5 	u(3)
 	 	quality_id[ i ] 	5 	u(4)
 	 	temporal_id[ i ] 	5 	u(3)
 	 	sub_pic_layer_flag[ i ] 	5 	u(1)
 	 	sub_region_layer_flag[ i ] 	5 	u(1)
 	 	iroi_division_info_present_flag[ i ] 	5 	u(1)
 	 	profile_level_info_present_flag[ i ] 	5 	u(1)
 	 	bitrate_info_present_flag[ i ] 	5 	u(1)
 	 	frm_rate_info_present_flag[ i ] 	5 	u(1)
 	 	frm_size_info_present_flag[ i ] 	5 	u(1)
 	 	layer_dependency_info_present_flag[ i ] 	5 	u(1)
 	 	parameter_sets_info_present_flag[ i ] 	5 	u(1)
 	 	bitstream_restriction_info_present_flag[ i ] 	5 	u(1)
 	 	exact_inter_layer_pred_flag[ i ] 	5 	u(1)
 	 	if( sub_pic_layer_flag[ i ] || iroi_division_info_present_flag[ i ] )
 	 	 	exact_sample_value_match_flag[ i ] 	5 	u(1)
 	 	layer_conversion_flag[ i ] 	5 	u(1)
 	 	layer_output_flag[ i ] 	5 	u(1)
 	 	if( profile_level_info_present_flag[ i ] )
 	 	 	layer_profile_level_idc[ i ] 	5 	u(24)
 	 	if( bitrate_info_present_flag[ i ] ) {
 	 	 	avg_bitrate[ i ] 	5 	u(16)
 	 	 	max_bitrate_layer[ i ] 	5 	u(16)
 	 	 	max_bitrate_layer_representation[ i ] 	5 	u(16)
 	 	 	max_bitrate_calc_window[ i ] 	5 	u(16)
 	 	}
 	 	if( frm_rate_info_present_flag[ i ] ) {
 	 	 	constant_frm_rate_idc[ i ] 	5 	u(2)
 	 	 	avg_frm_rate[ i ] 	5 	u(16)
 	 	}
 	 	if( frm_size_info_present_flag[ i ] || iroi_division_info_present_flag[ i ] ) {
 	 	 	frm_width_in_mbs_minus1[ i ] 	5 	ue(v)
 	 	 	frm_height_in_mbs_minus1[ i ] 	5 	ue(v)
 	 	}
 	 	if( sub_region_layer_flag[ i ] ) {
 	 	 	base_region_layer_id[ i ] 	5 	ue(v)

	 	 	 	dynamic_rect_flag[ i ] 	5 	u(1)
	 	 	 	if( !dynamic_rect_flag[ i ] ) {
	 	 	 	 	horizontal_offset[ i ] 	5 	u(16)
	 	 	 	 	vertical_offset[ i ] 	5 	u(16)
	 	 	 	 	region_width[ i ] 	5 	u(16)
	 	 	 	 	region_height[ i ] 	5 	u(16)
	 	 	 	}
	 	 	}
	 	 	if( sub_pic_layer_flag[ i ] )
	 	 	 	roi_id[ i ] 	5 	ue(v)
	 	 	if( iroi_division_info_present_flag[ i ] ) {
	 	 	 	iroi_grid_flag[ i ] 	5 	u(1)
	 	 	 	if( iroi_grid_flag[ i ] ) {
	 	 	 	 	grid_width_in_mbs_minus1[ i ] 	5 	ue(v)
	 	 	 	 	grid_height_in_mbs_minus1[ i ] 	5 	ue(v)
	 	 	 	} else {
	 	 	 	 	num_rois_minus1[ i ] 	5 	ue(v)
	 	 	 	 	for (j = 0; j <= num_rois_minus1[ i ]; j++ ) {
	 	 	 	 	 	first_mb_in_roi[ i ][ j ] 	5 	ue(v)
	 	 	 	 	 	roi_width_in_mbs_minus1[ i ][ j ] 	5 	ue(v)
	 	 	 	 	 	roi_height_in_mbs_minus1[ i ][ j ] 	5 	ue(v)
	 	 	 	 	}
	 	 	 	}
	 	 	}
	 	 	if( layer_dependency_info_present_flag[ i ] ) {
	 	 	 	num_directly_dependent_layers[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j < num_directly_dependent_layers[ i ]; j++ )
	 	 	 	 	directly_dependent_layer_id_delta_minus1[ i ][ j ] 	5 	ue(v)
	 	 	} else
	 	 	 	layer_dependency_info_src_layer_id_delta[ i ] 	5 	ue(v)
	 	 	if( parameter_sets_info_present_flag[ i ] ) {
	 	 	 	num_seq_parameter_sets[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j < num_seq_parameter_sets[ i ]; j++ )
	 	 	 	 	seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	 	num_subset_seq_parameter_sets[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j < num_subset_seq_parameter_sets[ i ]; j++ )
	 	 	 	 	subset_seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	 	num_pic_parameter_sets_minus1[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j <= num_pic_parameter_sets_minus1[ i ]; j++ )
	 	 	 	 	pic_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	} else
	 	 	 	parameter_sets_info_src_layer_id_delta[ i ] 	5 	ue(v)
	 	 	if( bitstream_restriction_info_present_flag[ i ] ) {
	 	 	 	motion_vectors_over_pic_boundaries_flag[ i ] 	5 	u(1)
	 	 	 	max_bytes_per_pic_denom[ i ] 	5 	ue(v)
	 	 	 	max_bits_per_mb_denom[ i ] 	5 	ue(v)
	 	 	 	log2_max_mv_length_horizontal[ i ] 	5 	ue(v)
	 	 	 	log2_max_mv_length_vertical[ i ] 	5 	ue(v)
 	 	 	max_num_reorder_frames[ i ] 	5 	ue(v)
 	 	 	max_dec_frame_buffering[ i ] 	5 	ue(v)
 	 	}
 	 	if( layer_conversion_flag[ i ] ) {
 	 	 	conversion_type_idc[ i ] 	5 	ue(v)
 	 	 	for( j=0; j < 2; j++ ) {
 	 	 	 	rewriting_info_flag[ i ][ j ] 	5 	u(1)
 	 	 	 	if( rewriting_info_flag[ i ][ j ] ) {
 	 	 	 	 	rewriting_profile_level_idc[ i ][ j ] 	5 	u(24)
 	 	 	 	 	rewriting_avg_bitrate[ i ][ j ] 	5 	u(16)
 	 	 	 	 	rewriting_max_bitrate[ i ][ j ] 	5 	u(16)
 	 	 	 	}
 	 	 	}
 	 	}
 	}
 	if( priority_layer_info_present_flag ) {
 	 	pr_num_dIds_minus1 	5 	ue(v)
 	 	for( i = 0; i <= pr_num_dIds_minus1; i++ ) {
 	 	 	pr_dependency_id[ i ] 	5 	u(3)
 	 	 	pr_num_minus1[ i ] 	5 	ue(v)
 	 	 	for( j = 0; j <= pr_num_minus1[ i ]; j++ ) {
 	 	 	 	pr_id[ i ][ j ] 	5 	ue(v)
 	 	 	 	pr_profile_level_idc[ i ][ j ] 	5 	u(24)
 	 	 	 	pr_avg_bitrate[ i ][ j ] 	5 	u(16)
 	 	 	 	pr_max_bitrate[ i ][ j ] 	5 	u(16)
 	 	 	}
 	 	}
 	}
 	if( priority_id_setting_flag ) {
 	 	PriorityIdSettingUriIdx = 0
 	 	do
 	 	 	priority_id_setting_uri[ PriorityIdSettingUriIdx ] 	5 	b(8)
 	 	while( priority_id_setting_uri[ PriorityIdSettingUriIdx++ ]  !=  0 )
 	}
}

G.13.1.2 Sub-picture scalable layer SEI message syntax

sub_pic_scalable_layer( payloadSize ) { 	//C  Descriptor
 	layer_id 	5 	ue(v)
}

G.13.1.3 Non-required layer representation SEI message syntax

non_required_layer_rep( payloadSize ) { 	//C  Descriptor
 	num_info_entries_minus1 	5 	ue(v)
 	for( i = 0; i <= num_info_entries_minus1; i++ ) {
 	 	entry_dependency_id[ i ] 	5 	u(3)
 	 	num_non_required_layer_reps_minus1[ i ] 	5 	ue(v)
 	 	for( j = 0; j <= num_non_required_layer_reps_minus1[ i ]; j++ ) {
 	 	 	non_required_layer_rep_dependency_id[ i ][ j ] 	5 	u(3)
 	 	 	non_required_layer_rep_quality_id[ i ][ j ] 	5 	u(4)
 	 	}
 	}
}

G.13.1.4 Priority layer information SEI message syntax

priority_layer_info( payloadSize ) { 	//C  Descriptor
 	pr_dependency_id 	5 	u(3)
 	num_priority_ids 	5 	u(4)
 	for( i = 0; i < num_priority_ids; i++ ) {
 	 	alt_priority_id[ i ] 	5 	u(6)
 	}
}

G.13.1.5 Layers not present SEI message syntax

layers_not_present( payloadSize ) { 	//C  Descriptor
 	num_layers 	5 	ue(v)
 	for( i = 0; i < num_layers; i++ ) {
 	 	layer_id[ i ] 	5 	ue(v)
 	}
}
G.13.1.6 Layer dependency change SEI message syntax

layer_dependency_change( payloadSize ) { 	//C  Descriptor
 	num_layers_minus1 	5 	ue(v)
 	for( i = 0; i <= num_layers_minus1; i++ ) {
 	 	layer_id[ i ] 	5 	ue(v)
 	 	layer_dependency_info_present_flag[ i ] 	5 	u(1)
 	 	if( layer_dependency_info_present_flag[ i ] ) {
 	 	 	num_directly_dependent_layers[ i ] 	5 	ue(v)
 	 	 	for ( j = 0; j < num_directly_dependent_layers[ i ]; j++ )
 	 	 	 	directly_dependent_layer_id_delta_minus1[ i ][ j ] 	5 	ue(v)
 	 	} else {
 	 	 	layer_dependency_info_src_layer_id_delta_minus1[ i ] 	5 	ue(v)
 	 	}
 	}
}

G.13.1.7 Scalable nesting SEI message syntax

scalable_nesting( payloadSize ) { 	//C  Descriptor
 	all_layer_representations_in_au_flag 	5 	u(1)
 	if( all_layer_representations_in_au_flag  ==  0) {
 	 	num_layer_representations_minus1 	5 	ue(v)
 	 	for( i = 0; i <= num_layer_representations_minus1; i++ ) {
 	 	 	sei_dependency_id[ i ] 	5 	u(3)
 	 	 	sei_quality_id[ i ] 	5 	u(4)
 	 	}
 	 	sei_temporal_id 	5 	u(3)
 	}
 	while( !byte_aligned( ) )
 	 	sei_nesting_zero_bit /* equal to 0 */ 	5 	f(1)
 	do
 	 	sei_message( ) 	5
 	while( more_rbsp_data( ) )
}

G.13.1.8 Base layer temporal HRD SEI message syntax

base_layer_temporal_hrd( payloadSize ) { 	//C  Descriptor
 num_of_temporal_layers_in_base_layer_minus1 	5 	ue(v)
 for( i = 0; i <= num_of_temporal_layers_in_base_layer_minus1; i++) {
 	 	sei_temporal_id[ i ] 	5 	u(3)
 	 	sei_timing_info_present_flag[ i ] 	5 	u(1)
 	 	if( sei_timing_info_present_flag[ i ] ) {
 	 	 	sei_num_units_in_tick[ i ] 	5 	u(32)
 	 	 	sei_time_scale[ i ] 	5 	u(32)
 	 	 	sei_fixed_frame_rate_flag[ i ] 	5 	u(1)
 	 	}
 	 	sei_nal_hrd_parameters_present_flag[ i ] 	5 	u(1)
 	 	if( sei_nal_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	5
 	 	sei_vcl_hrd_parameters_present_flag[ i ] 	5 	u(1)
 	 	if( sei_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	5
 	 	if( sei_nal_hrd_parameters_present_flag[ i ] || sei_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	sei_low_delay_hrd_flag[ i ] 	5 	u(1)
 	 	sei_pic_struct_present_flag[ i ] 	5 	u(1)
 	}
}

G.13.1.9 Quality layer integrity check SEI message syntax

quality_layer_integrity_check( payloadSize ) { 	//C  Descriptor
 	num_info_entries_minus1 	5 	ue(v)
 	for( i = 0; i <= num_info_entries_minus1; i++ ) {
 	 	entry_dependency_id[ i ] 	5 	u(3)
 	 	quality_layer_crc[ i ] 	5 	u(16)
 	}
}

G.13.1.10 Redundant picture property SEI message syntax

redundant_pic_property( payloadSize ) { 	//C  Descriptor
 	num_dIds_minus1 	5 	ue(v)
 	for( i = 0; i <= num_dIds_minus1; i++ ) {
 	 	dependency_id[ i ] 	5 	u(3)
 	 	num_qIds_minus1[ i ] 	5 	ue(v)
 	 	for( j = 0; j <= num_qIds_minus1[ i ]; j++ ) {
 	 	 	quality_id[ i ][ j ] 	5 	u(4)
 	 	 	num_redundant_pics_minus1[ i ][ j ] 	5 	ue(v)
 	 	 	for( k = 0; k <= num_redundant_pics_minus1[ i ][ j ]; k++ ) {
 	 	 	 	redundant_pic_cnt_minus1[ i ][ j ][ k ] 	5 	ue(v)
 	 	 	 	pic_match_flag[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	if( !pic_match_flag[ i ][ j ][ k ]) {
 	 	 	 	 	mb_type_match_flag[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	 	motion_match_flag[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	 	residual_match_flag[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	 	intra_samples_match_flag[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	}
 	 	 	}
 	 	}
 	}
}

G.13.1.11 Temporal level zero dependency representation index SEI message syntax

tl0_dep_rep_index( payloadSize ) { 	//C  Descriptor
 	tl0_dep_rep_idx 	5 	u(8)
 	effective_idr_pic_id 	5 	u(16)
}

G.13.1.12 Temporal level switching point SEI message syntax

tl_switching_point( payloadSize ) { 	//C  Descriptor
 	delta_frame_num 	5 	se(v)
}

svc_vui_parameters_extension( ) { 	//C  Descriptor
 	vui_ext_num_entries_minus1 	0 	ue(v)
 	for( i = 0; i <= vui_ext_num_entries_minus1; i++ ) {
 	 	vui_ext_dependency_id[ i ] 	0 	u(3)
 	 	vui_ext_quality_id[ i ] 	0 	u(4)
 	 	vui_ext_temporal_id[ i ] 	0 	u(3)
 	 	vui_ext_timing_info_present_flag[ i ] 	0 	u(1)
 	 	if( vui_ext_timing_info_present_flag[ i ] ) {
 	 	 	vui_ext_num_units_in_tick[ i ] 	0 	u(32)
 	 	 	vui_ext_time_scale[ i ] 	0 	u(32)
 	 	 	vui_ext_fixed_frame_rate_flag[ i ] 	0 	u(1)
 	 	}
 	 	vui_ext_nal_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_ext_nal_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0
 	 	vui_ext_vcl_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_ext_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0

 	 	if( vui_ext_nal_hrd_parameters_present_flag[ i ] || vui_ext_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	vui_ext_low_delay_hrd_flag[ i ] 	0 	u(1)
 	 	vui_ext_pic_struct_present_flag[ i ]  	0 	u(1)
 	}
}

nal_unit_header_mvc_extension( ) { 	//C  Descriptor
 	non_idr_flag 	All 	u(1)
 	priority_id 	All 	u(6)
 	view_id 	All 	u(10)
 	temporal_id 	All 	u(3)
 	anchor_pic_flag 	All 	u(1)
 	inter_view_flag 	All 	u(1)
 	reserved_one_bit 	All 	u(1)
}

seq_parameter_set_mvc_extension( ) { 	//C  Descriptor
	 	num_views_minus1 	0 	ue(v)
	 	for( i = 0; i <= num_views_minus1; i++ )
	 	 	view_id[ i ] 	0 	ue(v)
	 	for( i = 1; i <= num_views_minus1; i++ ) {
	 	 	num_anchor_refs_l0[ i ] 	0 	ue(v)
	 	 	for( j = 0; j < num_anchor_refs_l0[ i ]; j++ )
	 	 	 	anchor_ref_l0[ i ][ j ] 	0 	ue(v)
	 	 	num_anchor_refs_l1[ i ] 	0 	ue(v)
	 	 	for( j = 0; j < num_anchor_refs_l1[ i ]; j++ )
	 	 	 	anchor_ref_l1[ i ][ j ] 	0 	ue(v)
	 	}
	 	for( i = 1; i <= num_views_minus1; i++ ) {
	 	 	num_non_anchor_refs_l0[ i ] 	0 	ue(v)
	 	 	for( j = 0; j < num_non_anchor_refs_l0[ i ]; j++ )
	 	 	 	non_anchor_ref_l0[ i ][ j ] 	0 	ue(v)
	 	 	num_non_anchor_refs_l1[ i ] 	0 	ue(v)
	 	 	for( j = 0; j < num_non_anchor_refs_l1[ i ]; j++ )
	 	 	 	non_anchor_ref_l1[ i ][ j ] 	0 	ue(v)
	 	}
	 	num_level_values_signalled_minus1 	0 	ue(v)
	 	for( i = 0; i <= num_level_values_signalled_minus1; i++ ) {
	 	 	level_idc[ i ] 	0 	u(8)
	 	 	num_applicable_ops_minus1[ i ] 	0 	ue(v)
	 	 	for( j = 0; j <= num_applicable_ops_minus1[ i ]; j++ ) {
	 	 	 	applicable_op_temporal_id[ i ][ j ] 	0 	u(3)
	 	 	 	applicable_op_num_target_views_minus1[ i ][ j ] 	0 	ue(v)
	 	 	 	for( k = 0; k <= applicable_op_num_target_views_minus1[ i ][ j ]; k++ )
	 	 	 	 	applicable_op_target_view_id[ i ][ j ][ k ] 	0 	ue(v)
	 	 	 	applicable_op_num_views_minus1[ i ][ j ] 	0 	ue(v)
	 	 	}
	 	}
	 	if( profile_idc  ==  134 ) {
	 	 	mfc_format_idc 	0 	u(6)
	 	 	if( mfc_format_idc  ==  0 || mfc_format_idc  ==  1 ) {
	 	 	 	default_grid_position_flag 	0 	u(1)
	 	 	 	if( !default_grid_position_flag ) {
	 	 	 	 	view0_grid_position_x 	0 	u(4)
	 	 	 	 	view0_grid_position_y 	0 	u(4)
	 	 	 	 	view1_grid_position_x 	0 	u(4)
	 	 	 	 	view1_grid_position_y 	0 	u(4)
	 	 	 	}
	 	 	}
	 	 	rpu_filter_enabled_flag 	0 	u(1)
	 	 	if( !frame_mbs_only_flag )
	 	 	 	rpu_field_processing_flag 	0 	u(1)
	 	}
}

ref_pic_list_mvc_modification( ) { 	//C  Descriptor
 	if( slice_type % 5  !=  2 && slice_type % 5  !=  4 ) {
 	 	ref_pic_list_modification_flag_l0 	2 	u(1)
 	 	if( ref_pic_list_modification_flag_l0 )
 	 	 	do {
 	 	 	 	modification_of_pic_nums_idc 	2 	ue(v)
 	 	 	 	if( modification_of_pic_nums_idc  ==  0 || modification_of_pic_nums_idc  ==  1 )
 	 	 	 	 	abs_diff_pic_num_minus1 	2 	ue(v)
 	 	 	 	else if( modification_of_pic_nums_idc  ==  2 )
 	 	 	 	 	long_term_pic_num 	2 	ue(v)
    else if( modification_of_pic_nums_idc  ==  4 || modification_of_pic_nums_idc  ==  5 )
 	 	 	 	 	 	abs_diff_view_idx_minus1 	2 	ue(v)
 	 	 	} while( modification_of_pic_nums_idc  !=  3 )
 	}
 	if( slice_type % 5  ==  1 ) {
 	 	ref_pic_list_modification_flag_l1 	2 	u(1)
 	 	if( ref_pic_list_modification_flag_l1 )
 	 	 	do {
 	 	 	 	modification_of_pic_nums_idc 	2 	ue(v)
 	 	 	 	if( modification_of_pic_nums_idc  ==  0 || modification_of_pic_nums_idc  ==  1 )
 	 	 	 	 	abs_diff_pic_num_minus1 	2 	ue(v)
 	 	 	 	else if( modification_of_pic_nums_idc  ==  2 )
 	 	 	 	 	long_term_pic_num 	2 	ue(v)
    else if( modification_of_pic_nums_idc  ==  4 || modification_of_pic_nums_idc  ==  5 )
 	 	 	 	 	abs_diff_view_idx_minus1 	2 	ue(v)
 	 	 	} while( modification_of_pic_nums_idc  !=  3 )
 	}
}

parallel_decoding_info( payloadSize ) { 	//C  Descriptor
 	seq_parameter_set_id 	5 	ue(v)
 	for( i = 1; i <= num_views_minus1; i++ ) {
 	 	if( anchor_pic_flag ) {
 	 	 	for( j = 0; j <= num_anchor_refs_l0[ i ]; j++ )
 	 	 	 	pdi_init_delay_anchor_minus2_l0[ i ][ j ] 	5 	ue(v)
 	 	 	for( j = 0; j <= num_anchor_refs_l1[ i ]; j++ )
 	 	 	 	pdi_init_delay_anchor_minus2_l1[ i ][ j ] 	5 	ue(v)
 	 	}
 	 	else {
 	 	 	for( j = 0; j <= num_non_anchor_refs_l0[ i ]; j++ )
 	 	 	 	pdi_init_delay_non_anchor_minus2_l0[ i ][ j ] 	5 	ue(v)
 	 	 	for( j = 0; j <= num_non_anchor_refs_l1[ i ]; j++ )
 	 	 	 	pdi_init_delay_non_anchor_minus2_l1[ i ][ j ] 	5 	ue(v)
 	 	}
 	}
}

H.13.1.2 MVC scalable nesting SEI message syntax

mvc_scalable_nesting( payloadSize ) { 	//C  Descriptor
 	operation_point_flag 	5 	u(1)
 	if( !operation_point_flag ) {
 	 	all_view_components_in_au_flag 	5 	u(1)
 	 	if( !all_view_components_in_au_flag ) {
 	 	 	num_view_components_minus1 	5 	ue(v)
 	 	 	for( i = 0; i <= num_view_components_minus1; i++ )
 	 	 	 	sei_view_id[ i ] 	5 	u(10)
 	 	}
 	} else {
 	 	num_view_components_op_minus1 	5 	ue(v)
 	 	for( i = 0; i <= num_view_components_op_minus1; i++ )
 	 	 	sei_op_view_id[ i ] 	5 	u(10)
 	 	sei_op_temporal_id 	5 	u(3)
 	}
 	while( !byte_aligned( ) )
 	 	sei_nesting_zero_bit /* equal to 0 */ 	5 	f(1)
 	sei_message( ) 	5
}

H.13.1.3 View scalability information SEI message syntax

view_scalability_info( payloadSize ) { 	//C  Descriptor
 	num_operation_points_minus1 	5 	ue(v)
 	for( i = 0; i <= num_operation_points_minus1; i++ ) {
 	 	operation_point_id[ i ] 	5 	ue(v)
 	 	priority_id[ i ] 	5 	u(5)
 	 	temporal_id[ i ] 	5 	u(3)
 	 	num_target_output_views_minus1[ i ] 	5 	ue(v)
 	 	for( j = 0; j <= num_target_output_views_minus1[ i ]; j++ )
 	 	 	view_id[ i ][ j ] 	5 	ue(v)
 	 	profile_level_info_present_flag[ i ] 	5 	u(1)
 	 	bitrate_info_present_flag[ i ] 	5 	u(1)
 	 	frm_rate_info_present_flag[ i ] 	5 	u(1)
 	 	if( !num_target_output_views_minus1[ i ] )
 	 	 	view_dependency_info_present_flag[ i ] 	5 	u(1)
 	 	parameter_sets_info_present_flag[ i ] 	5 	u(1)
 	 	bitstream_restriction_info_present_flag[ i ] 	5 	u(1)
 	 	if( profile_level_info_present_flag[ i ] )
 	 	 	op_profile_level_idc[ i ]  	5 	u(24)
 	 	if( bitrate_info_present_flag[ i ] ) {
 	 	 	avg_bitrate[ i ] 	5 	u(16)
 	 	 	max_bitrate[ i ] 	5 	u(16)
 	 	 	max_bitrate_calc_window[ i ] 	5 	u(16)
 	 	}
 	 	if( frm_rate_info_present_flag[ i ] ) {
 	 	 	constant_frm_rate_idc[ i ] 	5 	u(2)
 	 	 	avg_frm_rate[ i ] 	5 	u(16)
 	 	}
 	 	if( view_dependency_info_present_flag[ i ] ) {
 	 	 	num_directly_dependent_views[ i ] 	5 	ue(v)
 	 	 	for( j = 0; j < num_directly_dependent_views[ i ]; j++ )
 	 	 	 	directly_dependent_view_id[ i ][ j ] 	5 	ue(v)
 	 	} else
 	 	 	view_dependency_info_src_op_id[ i ] 	5 	ue(v)
 	 	if( parameter_sets_info_present_flag[ i ] ) {
 	 	 	num_seq_parameter_sets[ i ] 	5 	ue(v)
 	 	 	for( j = 0; j < num_seq_parameter_sets[ i ]; j++ )
 	 	 	 	seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
 	 	 	num_subset_seq_parameter_sets[ i ] 	5 	ue(v)
 	 	 	for( j = 0; j < num_subset_seq_parameter_sets[ i ]; j++ )
 	 	 	 	subset_seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
 	 	 	num_pic_parameter_sets_minus1[ i ] 	5 	ue(v)
 	 	 	for( j = 0; j <= num_pic_parameter_sets_minus1[ i ]; j++ )
 	 	 	 	pic_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
 	 	} else
 	 	 	parameter_sets_info_src_op_id[ i ] 	5 	ue(v)
 	 	if( bitstream_restriction_info_present_flag[ i ] ) {
 	 	 	motion_vectors_over_pic_boundaries_flag[ i ] 	5 	u(1)
 	 	 	max_bytes_per_pic_denom[ i ] 	5 	ue(v)
 	 	 	max_bits_per_mb_denom[ i ] 	5 	ue(v)
 	 	 	log2_max_mv_length_horizontal[ i ] 	5 	ue(v)
 	 	 	log2_max_mv_length_vertical[ i ] 	5 	ue(v)
 	 	 	max_num_reorder_frames[ i ] 	5 	ue(v)
 	 	 	max_dec_frame_buffering[ i ] 	5 	ue(v)
 	 	}
 	}
}

H.13.1.4 Multiview scene information SEI message syntax

multiview_scene_info( payloadSize ) { 	//C  Descriptor
 	max_disparity 	5 	ue(v)
}

H.13.1.5 Multiview acquisition information SEI message syntax

multiview_acquisition_info( payloadSize ) { 	//C  Descriptor
 	num_views_minus1 	 	ue(v)
 	intrinsic_param_flag 	5 	u(1)
 	extrinsic_param_flag 	5 	u(1)
 	if( instrinsic_param_flag ) {
 	 	intrinsic_params_equal 	5 	u(1)
 	 	prec_focal_length 	5 	ue(v)
 	 	prec_principal_point 	5 	ue(v)
 	 	prec_skew_factor 	5 	ue(v)
 	 	if( intrinsic_params_equal )
 	 	 	num_of_param_sets = 1
 	 	else
 	 	 	num_of_param_sets = num_views_minus1 + 1
 	 	for( i = 0; i < num_of_param_sets; i++ ) {
 	 	 	sign_focal_length_x[ i ] 	5 	u(1)
 	 	 	exponent_focal_length_x[ i ] 	5 	u(6)
 	 	 	mantissa_focal_length_x[ i ]  	5 	u(v)
 	 	 	sign_focal_length_y[ i ] 	5 	u(1)
 	 	 	exponent_focal_length_y[ i ] 	5 	u(6)
 	 	 	mantissa_focal_length_y[ i ] 	5 	u(v)
 	 	 	sign_principal_point_x[ i ] 	5 	u(1)
 	 	 	exponent_principal_point_x[ i ] 	5 	u(6)
 	 	 	mantissa_principal_point_x[ i ] 	5 	u(v)
 	 	 	sign_principal_point_y[ i ] 	5 	u(1)
 	 	 	exponent_principal_point_y[ i ] 	5 	u(6)
 	 	 	mantissa_principal_point_y[ i ]  	5 	u(v)
 	 	 	sign_skew_factor[ i ] 	5 	u(1)
 	 	 	exponent_skew_factor[ i ] 	5 	u(6)
 	 	 	mantissa_skew_factor[ i ] 	5 	u(v)
 	 	}
 	}
 	if( extrinsic_param_flag ) {
 	 	prec_rotation_param 	5 	ue(v)
 	 	prec_translation_param 	5 	ue(v)
 	 	for( i = 0; i <= num_views_minus1; i++) {
 	 	 	for ( j = 1; j <= 3; j++) { /* row */
 	 	 	 	for ( k = 1; k <= 3; k++) { /* column */
 	 	 	 	 	sign_r[ i ][ j ][ k ] 	5 	u(1)
 	 	 	 	 	exponent_r[ i ][ j ][ k ] 	5 	u(6)
 	 	 	 	 	mantissa_r[ i ][ j ][ k ] 	5 	u(v)
 	 	 	 	}
 	 	 	 	sign_t[ i ][ j ] 	5 	u(1)
 	 	 	 	exponent_t[ i ][ j ] 	5 	u(6)
 	 	 	 	mantissa_t[ i ][ j ] 	5 	u(v)
 	 	 	}
 	 	}
 	}
}

H.13.1.6 Non-required view component SEI message syntax

non_required_view_component( payloadSize ) { 	//C  Descriptor
 	num_info_entries_minus1 	5 	ue(v)
 	for( i = 0; i <= num_info_entries_minus1; i++ ) {
 	 	view_order_index[ i ] 	5 	ue(v)
 	 	num_non_required_view_components_minus1[ i ] 	5 	ue(v)
 	 	for( j = 0; j <= num_non_required_view_components_minus1[ i ]; j++ )
 	 	 	index_delta_minus1[ i ][ j ] 	5 	ue(v)
 	}
}

H.13.1.7 View dependency change SEI message syntax

view_dependency_change( payloadSize ) { 	//C  Descriptor
 	seq_parameter_set_id 	5 	ue(v)
 	anchor_update_flag 	5 	u(1)
 	non_anchor_update_flag 	5 	u(1)
 	if( anchor_update_flag )
 	 	for( i = 1; i <= num_views_minus1; i++ ) {
 	 	 	for( j = 0; j < num_anchor_refs_l0[ i ]; j++ )
 	 	 	 	anchor_ref_l0_flag[ i ][ j ] 	5 	u(1)
 	 	 	for( j = 0; j < num_anchor_refs_l1[ i ]; j++ )
 	 	 	 	anchor_ref_l1_flag[ i ][ j ] 	5 	u(1)
 	 	}
 	if( non_anchor_update_flag )
 	 	for( i = 1; i <= num_views_minus1; i++ ) {
 	 	 	for( j = 0; j < num_non_anchor_refs_l0[ i ]; j++ )
 	 	 	 	non_anchor_ref_l0_flag[ i ][ j ] 	5 	u(1)
 	 	 	for( j = 0; j < num_non_anchor_refs_l1[ i ]; j++ )
 	 	 	 	non_anchor_ref_l1_flag[ i ][ j ] 	5 	u(1)
 	 	}
}

H.13.1.8 Operation point not present SEI message syntax

operation_point_not_present( payloadSize ) { 	//C  Descriptor
 	num_operation_points 	5 	ue(v)
 	for( k = 0; k < num_operation_points; k++ )
 	 	operation_point_not_present_id[ k ] 	5 	ue(v)
}

H.13.1.9 Base view temporal HRD SEI message syntax

base_view_temporal_hrd( payloadSize ) { 	//C  Descriptor
 num_of_temporal_layers_in_base_view_minus1 	5 	ue(v)
 for( i = 0; i <= num_of_temporal_layers_in_base_view_minus1; i++) {
 	 	sei_mvc_temporal_id[ i ] 	5 	u(3)
 	 sei_mvc_timing_info_present_flag[ i ] 	5 	u(1)
 	 	if( sei_mvc_timing_info_present_flag[ i ] ) {
 	 	 	sei_mvc_num_units_in_tick[ i ] 	5 	u(32)
 	 	 	sei_mvc_time_scale[ i ] 	5 	u(32)
 	 	 	sei_mvc_fixed_frame_rate_flag[ i ] 	5 	u(1)
 	 	}
 	 	sei_mvc_nal_hrd_parameters_present_flag[ i ] 	5 	u(1)
 	 	if( sei_mvc_nal_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	5
 	 	sei_mvc_vcl_hrd_parameters_present_flag[ i ] 	5 	u(1)
 	 	if( sei_mvc_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	5
 	 	if( sei_mvc_nal_hrd_parameters_present_flag[ i ] || sei_mvc_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	sei_mvc_low_delay_hrd_flag[ i ] 	5 	u(1)
 	 	sei_mvc_pic_struct_present_flag[ i ] 	5 	u(1)
 	}
}

H.13.1.10 Multiview view position SEI message syntax

multiview_view_position( payloadSize ) { 	//C  Descriptor
 num_views_minus1 	5 	ue(v)
 	for( i = 0; i <= num_views_minus1; i++)
 	 view_position[ i ] 	5 	ue(v)
 	multiview_view_position_extension_flag 	5 	u(1)
}

mvc_vui_parameters_extension( ) { 	//C  Descriptor
 	vui_mvc_num_ops_minus1 	0 	ue(v)
 	for( i = 0; i <= vui_mvc_num_ops_minus1; i++ ) {
 	 	vui_mvc_temporal_id[ i ] 	0 	u(3)
 	 	vui_mvc_num_target_output_views_minus1[ i ] 	5 	ue(v)
 	 	for( j = 0; j <= vui_mvc_num_target_output_views_minus1[ i ]; j++ )
 	 	 	vui_mvc_view_id[ i ][ j ] 	5 	ue(v)
 	 	vui_mvc_timing_info_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvc_timing_info_present_flag[ i ] ) {
 	 	 	vui_mvc_num_units_in_tick[ i ] 	0 	u(32)
 	 	 	vui_mvc_time_scale[ i ] 	0 	u(32)
 	 	 	vui_mvc_fixed_frame_rate_flag[ i ] 	0 	u(1)
 	 	}
 	 	vui_mvc_nal_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvc_nal_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0
 	 	vui_mvc_vcl_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvc_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0
 	 	if( vui_mvc_nal_hrd_parameters_present_flag[ i ] || vui_mvc_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	vui_mvc_low_delay_hrd_flag[ i ] 	0 	u(1)
 	 	vui_mvc_pic_struct_present_flag[ i ]  	0 	u(1)
 	}
}

seq_parameter_set_mvcd_extension( ) { 	//C  Descriptor
 	num_views_minus1 	0 	ue(v)
 	for( i = 0, NumDepthViews = 0; i <= num_views_minus1; i++ ) {
 	 	view_id[ i ] 	0 	ue(v)
 	 	depth_view_present_flag[ i ] 	0 	u(1)
 	 	DepthViewId[ NumDepthViews ] = view_id[ i ]
 	 	NumDepthViews += depth_view_present_flag[ i ]
 	 	texture_view_present_flag[ i ] 	0 	u(1)
 	}
 	for( i = 1; i <= num_views_minus1; i++ )
 	 	if( depth_view_present_flag[ i ] ) {
 	 	 	num_anchor_refs_l0[ i ] 	0 	ue(v)
 	 	 	for( j = 0; j < num_anchor_refs_l0[ i ]; j++ )
 	 	 	 anchor_ref_l0[ i ][ j ] 	0 	ue(v)
 	 	 	num_anchor_refs_l1[ i ] 	0 	ue(v)
 	 	 	for( j = 0; j < num_anchor_refs_l1[ i ]; j++ )
 	 	 	 anchor_ref_l1[ i ][ j ] 	0 	ue(v)
 	 	}
 	for( i = 1; i <= num_views_minus1; i++ )
 	 	if( depth_view_present_flag[ i ] ) {
 	 	 	num_non_anchor_refs_l0[ i ] 	0 	ue(v)
 	 	 	for( j = 0; j < num_non_anchor_refs_l0[ i ]; j++ )
 	 	 	 non_anchor_ref_l0[ i ][ j ] 	0 	ue(v)
 	 	 	num_non_anchor_refs_l1[ i ] 	0 	ue(v)
 	 	 	for( j = 0; j < num_non_anchor_refs_l1[ i ]; j++ )
 	 	 	 non_anchor_ref_l1[ i ][ j ] 	0 	ue(v)
 	 	}
 	num_level_values_signalled_minus1 	0 	ue(v)
 	for( i = 0; i <= num_level_values_signalled_minus1; i++ ) {
 	 	level_idc[ i ] 	0 	u(8)
 	 	num_applicable_ops_minus1[ i ] 	0 	ue(v)
 	 	for( j = 0; j <= num_applicable_ops_minus1[ i ]; j++ ) {
 	 	 	applicable_op_temporal_id[ i ][ j ] 	0 	u(3)
 	 	 	applicable_op_num_target_views_minus1[ i ][ j ] 	0 	ue(v)
 	 	 	for( k = 0; k <= applicable_op_num_target_views_minus1[ i ][ j ];  	 	 	 k++ ) {
 	 	 	 applicable_op_target_view_id[ i ][ j ][ k ] 	0 	ue(v)
 	 	 	 applicable_op_depth_flag[ i ][ j ][ k ] 	0 	u(1)
 	 	 	 applicable_op_texture_flag[ i ][ j ][ k ] 	0 	u(1)
 	 	 	}
 	 	 	applicable_op_num_texture_views_minus1[ i ][ j ] 	0 	ue(v)
 	 	 	applicable_op_num_depth_views[ i ][ j ] 	0 	ue(v)
 	 	}
 	}
 	mvcd_vui_parameters_present_flag 	0 	u(1)
 	if( mvcd_vui_parameters_present_flag  ==  1 )
 	 	mvcd_vui_parameters_extension( )
 	texture_vui_parameters_present_flag 	0 	u(1)
 	if( texture_vui_parameters_present_flag  ==  1 )
 	 	mvc_vui_parameters_extension( ) 	0
}

mvcd_view_scalability_info( payloadSize ) { 	//C  Descriptor
 	num_operation_points_minus1 	5 	ue(v)
 	for( i = 0; i <= num_operation_points_minus1; i++ ) {
 	 	operation_point_id[ i ] 	5 	ue(v)
 	 	priority_id[ i ] 	5 	u(5)

	 	 	temporal_id[ i ] 	5 	u(3)
	 	 	num_target_output_views_minus1[ i ] 	5 	ue(v)
	 	 	for( j = 0; j <= num_target_output_views_minus1[ i ]; j++ ) {
	 	 	 	view_id[ i ][ j ] 	5 	ue(v)
	 	 	 	mvcd_op_view_info( )
	 	 	}
	 	 	profile_level_info_present_flag[ i ] 	5 	u(1)
	 	 	bitrate_info_present_flag[ i ] 	5 	u(1)
	 	 	frm_rate_info_present_flag[ i ] 	5 	u(1)
	 	 	if( !num_target_output_views_minus1[ i ] )
	 	 	 	view_dependency_info_present_flag[ i ] 	5 	u(1)
	 	 	parameter_sets_info_present_flag[ i ] 	5 	u(1)
	 	 	bitstream_restriction_info_present_flag[ i ] 	5 	u(1)
	 	 	if( profile_level_info_present_flag[ i ] )
	 	 	 	op_profile_level_idc[ i ]  	5 	u(24)
	 	 	if( bitrate_info_present_flag[ i ] ) {
	 	 	 	avg_bitrate[ i ] 	5 	u(16)
	 	 	 	max_bitrate[ i ] 	5 	u(16)
	 	 	 	max_bitrate_calc_window[ i ] 	5 	u(16)
	 	 	}
	 	 	if( frm_rate_info_present_flag[ i ] ) {
	 	 	 	constant_frm_rate_idc[ i ] 	5 	u(2)
	 	 	 	avg_frm_rate[ i ] 	5 	u(16)
	 	 	}
	 	 	if( view_dependency_info_present_flag[ i ] ) {
	 	 	 	num_directly_dependent_views[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j < num_directly_dependent_views[ i ]; j++ ) {
	 	 	 	 	directly_dependent_view_id[ i ][ j ] 	5 	ue(v)
	 	 	 	 	mvcd_op_view_info( )
	 	 	 	}
	 	 	} else
	 	 	 	view_dependency_info_src_op_id[ i ] 	5 	ue(v)
	 	 	if( parameter_sets_info_present_flag[ i ] ) {
	 	 	 	num_seq_parameter_set_minus1[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j <= num_seq_parameter_set_minus1[ i ]; j++ )
	 	 	 	 	seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	 	num_subset_seq_parameter_set_minus1[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j <= num_subset_seq_parameter_set_minus1[ i ]; j++ )
	 	 	 	 	subset_seq_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	 	num_pic_parameter_set_minus1[ i ] 	5 	ue(v)
	 	 	 	for( j = 0; j <= num_init_pic_parameter_set_minus1[ i ]; j++ )
	 	 	 	 	pic_parameter_set_id_delta[ i ][ j ] 	5 	ue(v)
	 	 	} else
	 	 	 	parameter_sets_info_src_op_id[ i ] 	5 	ue(v)
 	 	if( bitstream_restriction_info_present_flag[ i ] ) {
 	 	 	motion_vectors_over_pic_boundaries_flag[ i ] 	5 	u(1)
 	 	 	max_bytes_per_pic_denom[ i ] 	5 	ue(v)
 	 	 	max_bits_per_mb_denom[ i ] 	5 	ue(v)
 	 	 	log2_max_mv_length_horizontal[ i ] 	5 	ue(v)
 	 	 	log2_max_mv_length_vertical[ i ] 	5 	ue(v)
 	 	 	num_reorder_frames[ i ] 	5 	ue(v)
 	 	 	max_dec_frame_buffering[ i ] 	5 	ue(v)
 	 	}
 	}
}

I.13.1.1.1 MVCD operation point view information syntax

mvcd_op_view_info( ) { 	//C  Descriptor
 	view_info_depth_view_present_flag 	5 	u(1)
 	if( view_info_depth_view_present_flag )
 	 	mvcd_depth_view_flag 	5 	u(1)
 	view_info_texture_view_present_flag 	5 	u(1)
 	if( view_info_texture_view_present_flag )
 	 	mvcd_texture_view_flag 	5 	u(1)
}

I.13.1.2 MVCD scalable nesting SEI message syntax

mvcd_scalable_nesting( payloadSize ) { 	//C  Descriptor
 	operation_point_flag 	5 	u(1)
 	if( !operation_point_flag ) {
 	 	all_view_components_in_au_flag 	5 	u(1)
 	 	if( !all_view_components_in_au_flag ) {
 	 	 	num_view_components_minus1 	5 	ue(v)
 	 	 	for( i = 0; i <= num_view_components_minus1; i++ ) {
 	 	 	 	sei_view_id[ i ] 	5 	u(10)
 	 	 	 	sei_view_applicability_flag[ i ] 	5 	u(1)
 	 	 	}
 	 	}
 	} else {
 	 	sei_op_texture_only_flag 	5 	u(1)
 	 	num_view_components_op_minus1 	5 	ue(v)
 	 	for( i = 0; i <= num_view_components_op_minus1; i++ ) {
 	 	 	sei_op_view_id[ i ] 	5 	u(10)
 	 	 	if( !sei_op_texture_only_flag ) {
 	 	 	 	sei_op_depth_flag[ i ]
 	 	 	 	sei_op_texture_flag[ i ]
 	 	 	}
 	 	}
 	 	sei_op_temporal_id 	5 	u(3)
 	}
 	while( !byte_aligned( ) )
 	 	sei_nesting_zero_bit /* equal to 0 */ 	5 	f(1)
 	sei_message( ) 	5
}

I.13.1.3 Depth representation information SEI message syntax

depth_representation_info( payloadSize ) { 	//C  Descriptor
 	all_views_equal_flag 	5 	u(1)
 	if( all_views_equal_flag  ==  0 ) {
 	 	num_views_minus1 	5 	ue(v)
 	 	numViews = num_views_minus1 + 1
 	} else
 	 	numViews = 1
 	z_near_flag 	5 	u(1)
 	z_far_flag 	5 	u(1)
 	if( z_near_flag || z_far_flag ) {
 	 	z_axis_equal_flag 	5 	u(1)
 	 	if( z_axis_equal_flag )
 	 	 	common_z_axis_reference_view 	5 	ue(v)
 	}
 	d_min_flag 	5 	u(1)
 	d_max_flag 	5 	u(1)
 	depth_representation_type 	5 	ue(v)
 	for( i = 0; i < numViews; i++ ) {
 	 	depth_info_view_id[ i ] 	5 	ue(v)
 	 	if( ( z_near_flag || z_far_flag ) && ( z_axis_equal_flag  ==  0 ) )
 	 	 	z_axis_reference_view[ i ] 	5 	ue(v)
 	 	if( d_min_flag || d_max_flag )
 	 	 	disparity_reference_view[ i ] 	5 	ue(v)
 	 	if( z_near_flag )
 	 	 	depth_representation_sei_element( ZNearSign, ZNearExp,
 	 	 	 	 	 	 	 	 	 	  	 	ZNearMantissa, ZNearManLen )
 	 	if( z_far_flag )
 	 	 	depth_representation_sei_element( ZFarSign, ZFarExp,
 	 	 	 	 	 	 	 	 	 	  	 	ZFarMantissa, ZFarManLen )
 	 	if( d_min_flag )
 	 	 	depth_representation_sei_element( DMinSign, DMinExp,
 	 	 	 	 	 	 	 	 	 	  	 	DMinMantissa, DMinManLen )
 	 	if( d_max_flag )
 	 	 	depth_representation_sei_element( DMaxSign, DMaxExp,
 	 	 	 	 	 	 	 	 	 	  	 	DMaxMantissa, DMaxManLen )
 	}
 	if( depth_representation_type  ==  3 ) {
 	 	depth_nonlinear_representation_num_minus1 	5 	ue(v)
 	 	for( i = 1; i <= depth_nonlinear_representation_num_minus1 + 1; i++ )
 	 	 	depth_nonlinear_representation_model[ i ] 	5 	ue(v)
 	}
}

I.13.1.4 Depth representation SEI element syntax

depth_representation_sei_element( OutSign, OutExp, OutMantissa,  	OutManLen ) { 	//C  Descriptor
 	da_sign_flag 	5 	u(1)
 	da_exponent 	5 	u(7)
 	da_matissa_len_minus1 	5 	u(5)
 	da_mantissa 	5 	u(v)
}
I.13.1.5 3D reference displays information SEI message syntax

three_dimensional_reference_displays_info( payloadSize ) { 	//C  Descriptor
 	prec_ref_baseline 	5 	ue(v)
 	prec_ref_display_width 	5 	ue(v)
 	ref_viewing_distance_flag 	5 	u(1)
 	if( ref_viewing_distance_flag )
 	 	prec_ref_viewing_dist 	5 	ue(v)
 	num_ref_displays_minus1 	5 	ue(v)
 	numRefDisplays  = num_ref_displays_minus1 + 1
 	for( i = 0; i < numRefDisplays; i++ ) {
 	 	exponent_ref_baseline[ i ] 	5 	u(6)
 	 	mantissa_ref_baseline[ i ] 	5 	u(v)
 	 	exponent_ref_display_width[ i ] 	5 	u(6)
 	 	mantissa_ref_display_width[ i ] 	5 	u(v)
 	 	if( ref_viewing_distance_flag ) {
 	 	 	exponent_ref_viewing_distance[ i ] 	5 	u(6)
 	 	 	mantissa_ref_viewing_distance[ i ] 	5 	u(v)
 	 	}
 	 	additional_shift_present_flag[ i ] 	5 	u(1)
 	 	if( additional_shift_present[ i ] )
 	 	 	num_sample_shift_plus512[ i ] 	5 	u(10)
 	}
 	three_dimensional_reference_displays_extension_flag 	5 	u(1)
}

I.13.1.6 Depth timing SEI message syntax

depth_timing( payloadSize ) { 	//C  Descriptor
 	per_view_depth_timing_flag 	5 	u(1)
 	if( per_view_depth_timing_flag )
 	 	for( i = 0; i < NumDepthViews; i++ )
 	 	 	depth_timing_offset( )
 	else
 	 	depth_timing_offset( )
}

I.13.1.6.1 Depth timing offset syntax

depth_timing_offset( ) { 	//C  Descriptor
 	offset_len_minus1 	5 	u(5)
 	depth_disp_delay_offset_fp 	5 	u(v)
 	depth_disp_delay_offset_dp 	5 	u(6)
}

I.13.1.7 Alternative depth information SEI message syntax

alternative_depth_info( payloadSize ) { 	//C  Descriptor
 	depth_type 	5 	ue(v)
 	if( depth_type  ==  0 ) {
 	 	num_constituent_views_gvd_minus1 	5 	ue(v)
 	 	depth_present_gvd_flag 	5 	u(1)
 	 	z_gvd_flag 	5 	u(1)
 	 	intrinsic_param_gvd_flag 	5 	u(1)
 	 	rotation_gvd_flag 	5 	u(1)
 	 	translation_gvd_flag 	5 	u(1)
 	 	if( z_gvd_flag )
 	 	 	for( i = 0; i  <=  num_constituent_views_gvd_minus1 + 1; i++ ) {
 	 	 	 sign_gvd_z_near_flag[ i ] 	5 	u(1)
 	 	 	 exp_gvd_z_near[ i ] 	5 	u(7)
 	 	 	 man_len_gvd_z_near_minus1[ i ] 	5 	u(5)
 	 	 	 man_gvd_z_near[ i ] 	5 	u(v)
 	 	 	 sign_gvd_z_far_flag[ i ] 	5 	u(1)
 	 	 	 exp_gvd_z_far[ i ] 	5 	u(7)
 	 	 	 man_len_gvd_z_far_minus1[ i ] 	5 	u(5)
 	 	 	 man_gvd_z_far[ i ] 	5 	u(v)
 	 	 	}
 	 	if( intrinsic_param_gvd_flag ) {
 	 	 	prec_gvd_focal_length 	5 	ue(v)
 	 	 	prec_gvd_principal_point 	5 	ue(v)
 	 	}
 	 	if( rotation_gvd_flag )
 	 	 	prec_gvd_rotation_param 	5 	ue(v)
 	 	if ( translation_gvd_flag )
 	 	 	prec_gvd_translation_param 	5 	ue(v)
 	 	for( i = 0; i  <=  num_constituent_views_gvd_minus1 + 1; i++ ) {
 	 	 	if( intrinsic_param_gvd_flag ) {
 	 	 	 sign_gvd_focal_length_x[ i ] 	5 	u(1)
 	 	 	 exp_gvd_focal_length_x[ i ] 	5 	u(6)
 	 	 	 man_gvd_focal_length_x[ i ] 	5 	u(v)
 	 	 	 sign_gvd_focal_length_y[ i ] 	5 	u(1)
 	 	 	 exp_gvd_focal_length_y[ i ] 	5 	u(6)
 	 	 	 man_gvd_focal_length_y[ i ] 	5 	u(v)
 	 	 	 sign_gvd_principal_point_x[ i ] 	5 	u(1)
 	 	 	 exp_gvd_principal_point_x[ i ] 	5 	u(6)
 	 	 	 man_gvd_principal_point_x[ i ] 	5 	u(v)
 	 	 	 sign_gvd_principal_point_y[ i ] 	5 	u(1)
 	 	 	 exp_gvd_principal_point_y[ i ] 	5 	u(6)
 	 	 	 man_gvd_principal_point_y[ i ] 	5 	u(v)
 	 	 	}
 	 	 	if( rotation_gvd_flag )
 	 	 	 for ( j = 0; j < 3; j++ ) /* row */
 	 	 	  for( k = 0; k < 3; k++ ) { /* column */
 	 	 	   	sign_gvd_r[ i ][ j ][ k ] 	5 	u(1)
 	 	 	   	exp_gvd_r[ i ][ j ][ k ] 	5 	u(6)
 	 	 	   	man_gvd_r[ i ][ j ][ k ] 	5 	u(v)
 	 	 	 }
 	 	 	if ( translation_gvd_flag ) {
 	 	 	 sign_gvd_t_x[ i ] 	5 	u(1)
 	 	 	 exp_gvd_t_x[ i ] 	5 	u(6)
 	 	 	 man_gvd_t_x[ i ] 	5 	u(v)
 	 	 	}
 	 	}
 	}
}

I.13.1.8 Depth sampling information SEI message syntax

depth_sampling_info( payloadSize ) { 	//C  Descriptor
 	dttsr_x_mul 	5 	u(16)
 	dttsr_x_dp 	5 	u(4)
 	dttsr_y_mul 	5 	u(16)
 	dttsr_y_dp 	5 	u(4)
 	per_view_depth_grid_pos_flag 	5 	u(1)
 	if( per_view_depth_grid_pos_flag ) {
 	 	num_video_plus_depth_views_minus1 	5 	ue(v)
 	 	for( i = 0; i <= num_video_plus_depth_views_minus1; i++ ) {
 	 	 	depth_grid_view_id[ i ] 	5 	ue(v)
 	 	 	depth_grid_position( )
 	 	}
 	} else
 	 	depth_grid_position( )
}

mvcd_vui_parameters_extension( ) { 	//C  Descriptor
 	vui_mvcd_num_ops_minus1 	0 	ue(v)
 	for( i = 0; i <= vui_mvcd_num_ops_minus1; i++ ) {
 	 	vui_mvcd_temporal_id[ i ] 	0 	u(3)
 	 	vui_mvcd_num_target_output_views_minus1[ i ] 	0 	ue(v)
 	 	for( j = 0; j <= vui_mvcd_num_target_output_views_minus1[ i ]; j++ ) {
 	 	 	vui_mvcd_view_id[ i ][ j ] 	0 	ue(v)
 	 	 	vui_mvcd_depth_flag[ i ][ j ] 	0 	u(1)
 	 	 	vui_mvcd_texture_flag[ i ][ j ] 	0 	u(1)
 	 	}
 	 	vui_mvcd_timing_info_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvcd_timing_info_present_flag[ i ] ) {
 	 	 	vui_mvcd_num_units_in_tick[ i ] 	0 	u(32)
 	 	 	vui_mvcd_time_scale[ i ] 	0 	u(32)
 	 	 	vui_mvcd_fixed_frame_rate_flag[ i ] 	0 	u(1)
 	 	}
 	 	vui_mvcd_nal_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvcd_nal_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0
 	 	vui_mvcd_vcl_hrd_parameters_present_flag[ i ] 	0 	u(1)
 	 	if( vui_mvcd_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	hrd_parameters( ) 	0
 	 	if( vui_mvcd_nal_hrd_parameters_present_flag[ i ] || vui_mvcd_vcl_hrd_parameters_present_flag[ i ] )
 	 	 	vui_mvcd_low_delay_hrd_flag[ i ] 	0 	u(1)
 	 	vui_mvcd_pic_struct_present_flag[ i ]  	0 	u(1)
 	}
}

seq_parameter_set_3davc_extension( ) { 	//C  Descriptor
 	if( NumDepthViews > 0 ) {
 	 	3dv_acquisition_idc 	0 	ue(v)
 	 	for( i = 0; i < NumDepthViews; i++ )
 	 	 	view_id_3dv[ i ] 	0 	ue(v)
 	 	if( 3dv_acquisition_idc ) {
 	 	 	depth_ranges( NumDepthViews, 2, 0 )
 	 	 	vsp_param( NumDepthViews, 2, 0  )
 	 	}
 	 	reduced_resolution_flag 	0 	u(1)
 	 	if( reduced_resolution_flag ) {
 	 	 	depth_pic_width_in_mbs_minus1 	0 	ue(v)
 	 	 	depth_pic_height_in_map_units_minus1 	0 	ue(v)
 	 	 	depth_hor_mult_minus1 	0 	ue(v)
 	 	 	depth_ver_mult_minus1 	0 	ue(v)
 	 	 	depth_hor_rsh 	0 	ue(v)
 	 	 	depth_ver_rsh 	0 	ue(v)
 	 	}
 	 	depth_frame_cropping_flag 	0 	u(1)
 	 	if( depth_frame_cropping_flag ) {
 	 	 	depth_frame_crop_left_offset 	0 	ue(v)
 	 	 	depth_frame_crop_right_offset 	0 	ue(v)
 	 	 	depth_frame_crop_top_offset 	0 	ue(v)
 	 	 	depth_frame_crop_bottom_offset 	0 	ue(v)
 	 	}
 	 	grid_pos_num_views 	0 	ue(v)
 	 	for( i = 0; i < grid_pos_num_views; i++ ) {
 	 	 	grid_pos_view_id[ i ] 	0 	ue(v)
 	 	 	grid_pos_x[ grid_pos_view_id[ i ] ] 	0 	se(v)
 	 	 	grid_pos_y[ grid_pos_view_id[ i ] ] 	0 	se(v)
 	 	}
 	 	slice_header_prediction_flag 	0 	u(1)
 	 	seq_view_synthesis_flag 	0 	u(1)
 	}
 	alc_sps_enable_flag 	0 	u(1)
 	enable_rle_skip_flag 	0 	u(1)
 	if( !AllViewsPairedFlag ) {
 	 	for( i = 1; i <= num_views_minus1; i++ )
 	 	 	if( texture_view_present_flag[ i ] ) {
 	 	 	 	num_anchor_refs_l0[ i ] 	0 	ue(v)
 	 	 	 	for( j = 0; j < num_anchor_refs_l0[ i ]; j++ )
 	 	 	 	 	anchor_ref_l0[ i ][ j ] 	0 	ue(v)
 	 	 	 	num_anchor_refs_l1[ i ] 	0 	ue(v)
 	 	 	 	for( j = 0; j < num_anchor_refs_l1[ i ]; j++ )
 	 	 	 	 	anchor_ref_l1[ i ][ j ] 	0 	ue(v)
 	 	 	}
 	 	for( i = 1; i <= num_views_minus1; i++ )
 	 	 	if( texture_view_present_flag[ i ] ) {
 	 	 	 	num_non_anchor_refs_l0[ i ] 	0 	ue(v)
 	 	 	 	for( j = 0; j < num_non_anchor_refs_l0[ i ]; j++ )
 	 	 	 	 	non_anchor_ref_l0[ i ][ j ] 	0 	ue(v)
 	 	 	 	num_non_anchor_refs_l1[ i ] 	0 	ue(v)
 	 	 	 	for( j = 0; j < num_non_anchor_refs_l1[ i ]; j++ )
 	 	 	 	 	non_anchor_ref_l1[ i ][ j ] 	0 	ue(v)
 	 	 	}
 	}
}

depth_parameter_set_rbsp( ) { 	//C  Descriptor
 	depth_parameter_set_id 	11 	ue(v)
 	pred_direction 	11 	ue(v)
 	if( pred_direction  ==  0 || pred_direction  ==  1 ) {
 	 	ref_dps_id0 	11 	ue(v)
 	 	predWeight0 = 64
 	}
 	if( pred_direction  ==  0 ) {
 	 	ref_dps_id1 	11 	ue(v)
 	 	pred_weight0 	11 	u(6)
 	 	predWeight0 = pred_weight0
 	}
 	num_depth_views_minus1 	11 	ue(v)
 depth_ranges( num_depth_views_minus1 + 1, pred_direction,    depth_parameter_set_id )
 	vsp_param_flag 	11 	u(1)
 	if( vsp_param_flag )
  vsp_param( num_depth_views_minus1 + 1, pred_direction,    depth_parameter_set_id )
 	depth_param_additional_extension_flag 	11 	u(1)
 	nonlinear_depth_representation_num 	11 	ue(v)
 	for( i = 1; i <= nonlinear_depth_representation_num; i++ )
 	 	nonlinear_depth_representation_model[ i ] 	11 	ue(v)
 	if(depth_param_additional_extension_flag  ==  1 )
 	 	while( more_rbsp_data( ) )
 	 	 	depth_param_additional_extension_data_flag 	11 	u(1)
 	rbsp_trailing_bits( )
}

depth_ranges( numViews, predDirection, index ) { 	//C  Descriptor
 	z_near_flag 	11 	u(1)
 	z_far_flag 	11 	u(1)
 	if( z_near_flag )
 	 	3dv_acquisition_element( numViews, 0, predDirection, 7, 0, ZNearSign,
ZNearExp, ZNearMantissa, ZNearManLen )
 	if( z_far_flag )
 	 	3dv_acquisition_element( numViews, 0, predDirection, 7, 0, ZFarSign,
ZFarExp, ZFarMantissa, ZFarManLen )
}

J.7.3.2.13.2 3DV acquisition element syntax

3dv_acquisition_element( numViews, deltaFlag, predDirection, precMode, expLen, OutSign, OutExp, OutMantissa, OutManLen ) { 	//C  Descriptor
 	if( numViews - deltaFlag > 1 )
 	 	element_equal_flag 	11 	u(1)
 	if( element_equal_flag  ==  0 )
 	 	numValues = numViews - deltaFlag
 	else
 	 	numValues = 1
 	for( i = 0; i < numValues; i++ ) {
 	 	if( predDirection  ==  2 && i  ==  0 ) {
 	 	 	if( precMode  ==  0 ) {
 	 	 	 	matissa_len_minus1 	11 	u(5)
 	 	 	 	OutManLen[ index, i ] = manLen = mantissa_len_minus + 1
 	 	 	} else
 	 	 	 	prec 	11 	u(5)
 	 	}
 	 	if( predDirection  ==  2 ) {
 	 	 	sign0 	11 	u(1)
 	 	 	OutSign[ index, i ] = sign0
 	 	 	exponent0 	11 	u(expLen)
 	 	 	OutExp[ index, i ] = exponent0
 	 	 	if( precMode  ==  1 ) {
 	 	 	 	if( exponent0  ==  0 )
 	 	 	 	 	OutManLen[ index, i ] = manLen = Max( 0, prec - 30 )
 	 	 	 	else
 	 	 	 	 	OutManLen[ index, i ] = manLen =   	 	 	 	 	 	Max( 0, exponent0 + prec - 31 )
 	 	 	}
 	 	 	mantissa0 	11 	u(manLen)
 	 	 	OutMantissa[ index, i ] = mantissa0
 	 	} else {
 	 	 	skip_flag 	11 	u(1)
 	 	 	if( skip_flag  ==  0 ) {
 	 	 	 	sign1 	11 	u(1)
 	 	 	 	OutSign[ index, i ] = sign1
 	 	 	 	exponent_skip_flag 	11 	u(1)
 	 	 	 	if( exponent_skip_flag  ==  0 ) {
 	 	 	 	 	exponent1 	11 	u(expLen)
 	 	 	 	 	OutExp[ index, i ] = exponent1
 	 	 	 	} else
 	 	 	 	 	OutExp[ index, i ] = OutExp[ ref_dps_id0, i ]
 	 	 	 	mantissa_diff 	11 	se(v)
 	 	 	 	mantissaPred = (( OutMantissa[ ref_dps_id0, i ] * predWeight0 +  	 	 	 	 	OutMantissa[ ref_dps_id1, i ] * ( 64-predWeight0 ) + 32 ) >> 6 )
 	 	 	 	OutMantissa[ index, i ] = mantissaPred + mantissa_diff
 	 	 	 	OutManLen[ index, i ] = OutManLen[ ref_dps_id0, i ]
 	 	 	} else {
 	 	 	 	OutSign[ index, i ] = OutSign[ ref_dps_id0, i ]
 	 	 	 	OutExp[ index, i ] = OutExp[ ref_dps_id0, i ]
 	 	 	 	OutMantissa[ index, i ] = OutMantissa[ ref_dps_id0, i ]
 	 	 	 	OutManLen[ index, i ] = OutManLen[ ref_dps_id0, i ]
 	 	 	}
 	 	}
 	}
 	if( element_equal_flag  ==  1 ) {
 	 	for( i = 1; i < num_views_minus1 + 1 - deltaFlag; i++ ) {
 	 	 	OutSign[ index, i ] = OutSign[ index, 0 ]
 	 	 	OutExp[ index, i ] = OutExp[ index, 0 ]
 	 	 	OutMantissa[ index, i ] = OutMantissa[ index, 0 ]
 	 	 	OutManLen[ index, i ] = OutManLen[ index, 0 ]
 	 	}
 	}
}

J.7.3.2.13.3 View synthesis prediction parameters syntax

vsp_param( numViews, predDirection, index ) { 	//C  Descriptor
 	for( i = 0; i < numViews; i++ )
 	 	for( j = 0; j < i; j++ ) {
 	 	 	disparity_diff_wji[ j ][ i ] 	0 	ue(v)
 	 	 	disparity_diff_oji[ j ][ i ] 	0 	ue(v)
 	 	 	disparity_diff_wij[ i ][ j ] 	0 	ue(v)
 	 	 	disparity_diff_oij[ i ][ j ] 	0 	ue(v)
 	 	}
}

slice_header_in_3davc_extension( ) { 	//C  Descriptor
 	first_mb_in_slice 	2 	ue(v)
 	slice_type 	2 	ue(v)
 	pic_parameter_set_id 	2 	ue(v)
 	if( avc_3d_extension_flag && slice_header_prediction_flag  !=  0 ) {
 	 	pre_slice_header_src 	2 	u(2)

 	 if( slice_type  ==  P || slice_type  ==  SP || slice_type  ==  B ) {
 	 	 	pre_ref_lists_src 	2 	u(2)
 	 	 	if ( !pre_ref_lists_src ) {
 	 	 	 	num_ref_idx_active_override_flag 	2 	u(1)
 	 	 	 	if( num_ref_idx_active_override_flag ) {
 	 	 	 	num_ref_idx_l0_active_minus1 	2 	ue(v)
 	 	 	 	if( slice_type  ==  B )
 	 	 	 	 	num_ref_idx_l1_active_minus1 	2 	ue(v)
 	 	 	 	}
 	 	 	 	ref_pic_list_mvc_modification( )  /* specified in Annex H */ 	2
 	 	 	}
 	 	}


 	 if( ( weighted_pred_flag && ( slice_type  ==  P || slice_type  ==  SP ) ) ||
 	 	( weighted_bipred_idc  ==  1 && slice_type  ==  B ) ) {
 	 	 	pre_pred_weight_table_src 	2 	u(2)
 	 	 	if( !pre_pred_weight_table_src )
 	 	 	 	pred_weight_table( ) 	2
 	 	if( nal_ref_idc != 0 ) {
 	 	 	pre_dec_ref_pic_marking_src 	2 	u(2)
 	 	 	if( !pre_dec_ref_pic_marking_src )
 	 	 	 	dec_ref_pic_marking( ) 	2
 	 	}
 	 	slice_qp_delta 	2 	se(v)
 	} else {
 	 	if( separate_colour_plane_flag  ==  1 )
 	 	 	colour_plane_id 	2 	u(2)
 	 	frame_num 	2 	u(v)
 	 	if( !frame_mbs_only_flag ) {
 	 	 	field_pic_flag 	2 	u(1)
 	 	 	if( field_pic_flag )
 	 	 	 	bottom_field_flag 	2 	u(1)
 	 	}
 	 	if( IdrPicFlag )
 	 	 	idr_pic_id 	2 	ue(v)
 	 	if( pic_order_cnt_type  ==  0 ) {

	 	 	 	pic_order_cnt_lsb 	2 	u(v)
	 	 	 	if( bottom_field_pic_order_in_frame_present_flag && !field_pic_flag )
	 	 	 	 	delta_pic_order_cnt_bottom 	2 	se(v)
	 	 	}
	 	 	if( pic_order_cnt_type == 1 && !delta_pic_order_always_zero_flag ) {
	 	 	 	delta_pic_order_cnt[ 0 ] 	2 	se(v)
   if( bottom_field_pic_order_in_frame_present_flag && !field_pic_flag )
	 	 	 	 	delta_pic_order_cnt[ 1 ] 	2 	se(v)
	 	 	}
	 	 	if( redundant_pic_cnt_present_flag )
	 	 	 	redundant_pic_cnt 	2 	ue(v)
	 	 	if( slice_type  ==  B )
	 	 	 	direct_spatial_mv_pred_flag 	2 	u(1)
	 	 	if( slice_type  ==  P || slice_type  ==  SP || slice_type  ==  B ) {
	 	 	 	num_ref_idx_active_override_flag 	2 	u(1)
	 	 	 	if( num_ref_idx_active_override_flag ) {
	 	 	 	 	num_ref_idx_l0_active_minus1 	2 	ue(v)
	 	 	 	 	if( slice_type  ==  B )
	 	 	 	 	 	num_ref_idx_l1_active_minus1 	2 	ue(v)
	 	 	 	}
	 	 	}
	 	 	if( nal_unit_type  ==  20 || nal_unit_type  ==  21 )
	 	 	 	ref_pic_list_mvc_modification( )  /* specified in Annex H */ 	2
	 	 	else
	 	 	 	ref_pic_list_modification( ) 	2
	 	 	if( ( weighted_pred_flag && ( slice_type  ==  P ||
	 	 	 	 	slice_type  ==  SP ) ) ||
	 	 	 	( weighted_bipred_idc  ==  1 && slice_type  ==  B ) )
	 	 	 	pred_weight_table( ) 	2
	 	 	if( nal_ref_idc != 0 )
	 	 	 	dec_ref_pic_marking( ) 	2
 	 	if( entropy_coding_mode_flag && slice_type  !=  I && slice_type  !=  SI )
	 	 	 	cabac_init_idc 	2 	ue(v)
	 	 	slice_qp_delta 	2 	se(v)
	 	 	if( slice_type  ==  SP || slice_type  ==  SI ) {
	 	 	 	if( slice_type  ==  SP )
	 	 	 	 	sp_for_switch_flag 	2 	u(1)
	 	 	 	slice_qs_delta 	2 	se(v)
	 	 	}
	 	 	if( deblocking_filter_control_present_flag ) {
	 	 	 	disable_deblocking_filter_idc 	2 	ue(v)
	 	 	 	if( disable_deblocking_filter_idc  !=  1 ) {
	 	 	 	 	slice_alpha_c0_offset_div2 	2 	se(v)
	 	 	 	 	slice_beta_offset_div2 	2 	se(v)
	 	 	 	}
	 	 	}
	 	 	if( num_slice_groups_minus1 > 0 &&
	 	 	 	slice_group_map_type >= 3 && slice_group_map_type <= 5)
 	 	 	slice_group_change_cycle 	2 	u(v)
  if( nal_unit_type ==  21 && ( slice_type  !=  I && slice_type  !=  SI ) ) {
 	 	 	if( DepthFlag )
 	 	 	 	depth_weighted_pred_flag 	2 	u(1)
 	 	 	else if( avc_3d_extension_flag  ) {
 	 	 	 	dmvp_flag 	2 	u(1)
 	 	 	 	if( seq_view_synthesis_flag )
 	 	 	 	 	slice_vsp_flag 	2 	u(1)
 	 	 	}
 	 	 	if ( 3dv_acquisition_idc != 1 &&
 	 	 	 	( depth_weighted_pred_flag || dmvp_flag ) )
 	 	 	 	dps_id 	2 	ue(v)
 	 	}
 	}
}

J.7.3.4 Slice data syntax
The syntax table is specified in clause I.7.3.4.

J.7.3.4.1 	Slice data in 3D-AVC extension syntax
slice_data_in_3davc_extension( ) { 	//C  Descriptor
 	if( entropy_coding_mode_flag )
 	 	while( !byte_aligned( ) )
 	 	 	cabac_alignment_one_bit 	2 	f(1)
 	CurrMbAddr = first_mb_in_slice * ( 1 + MbaffFrameFlag )
 	moreDataFlag = 1
 	prevMbSkipped = 0
 	RunLength = 0
 	do {
 	 	if( slice_type  !=  I && slice_type  !=  SI )
 	 	 	if( !entropy_coding_mode_flag ) {
 	 	 	 	mb_skip_run 	2 	ue(v)
 	 	 	 	prevMbSkipped = ( mb_skip_run > 0 )
 	 	 	 	for( i=0; i<mb_skip_run; i++ )
 	 	 	 	 	CurrMbAddr = NextMbAddress( CurrMbAddr )
    if( nal_unit_type  ==  21 && !DepthFlag && mb_skip_run > 0 && VspRefExist )
 	 	 	 	 	mb_skip_type_flag 	2 	u(1)
 	 	 	 	if( mb_skip_run > 0 )
 	 	 	 	 	moreDataFlag = more_rbsp_data( )
 	 	 	} else {
    if( nal_unit_type  ==  21 && !DepthFlag && VspRefExist && leftMbVSSkipped && upMbVSSkipped ) {
 	 	 	 	 	mb_vsskip_flag 	2 	ae(v)
 	 	 	 	 	moreDataFlag = !mb_vsskip_flag
 	 	 	 	 	if( !mb_vsskip_flag ) {
 	 	 	 	 	 	mb_skip_flag 	2 	ae(v)
 	 	 	 	 	 	moreDataFlag = !mb_skip_flag
 	 	 	 	 	}
 	 	 	 	 	RunLength = 0
 	 	 	 	} else {
 	 	 	 	 	rleCtx = RLESkipContext( )
 	 	 	 	 	if( rleCtx && !RunLength ) {
 	 	 	 	 	 	mb_skip_run_type 	2 	ae(v)
 	 	 	 	 	 	RunLength = 16
 	 	 	 	 	} else if( !rleCtx && RunLength )
 	 	 	 	 	 	RunLength = 0
 	 	 	 	 	if( rleCtx && mb_skip_run_type )
 	 	 	 	 	 	RunLength -= 1
 	 	 	 	 	else
 	 	 	 	  	mb_skip_flag 	2 	ae(v)
 	 	 	 	 if( rleCtx && !mb_skip_flag )
 	 	 	 	  	RunLength = 0
 	 	 	 	 moreDataFlag = !mb_skip_flag
 	 	 	 	 	if( nal_unit_type  ==  21 && !DepthFlag && VspRefExist && !mb_skip_flag ) {
 	 	 	 	 	 	mb_vsskip_flag 	2 	ae(v)
 	 	 	 	 	 	moreDataFlag = !mb_vsskip_flag
 	 	 	 	 	}
 	 	 	 	}
 	 	 	 	if(alc_sps_enable_flag && nal_unit_type  ==  21 && slice_type  ==  P && !DepthFlag &&
 	 	 	 	 	!mb_vsskip_flag && mb_skip_flag  ==  1 )
 	 	 	 	 	mb_alc_skip_flag 	2 	ae(v)
 	 	 	}
 	 	if( moreDataFlag ) {
 	 	 	if( MbaffFrameFlag && ( CurrMbAddr % 2  ==  0 || ( CurrMbAddr % 2  ==  1 && prevMbSkipped ) ) )
 	 	 	 	mb_field_decoding_flag 	2 	u(1) | ae(v)
 	 	 	macroblock_layer_in_3davc_extension( ) 	2 | 3 | 4
 	 	}
 	 	if( !entropy_coding_mode_flag )
 	 	 	moreDataFlag = more_rbsp_data( )
 	 	else {
 	 	 	if( slice_type  !=  I && slice_type  !=  SI )
 	 	 	 	prevMbSkipped = mb_skip_flag || mb_vsskip_flag
 	 	 	if( MbaffFrameFlag && CurrMbAddr % 2  ==  0 )
 	 	 	 	moreDataFlag = 1
 	 	 	else {
 	 	 	 	end_of_slice_flag 	2 	ae(v)
 	 	 	 	moreDataFlag = !end_of_slice_flag
 	 	 	}
 	 	}
 	 	CurrMbAddr = NextMbAddress( CurrMbAddr )
 	} while( moreDataFlag )
}

macroblock_layer_in_3davc_extension( ) { 	//C  Descriptor
 	mb_type 	2 	ue(v) | ae(v)
 	if( nal_unit_type  == 21 && !DepthFlag
 && slice_type  ==  B
 && direct_spatial_mv_pred_flag && VspRefExist
 && mb_type  ==  B_Direct_16x16 )
 	 	mb_direct_type_flag 	2 	u(1) | ae(v)
 	if( alc_sps_enable_flag && nal_unit_type  ==  21 &&
  slice_type  ==  P && !DepthFlag && ( mb_type  ==  P_L0_16x16 || mb_type  ==  P_L0_L0_16x8 || mb_type  ==  P_L0_L0_8x16 ) )
 	 	mb_alc_flag 	2 	u(1) | ae(v)
 	if( mb_type  ==  I_PCM ) {
 	 	while( !byte_aligned( ) )
 	 	 	pcm_alignment_zero_bit 	3 	f(1)
 	 	for( i = 0; i < 256; i++ )
 	 	 	pcm_sample_luma[ i ] 	3 	u(v)
 	 	for( i = 0; i < 2 * MbWidthC * MbHeightC; i++ )
 	 	 	pcm_sample_chroma[ i ] 	3 	u(v)
 	} else {
 	 	noSubMbPartSizeLessThan8x8Flag = 1
 	 	if( mb_type  !=  I_NxN &&
   MbPartPredMode( mb_type, 0 )  !=  Intra_16x16 && NumMbPart( mb_type )  ==  4 ) {
 	 	 	sub_mb_pred_in_3davc_extension( mb_type ) 	2
 	 	 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 ) {
 	 	 	 	 	if( NumSubMbPart( sub_mb_type[ mbPartIdx ] )  >  1 )
 	 	 	 	 	 	noSubMbPartSizeLessThan8x8Flag = 0
 	 	 	 	} else if( !direct_8x8_inference_flag )
 	 	 	 	 	noSubMbPartSizeLessThan8x8Flag = 0
 	 	} else {
 	 	 	if( transform_8x8_mode_flag && mb_type  ==  I_NxN )
 	 	 	 	transform_size_8x8_flag 	2 	u(1) | ae(v)
 	 	 	mb_pred_in_3davc_extension( mb_type ) 	2
 	 	}
 	 	if( MbPartPredMode( mb_type, 0 )  !=  Intra_16x16 ) {
 	 	 	coded_block_pattern 	2 	me(v) | ae(v)
   if( ( CodedBlockPatternLuma > 0 || mb_alc_flag == 1 ) && transform_8x8_mode_flag && mb_type  !=  I_NxN &&
     noSubMbPartSizeLessThan8x8Flag && ( mb_type  !=  B_Direct_16x16 || direct_8x8_inference_flag ) )
 	 	 	 	transform_size_8x8_flag 	2 	u(1) | ae(v)
 	 	}
  if( CodedBlockPatternLuma > 0 || CodedBlockPatternChroma > 0 ||
 	 	 	MbPartPredMode( mb_type, 0 )  ==  Intra_16x16 ) {
 	 	 	mb_qp_delta 	2 	se(v) | ae(v)
 	 	 	residual( 0, 15 ) 	3 | 4
 	 	}
 	}
}

J.7.3.6.1 	Macroblock prediction in 3D-AVC extension syntax

mb_pred_in_3davc_extension( mb_type ) { 	//C  Descriptor


 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_4x4 || MbPartPredMode( mb_type, 0 )  ==  Intra_8x8 ||
 	MbPartPredMode( mb_type, 0 )  ==  Intra_16x16 ) {
 	 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_4x4 )
 	 	 	for( luma4x4BlkIdx=0; luma4x4BlkIdx<16; luma4x4BlkIdx++ ) {
 	 	 	 	prev_intra4x4_pred_mode_flag[ luma4x4BlkIdx ] 	2 	u(1) | ae(v)
 	 	 	 	if( !prev_intra4x4_pred_mode_flag[ luma4x4BlkIdx ] )
 	 	 	 	 	rem_intra4x4_pred_mode[ luma4x4BlkIdx ] 	2 	u(3) | ae(v)
 	 	 	}
 	 	if( MbPartPredMode( mb_type, 0 )  ==  Intra_8x8 )
 	 	 	for( luma8x8BlkIdx=0; luma8x8BlkIdx<4; luma8x8BlkIdx++ ) {
 	 	 	 	prev_intra8x8_pred_mode_flag[ luma8x8BlkIdx ] 	2 	u(1) | ae(v)
 	 	 	 	if( !prev_intra8x8_pred_mode_flag[ luma8x8BlkIdx ] )
 	 	 	 	 	rem_intra8x8_pred_mode[ luma8x8BlkIdx ] 	2 	u(3) | ae(v)
 	 	 	}
 	 	if( ChromaArrayType  ==  1 || ChromaArrayType  ==  2 )
 	 	 	intra_chroma_pred_mode 	2 	ue(v) | ae(v)
 	} else if( MbPartPredMode( mb_type, 0 )  !=  Direct ) {
 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++)
 	 	 	if( ( num_ref_idx_l0_active_minus1 > 0 ||
     mb_field_decoding_flag  !=  field_pic_flag ) && MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L1 && mb_alc_flag  ==  0 ) {
 	 	 	 	ref_idx_l0[ mbPartIdx ] 	2 	te(v) | ae(v)
 	 	 	 	if( VspRefL0Flag[ mbPartIdx ] && slice_vsp_flag )
 	 	 	 	 	bvsp_flag_l0[ mbPartIdx ] 	2 	u(1) | ae(v)
 	 	 	}
 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++)
 	 	 	if( ( num_ref_idx_l1_active_minus1  >  0 ||
     mb_field_decoding_flag  !=  field_pic_flag ) && MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L0 ) {
 	 	 	 	ref_idx_l1[ mbPartIdx ] 	2 	te(v) | ae(v)
 	 	 	 	if( VspRefL1Flag[ mbPartIdx ] && slice_vsp_flag )
 	 	 	 	 	bvsp_flag_l1[ mbPartIdx ] 	2 	u(1) | ae(v)
 	 	 	}
 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++)
 	 	 	if( MbPartPredMode ( mb_type, mbPartIdx )  !=  Pred_L1 && ( !VspRefL0Flag[ mbPartIdx ] || !bvsp_flag_l0[ mbPartIdx ] )
)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l0[ mbPartIdx ][ 0 ][ compIdx ] 	2 	se(v) | ae(v)
 	 	for( mbPartIdx = 0; mbPartIdx < NumMbPart( mb_type ); mbPartIdx++)
 	 	 	if( MbPartPredMode( mb_type, mbPartIdx )  !=  Pred_L0 && ( !VspRefL1Flag[ mbPartIdx ] || !bvsp_flag_l1[ mbPartIdx ] )
)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l1[ mbPartIdx ][ 0 ][ compIdx ] 	2 	se(v) | ae(v)
 	}
}

J.7.3.6.2 	Sub-macroblock prediction syntax

sub_mb_pred_in_3davc_extension( mb_type ) { 	//C  Descriptor
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	sub_mb_type[ mbPartIdx ] 	2 	ue(v) | ae(v)
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( ( num_ref_idx_l0_active_minus1  >  0 || mb_field_decoding_flag  !=  field_pic_flag ) && mb_type  !=  P_8x8ref0 &&
 	 	 	sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
   SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L1 && mb_alc_flag  ==  0 ) {
 	 	 	ref_idx_l0[ mbPartIdx ] 	2 	te(v) | ae(v)
 	 	 	if( VspRefL0Flag[ mbPartIdx ] && slice_vsp_flag )
 	 	 	 	bvsp_flag_l0[ mbPartIdx ] 	2 	u(1) | ae(v)
 	 	}
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( ( num_ref_idx_l1_active_minus1  >  0 || mb_field_decoding_flag  !=  field_pic_flag ) && sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	  SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L0 ) {
 	 	 	ref_idx_l1[ mbPartIdx ] 	2 	te(v) | ae(v)
 	 	 	if( VspRefL1Flag[ mbPartIdx ] && slice_vsp_flag )
 	 	 	 	bvsp_flag_l1[ mbPartIdx ] 	2 	u(1) | ae(v)
 	 	}
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L1 &&
 	 	 	( !VspRefL0Flag[ mbPartIdx ] || !bvsp_flag_l0[ mbPartIdx ] ) )
 	 	 	for( subMbPartIdx = 0;   	 	 	 	   subMbPartIdx <
NumSubMbPart( sub_mb_type[ mbPartIdx ] );  	 	 	 	   subMbPartIdx++)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l0[ mbPartIdx ][ subMbPartIdx ][ compIdx ] 	2 	se(v) | ae(v)
 	for( mbPartIdx = 0; mbPartIdx < 4; mbPartIdx++ )
 	 	if( sub_mb_type[ mbPartIdx ]  !=  B_Direct_8x8 &&
 	 	 	SubMbPredMode( sub_mb_type[ mbPartIdx ] )  !=  Pred_L0 &&
 	 	 	( !VspRefL1Flag[ mbPartIdx ] || !bvsp_flag_l1[ mbPartIdx ] ) )
 	 	 	for( subMbPartIdx = 0;   	 	 	 	   subMbPartIdx <
NumSubMbPart( sub_mb_type[ mbPartIdx ] );  	 	 	 	   subMbPartIdx++)
 	 	 	 	for( compIdx = 0; compIdx < 2; compIdx++ )
 	 	 	 	 	mvd_l1[ mbPartIdx ][ subMbPartIdx ][ compIdx ] 	2 	se(v) | ae(v)
}

#endif
