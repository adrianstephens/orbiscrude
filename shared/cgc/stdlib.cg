// Standard library for CG
// The contents of this file will be automatically #included in a special
// global scope before every CG input file

typedef packed float4 float4x4[4];
typedef packed float3 float4x3[4];
typedef packed float2 float4x2[4];
typedef packed float1 float4x1[4];
typedef packed float4 float3x4[3];
typedef packed float3 float3x3[3];
typedef packed float2 float3x2[3];
typedef packed float1 float3x1[3];
typedef packed float4 float2x4[2];
typedef packed float3 float2x3[2];
typedef packed float2 float2x2[2];
typedef packed float1 float2x1[2];
typedef packed float4 float1x4[1];
typedef packed float3 float1x3[1];
typedef packed float2 float1x2[1];
typedef packed float1 float1x1[1];

typedef packed half4 half4x4[4];
typedef packed half3 half4x3[4];
typedef packed half2 half4x2[4];
typedef packed half1 half4x1[4];
typedef packed half4 half3x4[3];
typedef packed half3 half3x3[3];
typedef packed half2 half3x2[3];
typedef packed half1 half3x1[3];
typedef packed half4 half2x4[2];
typedef packed half3 half2x3[2];
typedef packed half2 half2x2[2];
typedef packed half1 half2x1[2];
typedef packed half4 half1x4[1];
typedef packed half3 half1x3[1];
typedef packed half2 half1x2[1];
typedef packed half1 half1x1[1];

// things can be declared __internal, which the profile needs to handle
// specially (usually by generating a special instruction)

__internal int		sign(int x);
__internal int2		sign(int2 x);
__internal int3		sign(int3 x);
__internal int4		sign(int4 x);
__internal int		sign(float x);
__internal int2		sign(float2 x);
__internal int3		sign(float3 x);
__internal int4		sign(float4 x);

__internal float	fmod(float x, float y);
__internal float	rsqrt(float x);
__internal float	sqrt(float x);
__internal float	log(float x);
__internal float	log2(float x);
__internal float	log10(float x);
__internal float	exp(float x);
__internal float	exp2(float x);
__internal float	frac(float x);
__internal float	floor(float x);
__internal float	ceil(float x);
__internal float	round(float x);
__internal float	sin(float x);
__internal float	cos(float x);
__internal float	asin(float x);
__internal float	acos(float x);
__internal float	atan2(float y, float x);

#if defined(PROFILE_WII)
inline float		ddx(float a)	{ return 0; }
inline float		ddy(float a)	{ return 0; }
#else
__internal float	ddx(float a);
__internal float	ddy(float a);
#endif

inline void		clip(float a)		{ if (a < 0) discard;		}
inline float	rcp(float a)		{ return 1 / a;	}
inline float	abs(float a)		{ return a < 0 ? -a : a;	}
inline bool		any(float2 a)		{ return a.x != 0 || a.y != 0; }
inline bool		any(float3 a)		{ return a.x != 0 || a.y != 0 || a.z != 0; }
inline bool		any(float4 a)		{ return a.x != 0 || a.y != 0 || a.z != 0 || a.w != 0; }
inline bool		all(float2 a)		{ return a.x != 0 && a.y != 0; }
inline bool		all(float3 a)		{ return a.x != 0 && a.y != 0 && a.z != 0; }
inline bool		all(float4 a)		{ return a.x != 0 && a.y != 0 && a.z != 0 && a.w != 0; }

inline bool		all(bool2 a)		{ return a.x && a.y; }
inline bool		all(bool3 a)		{ return a.x && a.y && a.z; }
inline bool		all(bool4 a)		{ return a.x && a.y && a.z && a.w; }

inline float	dot(float1 a, float1 b) { return a.x*b.x; }
inline float	dot(float2 a, float2 b) { return a.x*b.x + a.y*b.y; }
inline float	dot(float3 a, float3 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
inline float	dot(float4 a, float4 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

inline int	dot(int1 a, int1 b) { return a.x*b.x; }
inline int	dot(int2 a, int2 b) { return a.x*b.x + a.y*b.y; }
inline int	dot(int3 a, int3 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
inline int	dot(int4 a, int4 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

#if defined(PROFILE_WII)

__internal float	lerp(float a, float b, float c);
__internal float1	lerp(float1 a, float1 b, float1 c);
__internal float2	lerp(float2 a, float2 b, float2 c);
__internal float3	lerp(float3 a, float3 b, float3 c);
__internal float4	lerp(float4 a, float4 b, float4 c);

__internal float	saturate(float a);
__internal float1	saturate(float1 x);
__internal float2	saturate(float2 x);
__internal float3	saturate(float3 x);
__internal float4	saturate(float4 x);

__internal float1	normalize(float1 v);
__internal float2	normalize(float2 v);
__internal float3	normalize(float3 v);
__internal float4	normalize(float4 v);

inline float smoothstep(float a, float b, float t)	{
    return t < a ? 0 : t > b : 1 : 0.5;
}

typedef enum GXDiffuseFn {
	GX_DF_NONE	= 0,
	GX_DF_SIGN	= 1,
	GX_DF_CLAMP	= 2
} GXDiffuseFn;

typedef enum GXAttnFn {
	GX_AF_NONE = 0,
	GX_AF_SPEC = 1,
	GX_AF_SPOT = 3
} GXAttnFn;

__internal float4	GXLighting(float3 pos, float3 norm, GXDiffuseFn diff_atten, GXAttnFn atten);

typedef enum GXTevOp {
	GX_TEV_ADD = 0,
	GX_TEV_SUB = 1,

	GX_TEV_COMP_R8_GT= 8,
	GX_TEV_COMP_R8_EQ= 9,
	GX_TEV_COMP_GR16_GT= 10,
	GX_TEV_COMP_GR16_EQ= 11,
	GX_TEV_COMP_BGR24_GT = 12,
	GX_TEV_COMP_BGR24_EQ = 13,
	GX_TEV_COMP_RGB8_GT= 14,
	GX_TEV_COMP_RGB8_EQ= 15,

	GX_TEV_COMP_A8_GT = 14, // for alpha channel
	GX_TEV_COMP_A8_EQ = 15// for alpha channel

} GXTevOp;

__internal float3	GXTevColor(GXTevOp op, float3 a, float3 b, float3 c, float3 d, float bias, float scale, bool clamp);
__internal float	GXTevAlpha(GXTevOp op, float a, float b, float c, float d, float bias, float scale, bool clamp);
__internal float4	GXIndirect(sampler2D tex1, sampler2D tex2, float2 uv, float2x3 mtx);

#else

inline float	lerp(float a, float b, float c)				{ return a * (1 - c) + b * c; }
inline float1	lerp(float1 a, float1 b, float1 c)			{ return a * (1 - c) + b * c; }
inline float2	lerp(float2 a, float2 b, float2 c)			{ return a * (1 - c) + b * c; }
inline float3	lerp(float3 a, float3 b, float3 c)			{ return a * (1 - c) + b * c; }
inline float4	lerp(float4 a, float4 b, float4 c)			{ return a * (1 - c) + b * c; }
inline float3x4	lerp(float3x4 a, float3x4 b, float3x4 c)	{ return a * (1 - c) + b * c; }
inline float4x4	lerp(float4x4 a, float4x4 b, float4x4 c)	{ return a * (1 - c) + b * c; }

inline float	saturate(float a)	{ return a < 0 ? 0 : a > 1 ? 1 : a; }
inline float1	saturate(float1 x)	{ return float1(saturate(x.x));}
inline float2	saturate(float2 x)	{ return float2(saturate(x.x), saturate(x.y));}
inline float3	saturate(float3 x)	{ return float3(saturate(x.x), saturate(x.y), saturate(x.z));}
inline float4	saturate(float4 x)	{ return float4(saturate(x.x), saturate(x.y), saturate(x.z), saturate(x.w));}

inline float smoothstep(float a, float b, float t)	{
	t = saturate((t - a)/(b - a));
	return t * t * (3 - 2 * t);
}
inline float1 smoothstep(float1 a, float1 b, float1 t)	{
	t = saturate((t - a)/(b - a));
	return t * t * (3 - 2 * t);
}
inline float2 smoothstep(float2 a, float2 b, float2 t)	{
	t = saturate((t - a)/(b - a));
	return t * t * (3 - 2 * t);
}
inline float3 smoothstep(float3 a, float3 b, float3 t)	{
	t = saturate((t - a)/(b - a));
	return t * t * (3 - 2 * t);
}
inline float4 smoothstep(float4 a, float4 b, float4 t)	{
	t = saturate((t - a)/(b - a));
	return t * t * (3 - 2 * t);
}

inline float1	normalize(float1 v) { return rsqrt(dot(v, v)) * v; }
inline float2	normalize(float2 v) { return rsqrt(dot(v, v)) * v; }
inline float3	normalize(float3 v) { return rsqrt(dot(v, v)) * v; }
inline float4	normalize(float4 v) { return rsqrt(dot(v, v)) * v; }

#endif

inline float	cross(float2 x, float2 y)				{ return x.x * y.y - x.y * y.x;				}
inline float3	cross(float3 x, float3 y)				{ return x.yzx * y.zxy - x.zxy * y.yzx;		}
inline float3	reflect(float3 i, float3 n)				{ return i - 2 * dot(i, n) * n;				}
inline float3	refract(float3 i, float3 n, float eta)	{ return i + cross(n, cross(i, n) *eta);	}

inline void sincos(float x, out float s, out float c) {
	s = sin(x);
	c = cos(x);
}

inline float1	fmod(float1 x, float1 y)		{ return float1(fmod(x.x, y.x));}
inline float2	fmod(float2 x, float2 y)		{ return float2(fmod(x.x, y.x), fmod(x.y, y.y));}
inline float3	fmod(float3 x, float3 y)		{ return float3(fmod(x.x, y.x), fmod(x.y, y.y), fmod(x.z, y.z));}
inline float4	fmod(float4 x, float4 y)		{ return float4(fmod(x.x, y.x), fmod(x.y, y.y), fmod(x.z, y.z), fmod(x.w, y.w));}

inline float1	rsqrt(float1 x)		{ return float1(rsqrt(x.x));}
inline float2	rsqrt(float2 x)		{ return float2(rsqrt(x.x), rsqrt(x.y));}
inline float3	rsqrt(float3 x)		{ return float3(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z));}
inline float4	rsqrt(float4 x)		{ return float4(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z), rsqrt(x.w));}

inline float1	sqrt(float1 x)		{ return float1(sqrt(x.x));}
inline float2	sqrt(float2 x)		{ return float2(sqrt(x.x), sqrt(x.y));}
inline float3	sqrt(float3 x)		{ return float3(sqrt(x.x), sqrt(x.y), sqrt(x.z));}
inline float4	sqrt(float4 x)		{ return float4(sqrt(x.x), sqrt(x.y), sqrt(x.z), sqrt(x.w));}

inline float1	log(float1 x)		{ return float1(log(x.x));}
inline float2	log(float2 x)		{ return float2(log(x.x), log(x.y));}
inline float3	log(float3 x)		{ return float3(log(x.x), log(x.y), log(x.z));}
inline float4	log(float4 x)		{ return float4(log(x.x), log(x.y), log(x.z), log(x.w));}
inline float1	log2(float1 x)		{ return float1(log2(x.x));}
inline float2	log2(float2 x)		{ return float2(log2(x.x), log2(x.y));}
inline float3	log2(float3 x)		{ return float3(log2(x.x), log2(x.y), log2(x.z));}
inline float4	log2(float4 x)		{ return float4(log2(x.x), log2(x.y), log2(x.z), log2(x.w));}
inline float1	log10(float1 x)		{ return float1(log10(x.x));}
inline float2	log10(float2 x)		{ return float2(log10(x.x), log10(x.y));}
inline float3	log10(float3 x)		{ return float3(log10(x.x), log10(x.y), log10(x.z));}
inline float4	log10(float4 x)		{ return float4(log10(x.x), log10(x.y), log10(x.z), log10(x.w));}

inline float1	exp(float1 x)		{ return float1(exp(x.x));}
inline float2	exp(float2 x)		{ return float2(exp(x.x), exp(x.y));}
inline float3	exp(float3 x)		{ return float3(exp(x.x), exp(x.y), exp(x.z));}
inline float4	exp(float4 x)		{ return float4(exp(x.x), exp(x.y), exp(x.z), exp(x.w));}

inline float1	exp2(float1 x)		{ return float1(exp2(x.x));}
inline float2	exp2(float2 x)		{ return float2(exp2(x.x), exp2(x.y));}
inline float3	exp2(float3 x)		{ return float3(exp2(x.x), exp2(x.y), exp2(x.z));}
inline float4	exp2(float4 x)		{ return float4(exp2(x.x), exp2(x.y), exp2(x.z), exp2(x.w));}

inline float1	frac(float1 a)		{ return float1(frac(a.x));	}
inline float2	frac(float2 a)		{ return float2(frac(a.x), frac(a.y));	}
inline float3	frac(float3 a)		{ return float3(frac(a.x), frac(a.y), frac(a.z));	}
inline float4	frac(float4 a)		{ return float4(frac(a.x), frac(a.y), frac(a.z), frac(a.w));	}

inline float1	floor(float1 a)		{ return float1(floor(a.x));	}
inline float2	floor(float2 a)		{ return float2(floor(a.x), floor(a.y));	}
inline float3	floor(float3 a)		{ return float3(floor(a.x), floor(a.y), floor(a.z));	}
inline float4	floor(float4 a)		{ return float4(floor(a.x), floor(a.y), floor(a.z), floor(a.w));	}

inline float1	ceil(float1 a)		{ return float1(ceil(a.x));	}
inline float2	ceil(float2 a)		{ return float2(ceil(a.x), ceil(a.y));	}
inline float3	ceil(float3 a)		{ return float3(ceil(a.x), ceil(a.y), ceil(a.z));	}
inline float4	ceil(float4 a)		{ return float4(ceil(a.x), ceil(a.y), ceil(a.z), ceil(a.w));	}

inline float1	round(float1 a)		{ return float1(round(a.x));	}
inline float2	round(float2 a)		{ return float2(round(a.x), round(a.y));	}
inline float3	round(float3 a)		{ return float3(round(a.x), round(a.y), round(a.z));	}
inline float4	round(float4 a)		{ return float4(round(a.x), round(a.y), round(a.z), round(a.w));	}

inline float1	sin(float1 a)		{ return float1(sin(a.x));	}
inline float2	sin(float2 a)		{ return float2(sin(a.x), sin(a.y));	}
inline float3	sin(float3 a)		{ return float3(sin(a.x), sin(a.y), sin(a.z));	}
inline float4	sin(float4 a)		{ return float4(sin(a.x), sin(a.y), sin(a.z), sin(a.w));	}

inline float1	cos(float1 a)		{ return float1(cos(a.x));	}
inline float2	cos(float2 a)		{ return float2(cos(a.x), cos(a.y));	}
inline float3	cos(float3 a)		{ return float3(cos(a.x), cos(a.y), cos(a.z));	}
inline float4	cos(float4 a)		{ return float4(cos(a.x), cos(a.y), cos(a.z), cos(a.w));	}

inline float1	asin(float1 a)		{ return float1(asin(a.x));	}
inline float2	asin(float2 a)		{ return float2(asin(a.x), asin(a.y));	}
inline float3	asin(float3 a)		{ return float3(asin(a.x), asin(a.y), asin(a.z));	}
inline float4	asin(float4 a)		{ return float4(asin(a.x), asin(a.y), asin(a.z), asin(a.w));	}

inline float1	acos(float1 a)		{ return float1(acos(a.x));	}
inline float2	acos(float2 a)		{ return float2(acos(a.x), acos(a.y));	}
inline float3	acos(float3 a)		{ return float3(acos(a.x), acos(a.y), acos(a.z));	}
inline float4	acos(float4 a)		{ return float4(acos(a.x), acos(a.y), acos(a.z), acos(a.w));	}

inline float1	ddx(float1 a)		{ return float1(ddx(a.x));	}
inline float2	ddx(float2 a)		{ return float2(ddx(a.x), ddx(a.y));	}
inline float3	ddx(float3 a)		{ return float3(ddx(a.x), ddx(a.y), ddx(a.z));	}
inline float4	ddx(float4 a)		{ return float4(ddx(a.x), ddx(a.y), ddx(a.z), ddx(a.w));	}

inline float1	ddy(float1 a)		{ return float1(ddy(a.x));	}
inline float2	ddy(float2 a)		{ return float2(ddy(a.x), ddy(a.y));	}
inline float3	ddy(float3 a)		{ return float3(ddy(a.x), ddy(a.y), ddy(a.z));	}
inline float4	ddy(float4 a)		{ return float4(ddy(a.x), ddy(a.y), ddy(a.z), ddy(a.w));	}

inline float1	abs(float1 a)		{ return float1(abs(a.x));	}
inline float2	abs(float2 a)		{ return float2(abs(a.x), abs(a.y));	}
inline float3	abs(float3 a)		{ return float3(abs(a.x), abs(a.y), abs(a.z));	}
inline float4	abs(float4 a)		{ return float4(abs(a.x), abs(a.y), abs(a.z), abs(a.w));	}

inline float1	rcp(float1 a)		{ return float1(rcp(a.x));	}
inline float2	rcp(float2 a)		{ return float2(rcp(a.x), rcp(a.y));	}
inline float3	rcp(float3 a)		{ return float3(rcp(a.x), rcp(a.y), rcp(a.z));	}
inline float4	rcp(float4 a)		{ return float4(rcp(a.x), rcp(a.y), rcp(a.z), rcp(a.w));	}

inline float	pow(float x, float y)	{ return exp(log(x) * y); }
inline float1	pow(float1 x, float1 y)	{ return float1(pow(x.x, y.x));}
inline float2	pow(float2 x, float2 y)	{ return float2(pow(x.x, y.x), pow(x.y, y.y));}
inline float3	pow(float3 x, float3 y)	{ return float3(pow(x.x, y.x), pow(x.y, y.y), pow(x.z, y.z));}
inline float4	pow(float4 x, float4 y)	{ return float4(pow(x.x, y.x), pow(x.y, y.y), pow(x.z, y.z), pow(x.w, y.w));}
inline float1	pow(float x, float1 y)	{ return float1(pow(x, y.x));}
inline float2	pow(float x, float2 y)	{ return float2(pow(x, y.x), pow(x, y.y));}
inline float3	pow(float x, float3 y)	{ return float3(pow(x, y.x), pow(x, y.y), pow(x, y.z));}
inline float4	pow(float x, float4 y)	{ return float4(pow(x, y.x), pow(x, y.y), pow(x, y.z), pow(x, y.w));}

inline float1	atan2(float1 x, float1 y)	{ return float1(atan2(x.x, y.x));}
inline float2	atan2(float2 x, float2 y)	{ return float2(atan2(x.x, y.x), atan2(x.y, y.y));}
inline float3	atan2(float3 x, float3 y)	{ return float3(atan2(x.x, y.x), atan2(x.y, y.y), atan2(x.z, y.z));}
inline float4	atan2(float4 x, float4 y)	{ return float4(atan2(x.x, y.x), atan2(x.y, y.y), atan2(x.z, y.z), atan2(x.w, y.w));}
inline float1	atan2(float x, float1 y)	{ return float1(atan2(x, y.x));}
inline float2	atan2(float x, float2 y)	{ return float2(atan2(x, y.x), atan2(x, y.y));}
inline float3	atan2(float x, float3 y)	{ return float3(atan2(x, y.x), atan2(x, y.y), atan2(x, y.z));}
inline float4	atan2(float x, float4 y)	{ return float4(atan2(x, y.x), atan2(x, y.y), atan2(x, y.z), atan2(x, y.w));}

inline float	length(float1 a)	{ return sqrt(dot(a, a)); }
inline float	length(float2 a)	{ return sqrt(dot(a, a)); }
inline float	length(float3 a)	{ return sqrt(dot(a, a)); }
inline float	length(float4 a)	{ return sqrt(dot(a, a)); }

inline float	distance(float1 a, float1 b)	{ return length(b - a); }
inline float	distance(float2 a, float2 b)	{ return length(b - a); }
inline float	distance(float3 a, float3 b)	{ return length(b - a); }
inline float	distance(float4 a, float4 b)	{ return length(b - a); }

inline float	fwidth(float a)		{ return abs(ddx(a)) + abs(ddy(a)); }
inline float1	fwidth(float1 a)	{ return abs(ddx(a)) + abs(ddy(a)); }
inline float2	fwidth(float2 a)	{ return abs(ddx(a)) + abs(ddy(a)); }
inline float3	fwidth(float3 a)	{ return abs(ddx(a)) + abs(ddy(a)); }
inline float4	fwidth(float4 a)	{ return abs(ddx(a)) + abs(ddy(a)); }

inline float2 mul(float2x2 m, float2 v) {
return float2(
		dot(m._m00_m01, v),
		dot(m._m10_m11, v)
	);
}
inline float3 mul(float3x2 m, float2 v) {
return float3(
		dot(m._m00_m01, v),
		dot(m._m10_m11, v),
		dot(m._m20_m21, v)
	);
}
inline float4 mul(float4x2 m, float2 v) {
return float4(
		dot(m._m00_m01, v),
		dot(m._m10_m11, v),
		dot(m._m20_m21, v),
		dot(m._m30_m31, v)
	);
}
inline float2 mul(float2x3 m, float3 v) {
return float2(
		dot(m._m00_m01_m02, v),
		dot(m._m10_m11_m12, v)
	);
}
inline float3 mul(float3x3 m, float3 v) {
return float3(
		dot(m._m00_m01_m02, v),
		dot(m._m10_m11_m12, v),
		dot(m._m20_m21_m22, v)
	);
}
inline float4 mul(float4x3 m, float3 v) {
return float4(
		dot(m._m00_m01_m02, v),
		dot(m._m10_m11_m12, v),
		dot(m._m20_m21_m22, v),
		dot(m._m30_m31_m32, v)
	);
}
inline float2 mul(float2x4 m, float4 v) {
return float2(
		dot(m._m00_m01_m02_m03, v),
		dot(m._m10_m11_m12_m13, v)
	);
}
inline float3 mul(float3x4 m, float4 v) {
return float3(
		dot(m._m00_m01_m02_m03, v),
		dot(m._m10_m11_m12_m13, v),
		dot(m._m20_m21_m22_m23, v)
	);
}
inline float4 mul(float4x4 m, float4 v) {
return float4(
		dot(m._m00_m01_m02_m03, v),
		dot(m._m10_m11_m12_m13, v),
		dot(m._m20_m21_m22_m23, v),
		dot(m._m30_m31_m32_m33, v)
	);
}

#if defined(PROFILE_WII)

inline float2 mul(float2 v, float2x2 m) {
	return	v.x * m._m00_m01
		+	v.y * m._m10_m11;
}
inline float3 mul(float2 v, float2x3 m) {
	return	v.x * m._m00_m01_m02
		+	v.y * m._m10_m11_m12;
}
inline float4 mul(float2 v, float2x4 m) {
	return	v.x * m._m00_m01_m02_m03
		+	v.y * m._m10_m11_m12_m13;
}
inline float2 mul(float3 v, float3x2 m) {
	return	v.x * m._m00_m01
		+	v.y * m._m10_m11
		+	v.z * m._m20_m21;
}
inline float3 mul(float3 v, float3x3 m) {
	return	v.x * m._m00_m01_m02
		+	v.y * m._m10_m11_m12
		+	v.z * m._m20_m21_m22;
}
inline float4 mul(float3 v, float3x4 m) {
	return	v.x * m._m00_m01_m02_m03
		+	v.y * m._m10_m11_m12_m13
		+	v.z * m._m20_m21_m22_m23;
}
inline float2 mul(float4 v, float4x2 m) {
	return	v.x * m._m00_m01
		+	v.y * m._m10_m11
		+	v.z * m._m20_m21
		+	v.w * m._m30_m31;
}
inline float3 mul(float4 v, float4x3 m) {
	return	v.x * m._m00_m01_m02
		+	v.y * m._m10_m11_m12
		+	v.z * m._m20_m21_m22
		+	v.w * m._m30_m31_m32;
}
inline float4 mul(float4 v, float4x4 m) {
	return	v.x * m._m00_m01_m02_m03
		+	v.y * m._m10_m11_m12_m13
		+	v.z * m._m20_m21_m22_m23
		+	v.w * m._m30_m31_m32_m33;
}

#else

inline float2 mul(float2 v, float2x2 m) {
return float2(
		dot(v, m._m00_m10),
		dot(v, m._m01_m11)
	);
}
inline float3 mul(float2 v, float2x3 m) {
return float3(
		dot(v, m._m00_m10),
		dot(v, m._m01_m11),
		dot(v, m._m02_m12)
	);
}
inline float4 mul(float2 v, float2x4 m) {
return float4(
		dot(v, m._m00_m10),
		dot(v, m._m01_m11),
		dot(v, m._m02_m12),
		dot(v, m._m03_m13)
	);
}
inline float2 mul(float3 v, float3x2 m) {
return float2(
		dot(v, m._m00_m10_m20),
		dot(v, m._m01_m11_m21)
	);
}
inline float3 mul(float3 v, float3x3 m) {
return float3(
		dot(v, m._m00_m10_m20),
		dot(v, m._m01_m11_m21),
		dot(v, m._m02_m12_m22)
	);
}
inline float4 mul(float3 v, float3x4 m) {
return float4(
		dot(v, m._m00_m10_m20),
		dot(v, m._m01_m11_m21),
		dot(v, m._m02_m12_m22),
		dot(v, m._m03_m13_m23)
	);
}
inline float2 mul(float4 v, float4x2 m) {
return float2(
		dot(v, m._m00_m10_m20_m30),
		dot(v, m._m01_m11_m21_m31)
	);
}
inline float3 mul(float4 v, float4x3 m) {
return float3(
		dot(v, m._m00_m10_m20_m30),
		dot(v, m._m01_m11_m21_m31),
		dot(v, m._m02_m12_m22_m32)
	);
}
inline float4 mul(float4 v, float4x4 m) {
return float4(
		dot(v, m._m00_m10_m20_m30),
		dot(v, m._m01_m11_m21_m31),
		dot(v, m._m02_m12_m22_m32),
		dot(v, m._m03_m13_m23_m33)
	);
}
#endif

inline float3x3 mul(float3x3 a, float3x3 b) {
	return	float3x3(
		mul(a[0], b),
		mul(a[1], b),
		mul(a[2], b)
	);
}

inline float4x4 mul(float4x4 a, float4x4 b) {
	return	float4x4(
		mul(a[0], b),
		mul(a[1], b),
		mul(a[2], b),
		mul(a[3], b)
	);
}

inline float2x3 mul(float2x2 a, float2x3 b) {
	return	float2x3(
		mul(a, b._m00_m10),
		mul(a, b._m01_m11),
		mul(a, b._m02_m12)
	);
}


inline float2x2 transpose(float2x2 m)	{ return float2x2(m._m00_m10, m._m01_m11); }
inline float3x2 transpose(float2x3 m)	{ return float3x2(m._m00_m10, m._m01_m11, m._m02_m12); }
inline float4x2 transpose(float2x4 m)	{ return float4x2(m._m00_m10, m._m01_m11, m._m02_m12, m._m03_m13); }
inline float2x3 transpose(float3x2 m)	{ return float2x3(m._m00_m10_m20, m._m01_m11_m21); }
inline float3x3 transpose(float3x3 m)	{ return float3x3(m._m00_m10_m20, m._m01_m11_m21, m._m02_m12_m22); }
inline float4x3 transpose(float3x4 m)	{ return float4x3(m._m00_m10_m20, m._m01_m11_m21, m._m02_m12_m22, m._m03_m13_m23); }
inline float2x4 transpose(float4x2 m)	{ return float2x4(m._m00_m10_m20_m30, m._m01_m11_m21_m31); }
inline float3x4 transpose(float4x3 m)	{ return float3x4(m._m00_m10_m20_m30, m._m01_m11_m21_m31, m._m02_m12_m22_m32); }
inline float4x4 transpose(float4x4 m)	{ return float4x4(m._m00_m10_m20_m30, m._m01_m11_m21_m31, m._m02_m12_m22_m32, m._m03_m13_m23_m33); }

#ifdef PROFILE_ORBIS
__internal uint		min(uint  a, uint  b);
__internal int		min(int  a, int  b);
__internal float	min(float  a, float  b);
__internal float	min3(float  a, float  b, float c);
__internal uint		max(uint  a, uint  b);
__internal int		max(int  a, int  b);
__internal float	max(float  a, float  b);
__internal float	max3(float  a, float  b, float c);
__internal float	med3(float  a, float  b, float c);
#else
inline float  min(float  a, float  b) { return a > b ? b : a; }
inline float  max(float  a, float  b) { return a > b ? a : b; }
#endif

inline float1 max(float1 x, float1 y) { return float1(max(x.x, y.x));}
inline float2 max(float2 x, float2 y) { return float2(max(x.x, y.x), max(x.y, y.y));}
inline float3 max(float3 x, float3 y) { return float3(max(x.x, y.x), max(x.y, y.y), max(x.z, y.z));}
inline float4 max(float4 x, float4 y) { return float4(max(x.x, y.x), max(x.y, y.y), max(x.z, y.z), max(x.w, y.w));}

inline float1 min(float1 x, float1 y) { return float1(min(x.x, y.x));}
inline float2 min(float2 x, float2 y) { return float2(min(x.x, y.x), min(x.y, y.y));}
inline float3 min(float3 x, float3 y) { return float3(min(x.x, y.x), min(x.y, y.y), min(x.z, y.z));}
inline float4 min(float4 x, float4 y) { return float4(min(x.x, y.x), min(x.y, y.y), min(x.z, y.z), min(x.w, y.w));}

inline float  clamp(float  a, float  b, float  c)	{ return min(max(a, b), c); }
inline float1 clamp(float1 a, float1 b, float1 c)	{ return min(max(a, b), c); }
inline float2 clamp(float2 a, float2 b, float2 c)	{ return min(max(a, b), c); }
inline float3 clamp(float3 a, float3 b, float3 c)	{ return min(max(a, b), c); }
inline float4 clamp(float4 a, float4 b, float4 c)	{ return min(max(a, b), c); }

#ifdef PROFILE_ORBIS
inline uint  clamp(uint  a, uint  b, uint  c)	{ return min(max(a, b), c); }
inline int  clamp(int  a, int  b, int  c)	{ return min(max(a, b), c); }
#endif

inline float  step(float  a, float  b)	{ return float(a < b); }
inline float1 step(float1 x, float1 y) 	{ return float1(step(x.x, y.x));}
inline float2 step(float2 x, float2 y) 	{ return float2(step(x.x, y.x), step(x.y, y.y));}
inline float3 step(float3 x, float3 y) 	{ return float3(step(x.x, y.x), step(x.y, y.y), step(x.z, y.z));}
inline float4 step(float4 x, float4 y) 	{ return float4(step(x.x, y.x), step(x.y, y.y), step(x.z, y.z), step(x.w, y.w));}

#ifdef PROFILE_PS3
__internal float	pack_2half(float2 t);
__internal float	pack_2half(half2 t);
__internal half2	unpack_2half(float t);
__internal float	pack_2ushort(float2 t);
__internal float	pack_2ushort(half2 t);
__internal float2	unpack_2ushort(float t);
__internal float	pack_4byte(float4 t);
__internal float	pack_4byte(half4 t);
__internal half4	unpack_4byte(float t);
__internal float	pack_4ubyte(float4 t);
__internal float	pack_4ubyte(half4 t);
__internal half4	unpack_4ubyte(float t);
__internal float	pack_4ubytegamma(float4 t);
__internal float	pack_4ubytegamma(half4 t);
__internal half4	unpack_4ubytegamma(float t);
#endif

inline float	asfloat(bool b)		{ return float(b); }
inline float	asfloat(uint b)		{ return float(b); }
inline float	asfloat(int b)		{ return float(b); }
inline float	asfloat(float b)	{ return float(b); }

inline int		asint(bool b)		{ return int(b); }
inline int		asint(uint b)		{ return int(b); }
inline int		asint(int b)		{ return int(b); }
inline int		asint(float b)		{ return int(b); }

inline uint		asuint(bool b)		{ return uint(b); }
inline uint		asuint(uint b)		{ return uint(b); }
inline uint		asuint(int b)		{ return uint(b); }
inline uint		asuint(float b)		{ return uint(b); }

inline float	f16tof32(half b)	{ return float(b); }
inline float2	f16tof32(half2 b)	{ return float2(b); }
inline float3	f16tof32(half3 b)	{ return float3(b); }
inline float4	f16tof32(half4 b)	{ return float4(b); }

inline half		f32tof16(float b)	{ return half(b); }
inline half2	f32tof16(float2 b)	{ return half2(b); }
inline half3	f32tof16(float3 b)	{ return half3(b); }
inline half4	f32tof16(float4 b)	{ return half4(b); }

inline bool		isfinite(float b)	{ return false; }

__internal void	GetDimensions(out uint dim);
__internal void	AtomicAdd(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicAdd(inout uint dest, uint value);
__internal void	AtomicAnd(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicAnd(inout uint dest, uint value);
__internal void	AtomicCmpExchange(inout uint dest, uint z, uint value, out uint originalValue);
__internal void	AtomicCmpStore(inout uint dest, uint z, uint value);
__internal void	AtomicExchange(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicMax(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicMax(inout uint dest, uint value);
__internal void	AtomicMin(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicMin(inout uint dest, uint value);
__internal void	AtomicOr(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicOr(inout uint dest, uint value);
__internal void	AtomicXor(inout uint dest, uint value, out uint originalValue);
__internal void	AtomicXor(inout uint dest, uint value);


#if 0
abort
abs
acos
all
void AllMemoryBarrier();
void AllMemoryBarrierWithGroupSync();
any
asdouble
asin
atan
atan2
ceil
CheckAccessFullyMapped
clamp
clip
cosh
countbits
cross
D3DCOLORtoUBYTE4
ddx_coarse
ddx_fine
ddy_coarse
ddy_fine
degrees
determinant
DeviceMemoryBarrier
DeviceMemoryBarrierWithGroupSync
distance
dot
dst
errorf
EvaluateAttributeAtCentroid
EvaluateAttributeAtSample
EvaluateAttributeSnapped
faceforward
firstbithigh
firstbitlow
floor
fmod
frexp
fwidth
GetRenderTargetSampleCount
GetRenderTargetSamplePosition
GroupMemoryBarrier
GroupMemoryBarrierWithGroupSync
isinf
isnan
ldexp
lerp
lit
mad
modf
msad4
noise
printf
Process2DQuadTessFactorsAvg
Process2DQuadTessFactorsMax
Process2DQuadTessFactorsMin
ProcessIsolineTessFactors
ProcessQuadTessFactorsAvg
ProcessQuadTessFactorsMax
ProcessQuadTessFactorsMin
ProcessTriTessFactorsAvg
ProcessTriTessFactorsMax
ProcessTriTessFactorsMin
radians
rcp
reflect
refract
reversebits
sinh
smoothstep
tan
tanh
tex1D(s, t)
tex1D(s, t, ddx, ddy)
tex1Dbias
tex1Dgrad
tex1Dlod
tex1Dproj
tex2D(s, t)
tex2D(s, t, ddx, ddy)
tex2Dbias
tex2Dgrad
tex2Dlod
tex2Dproj
tex3D(s, t)
tex3D(s, t, ddx, ddy)
tex3Dbias
tex3Dgrad
tex3Dlod
tex3Dproj
texCUBE(s, t)
texCUBE(s, t, ddx, ddy)
texCUBEbias
texCUBEgrad
texCUBElod
texCUBEproj
trunc
#endif

#ifdef HAS_GEOMETRY
//	Geometry Buffers
template<typedef T> struct PointBuffer {
	__internal void			Append(T value);
	__internal void			RestartStrip();
};
template<typedef T> struct LineBuffer {
	__internal void			Append(T value);
	__internal void			RestartStrip();
};
template<typedef T> struct TriangleBuffer {
	__internal void			Append(T value);
	__internal void			RestartStrip();
};
#endif

#ifdef HAS_TESSELATION
template<typedef T> struct InputPatch {
	__internal const T		operator[](int loc);
};
template<typedef T> struct OutputPatch {
	__internal const T		operator[](int loc);
};
#endif

#ifndef PROFILE_ORBIS
__internal float4	tex1D(sampler1D tex, float s);
__internal float4	tex1D(sampler1D tex, float s, float dsdx, float dsdy);
__internal float4	tex1D(sampler1D tex, float2 sz);
__internal float4	tex1D(sampler1D tex, float2 sz, float dsdx, float dsdy);
__internal float4	tex1Dproj(sampler1D tex, float4 szq);
__internal float4	tex1Dbias(sampler1D tex, float4 szq);
__internal float4	tex1Dlod(sampler1D tex, float4 szq);
__internal float4	tex2D(sampler2D tex, float2 s);
__internal float4	tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy);
__internal float4	tex2D(sampler2D tex, float3 sz);
__internal float4	tex2D(sampler2D tex, float3 sz, float2 dsdx, float2 dsdy);
__internal float4	tex2Dproj(sampler2D tex, float4 szq);
__internal float4	tex2Dbias(sampler2D tex, float4 szq);
__internal float4	tex2Dlod(sampler2D tex, float4 szq);
__internal float4	texRECT(samplerRECT tex, float2 s);
__internal float4	texRECT(samplerRECT tex, float2 s, float2 dsdx, float2 dsdy);
__internal float4	texRECT(samplerRECT tex, float3 sz);
__internal float4	texRECT(samplerRECT tex, float3 sz, float2 dsdx, float2 dsdy);
__internal float4	texRECTproj(samplerRECT tex, float4 szq);
__internal float4	texRECTbias(samplerRECT tex, float4 szq);
__internal float4	texRECTlod(samplerRECT tex, float4 szq);
__internal float4	tex3D(sampler3D tex, float3 s);
__internal float4	tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy);
__internal float4	tex3Dproj(sampler3D tex, float4 sq);
__internal float4	tex3Dbias(sampler3D tex, float4 sq);
__internal float4	tex3Dlod(sampler3D tex, float4 sq);
__internal float4	texCUBE(samplerCUBE tex, float3 s);
__internal float4	texCUBE(samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy);
__internal float4	texCUBEproj(samplerCUBE tex, float4 sq);
__internal float4	texCUBEbias(samplerCUBE tex, float4 sq);
__internal float4	texCUBElod(samplerCUBE tex, float4 sq);
__internal float	shadow2D(sampler2DShadow tex, float3 coord);
__internal float	shadow2Dproj(sampler2DShadow tex, float4 coord);

__internal float4	tex2DArray(sampler2DArray tex, float2 s, uint z);

#else
//	Byte & Data Buffers
struct ByteBuffer {
	__internal void			GetDimensions(out uint dim);
	__internal const uint	Load(uint address);
	__internal const uint2	Load2(uint address);
	__internal const uint3	Load3(uint address);
	__internal const uint4	Load4(uint address);
};

struct RW_ByteBuffer {
	__internal void			GetDimensions(out uint dim);
	__internal void			AtomicAdd(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicAdd(inout uint dest, uint value);
	__internal void			AtomicAnd(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicAnd(inout uint dest, uint value);
	__internal void			AtomicCmpExchange(inout uint dest, uint z, uint value, out uint originalValue);
	__internal void			AtomicCmpStore(inout uint dest, uint z, uint value);
	__internal void			AtomicExchange(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicMax(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicMax(inout uint dest, uint value);
	__internal void			AtomicMin(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicMin(inout uint dest, uint value);
	__internal void			AtomicOr(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicOr(inout uint dest, uint value);
	__internal void			AtomicXor(inout uint dest, uint value, out uint originalValue);
	__internal void			AtomicXor(inout uint dest, uint value);

	__internal const uint	Load(uint address);
	__internal const uint2	Load2(uint address);
	__internal const uint3	Load3(uint address);
	__internal const uint4	Load4(uint address);

	__internal void			Store(uint address, uint value);
	__internal void			Store2(uint address, uint2 values);
	__internal void			Store3(uint address, uint3 values);
	__internal void			Store4(uint address, uint4 values);
};

template<typedef T> struct DataBuffer {
	__internal void			GetDimensions(out uint dim);
	__internal const T		Load(int2 address);
	__internal const T		operator[](int loc);
};

template<typedef T> struct RW_DataBuffer {
	__internal void			GetDimensions(out uint width);
	__internal inout T		operator[](int loc);
};

//	Regular Buffers
template<typedef T> struct AppendRegularBuffer {
	__internal void			Append(T value);
	__internal void			GetDimensions(out uint numStructs, out uint stride);
};

template<typedef T> struct ConsumeRegularBuffer {
	__internal void			GetDimensions(out uint numStructs, out uint stride);
	__internal const T		Consume();
};

template<typedef T> struct RegularBuffer {
	__internal void			GetDimensions(out uint numStructs, out uint stride);
	__internal const T		operator[](int loc);
};

template<typedef T> struct RW_RegularBuffer {
	__internal void			GetDimensions(out uint numStructs, out uint stride);
	__internal const uint	DecrementCount();
	__internal const uint	IncrementCount();
	__internal inout T		operator[](int loc);
};

//	Normal Textures
template<typedef T> struct Texture1D {
	typedef	int	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal void			GetDimensions(out float width);
	__internal void			GetDimensions(out uint width);
	__internal void			GetDimensions(uint mipLevel, out float width, out float mipCount);
	__internal void			GetDimensions(uint mipLevel, out uint width, out uint mipCount);
	__internal void			GetDimensions(uint mipLevel, out float width, out float mipCount);
	__internal void			GetDimensions(uint mipLevel, out uint width, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float loc);

	__internal const T		Load			(int2 loc);
	__internal const T		Load			(int2 loc, int offset);

	__internal const T		Sample			(SamplerState samp, float loc);
	__internal const T		Sample			(SamplerState samp, float loc, int offset);
	__internal const T		SampleBias		(SamplerState samp, float loc, float bias);
	__internal const T		SampleBias		(SamplerState samp, float loc, float bias, int offset);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float loc, float z);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float loc, float z, int offset);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float loc, float z, int offset);
	__internal const T		SampleGradient	(SamplerState samp, float loc, float ddx, float ddy);
	__internal const T		SampleGradient	(SamplerState samp, float loc, float ddx, float ddy, int offset);
	__internal const T		SampleLOD		(SamplerState samp, float loc, float lod);
	__internal const T		SampleLOD		(SamplerState samp, float loc, float lod, int offset);
};

template<typedef T> struct Texture1D_Array {
	typedef	int2	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);
	__internal void			GetDimensions(out float width, out float elements);
	__internal void			GetDimensions(out uint width, out uint elements);
	__internal void			GetDimensions(uint mipLevel, out float width, out float elements, out float mipCount);
	__internal void			GetDimensions(uint mipLevel, out uint width, out uint elements, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float2 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float2 loc);
	__internal const T		Load			(int2 loc);
	__internal const T		Load			(int2 loc, int offset);

	__internal const T		Sample			(SamplerState samp, float2 loc);
	__internal const T		Sample			(SamplerState samp, float2 loc, int offset);
	__internal const T		SampleBias		(SamplerState samp, float2 loc, float bias);
	__internal const T		SampleBias		(SamplerState samp, float2 loc, float bias, int offset);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float2 loc, float z, int offset);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float2 loc, float z, int offset);
	__internal const T		SampleGradient	(SamplerState samp, float2 loc, float ddx, float ddy);
	__internal const T		SampleGradient	(SamplerState samp, float2 loc, float ddx, float ddy, int offset);
	__internal const T		SampleLOD		(SamplerState samp, float2 loc, float lod);
	__internal const T		SampleLOD		(SamplerState samp, float2 loc, float lod, int offset);
};

template<typedef T> struct Texture2D {
	typedef	int2	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal const T		Gather			(SamplerState samp, float2 loc);
	__internal const T		Gather			(SamplerState samp, float2 loc, int2 offset);

	__internal const T		GatherRed		(SamplerState samp, float2 loc);
	__internal const T		GatherRed		(SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherRed		(SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherGreen		(SamplerState samp, float2 loc);
	__internal const T		GatherGreen		(SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherGreen		(SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherBlue		(SamplerState samp, float2 loc);
	__internal const T		GatherBlue		(SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherBlue		(SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherAlpha		(SamplerState samp, float2 loc);
	__internal const T		GatherAlpha		(SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherAlpha		(SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal T			GatherBias		(SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBias		(SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasRed	(SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasGreen	(SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasGreen	(SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasGreen	(SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasBlue	(SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasBlue	(SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasBlue	(SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasAlpha	(SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasAlpha	(SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasAlpha	(SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal const T		GatherCmp		(SamplerComparisonState samp, float2 loc, float z);
	__internal const T		GatherCmp		(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherLOD		(SamplerState samp, float2 loc, float lod);
	__internal T			GatherLOD		(SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODRed	(SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODGreen	(SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODGreen	(SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODGreen	(SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODBlue	(SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODBlue	(SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODBlue	(SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODAlpha	(SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODAlpha	(SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODAlpha	(SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal void			GetDimensions	(out float width, out float height);
	__internal void			GetDimensions	(out uint width, out uint height);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float2 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float2 loc);

	__internal const T		Load			(int2 loc);
	__internal const T		Load			(int2 loc, int offset);

	__internal const T		Sample			(SamplerState samp, float2 loc);
	__internal const T		Sample			(SamplerState samp, float2 loc, int2 offset);
	__internal const T		SampleBias		(SamplerState samp, float2 loc, float bias);
	__internal const T		SampleBias		(SamplerState samp, float2 loc, float bias, int2 offset);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal const T		SampleGradient	(SamplerState samp, float2 loc, float2 ddx, float2 ddy);
	__internal const T		SampleGradient	(SamplerState samp, float2 loc, float2 ddx, float2 ddy, int2 offset);
	__internal const T		SampleLOD		(SamplerState samp, float2 loc, float lod);
	__internal const T		SampleLOD		(SamplerState samp, float2 loc, float lod, int2 offset);
};

template<typedef T> struct Texture2D_Array {
	typedef	int3	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal const T		Gather			(SamplerState samp, float3 loc);
	__internal const T		Gather			(SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherRed		(SamplerState samp, float3 loc);
	__internal const T		GatherRed		(SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherRed		(SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherGreen		(SamplerState samp, float3 loc);
	__internal const T		GatherGreen		(SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherGreen		(SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherBlue		(SamplerState samp, float3 loc);
	__internal const T		GatherBlue		(SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherBlue		(SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherAlpha		(SamplerState samp, float3 loc);
	__internal const T		GatherAlpha		(SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherAlpha		(SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal T			GatherBias		(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBias		(SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasRed	(SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasGreen	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasGreen	(SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasGreen	(SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasBlue	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasBlue	(SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasBlue	(SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasAlpha	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasAlpha	(SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasAlpha	(SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal const T		GatherCmp		(SamplerComparisonState samp, float3 loc, float z);
	__internal const T		GatherCmp		(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherLOD		(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLOD		(SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODRed	(SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODGreen	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODGreen	(SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODGreen	(SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODBlue	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODBlue	(SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODBlue	(SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODAlpha	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODAlpha	(SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODAlpha	(SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal void			GetDimensions	(out float width, out float height, out float elements);
	__internal void			GetDimensions	(out uint width, out uint height, out uint elements);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float elements, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint elements, out uint mipCount);

	__internal const float GetLOD			(SamplerState samp, float3 loc);
	__internal const float GetLODUnclamped	(SamplerState samp, float3 loc);

	__internal const T		Load			(int3 loc);
	__internal const T		Load			(int3 loc, int2 offset);

	__internal const T		Sample			(SamplerState samp, float3 loc);
	__internal const T		Sample			(SamplerState samp, float3 loc, int2 offset);
	__internal const T		SampleBias		(SamplerState samp, float3 loc, float bias);
	__internal const T		SampleBias		(SamplerState samp, float3 loc, float bias, int2 offset);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal const T		SampleGradient	(SamplerState samp, float3 loc, float2 ddx, float2 ddy);
	__internal const T		SampleGradient	(SamplerState samp, float3 loc, float2 ddx, float2 ddy, int2 offset);
	__internal const T		SampleLOD		(SamplerState samp, float3 loc, float lod);
	__internal const T		SampleLOD		(SamplerState samp, float3 loc, float lod, int2 offset);
};

template<typedef T> struct TextureCube {
	__internal const T		Gather			(SamplerState samp, float3 loc);
	__internal const T		GatherRed		(SamplerState samp, float3 loc);
	__internal const T		GatherGreen		(SamplerState samp, float3 loc);
	__internal const T		GatherBlue		(SamplerState samp, float3 loc);
	__internal const T		GatherAlpha		(SamplerState samp, float3 loc);

	__internal T			GatherBias		(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasRed	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasGreen	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasBlue	(SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasAlpha	(SamplerState samp, float3 loc, float Bias);

	__internal const T		GatherCmp		(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float3 loc, float z);

	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float3 loc, float z);

	__internal T			GatherLOD		(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODRed	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODGreen	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODBlue	(SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODAlpha	(SamplerState samp, float3 loc, float lod);

	__internal void			GetDimensions	(out float width, out float height);
	__internal void			GetDimensions	(out uint width, out uint height);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float3 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float3 loc);

	__internal const T		Sample			(SamplerState samp, float3 loc);
	__internal const T		SampleBias		(SamplerState samp, float3 loc, float bias);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float3 loc, float z);
	__internal const T		SampleGradient	(SamplerState samp, float3 loc, float3 ddx, float3 ddy);
	__internal const T		SampleLOD		(SamplerState samp, float3 loc, float lod);
};

template<typedef T> struct TextureCube_Array {
	__internal const T		Gather			(SamplerState samp, float4 loc);
	__internal const T		GatherRed		(SamplerState samp, float4 loc);
	__internal const T		GatherGreen		(SamplerState samp, float4 loc);
	__internal const T		GatherBlue		(SamplerState samp, float4 loc);
	__internal const T		GatherAlpha		(SamplerState samp, float4 loc);

	__internal T			GatherBias		(SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float4 loc, float Bias);

	__internal const T		GatherCmp		(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpRed	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpGreen	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpBlue	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpAlpha	(SamplerComparisonState samp, float4 loc, float z);

	__internal T			GatherCmpLOD0		(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Red	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Green	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Blue	(SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(SamplerComparisonState samp, float4 loc, float z);

	__internal T			GatherLOD		(SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODRed	(SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODGreen	(SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODBlue	(SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODAlpha	(SamplerState samp, float4 loc, float lod);

	__internal void			GetDimensions	(out float width, out float height, out float elements);
	__internal void			GetDimensions	(out uint width, out uint height, out uint elements);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float elements, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint elements, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float4 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float4 loc);

	__internal const T		Sample			(SamplerState samp, float4 loc);
	__internal const T		SampleBias		(SamplerState samp, float4 loc, float bias);
	__internal const float	SampleCmp		(SamplerComparisonState samp, float4 loc, float z);
	__internal const float	SampleCmpLOD0	(SamplerComparisonState samp, float4 loc, float z);
	__internal const T		SampleGradient	(SamplerState samp, float4 loc, float3 ddx, float3 ddy);
	__internal const T		SampleLOD		(SamplerState samp, float4 loc, float lod);
};

template<typedef T> struct Texture3D {
	typedef	int3	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal void			GetDimensions	(out float width, out float height, out float depth);
	__internal void			GetDimensions	(out uint width, out uint height, out uint depth);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float depth, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint depth, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float a1);
	__internal const float	GetLODUnclamped	(SamplerState samp, float a1);

	__internal const T		Load			(int3 loc);
	__internal const T		Load			(int3 loc, int3 offset);

	__internal const T		Sample			(SamplerState samp, float3 loc);
	__internal const T		Sample			(SamplerState samp, float3 loc, int3 offset);
	__internal const T		SampleBias		(SamplerState samp, float3 loc, float bias);
	__internal const T		SampleBias		(SamplerState samp, float3 loc, float bias, int3 offset);
	__internal const T		SampleGradient	(SamplerState samp, float3 loc, float3 ddx, float3 ddy);
	__internal const T		SampleGradient	(SamplerState samp, float3 loc, float3 ddx, float3 ddy, int3 offset);
	__internal const T		SampleLOD		(SamplerState samp, float3 loc, float lod);
	__internal const T		SampleLOD		(SamplerState samp, float3 loc, float lod, int3 offset);
};

//	Sparse Textures
template<typedef T> struct Sparse_Texture1D {
	typedef	uint	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal void			GetDimensions	(out float width);
	__internal void			GetDimensions	(out uint width);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint mipCount);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint mipCount);

	__internal const float GetLOD			(SamplerState samp, float loc);
	__internal const float GetLODUnclamped	(SamplerState samp, float loc);

	__internal const T		Load			(int loc);
	__internal const T		Load			(int loc, int offset);

	__internal const T		Sample			(out uint status, SamplerState samp, float loc);
	__internal const T		Sample			(out uint status, SamplerState samp, float loc, int offset);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float loc, float bias);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float loc, float bias, int offset);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float loc, float z);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float loc, float z, int offset);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float loc, float z, int offset);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float loc, float ddx, float ddy);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float loc, float ddx, float ddy, int offset);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float loc, float lod);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float loc, float lod, int offset);
};

template<typedef T> struct Sparse_Texture1D_Array {
	typedef	uint2	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal void			GetDimensions	(out float width, out float elements);
	__internal void			GetDimensions	(out uint width, out uint elements);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float elements, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint elements, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float a1);
	__internal const float	GetLODUnclamped	(SamplerState samp, float a1);

	__internal const T		Load			(int2 loc);
	__internal const T		Load			(int2 loc, int offset);

	__internal const T		Sample			(out uint status, SamplerState samp, float2 loc);
	__internal const T		Sample			(out uint status, SamplerState samp, float2 loc, int offset);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float2 loc, float bias);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float2 loc, float bias, int offset);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z, int offset);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float2 loc, float z, int offset);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float2 loc, float ddx, float ddy);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float2 loc, float ddx, float ddy, int offset);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float2 loc, float lod);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float2 loc, float lod, int offset);
};

template<typedef T> struct Sparse_Texture2D {
	typedef	uint2	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal const T		Gather			(out uint status, SamplerState samp, float2 loc);
	__internal const T		Gather			(out uint status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float2 loc);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float2 loc);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float2 loc);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float2 loc);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float2 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal T			GatherBias		(uint out status, SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBias		(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float2 loc, float Bias);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float2 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float2 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float2 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherLOD		(uint out status, SamplerState samp, float2 loc, float lod);
	__internal T			GatherLOD		(uint out status, SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float2 loc, float lod);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float2 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal void			GetDimensions	(out float width, out float height);
	__internal void			GetDimensions	(out uint width, out uint height);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint mipCount);

	__internal const T		Load			(out uint status, int2 loc);
	__internal const T		Load			(out uint status, int2 loc, int2 offset);

	__internal const float	GetLOD			(SamplerState samp, float2 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float2 loc);

	__internal const T		Sample			(out uint status, SamplerState samp, float2 loc);
	__internal const T		Sample			(out uint status, SamplerState samp, float2 loc, int2 offset);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float2 loc, float bias);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float2 loc, float bias, int2 offset);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float2 loc, float2 ddx, float2 ddy);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float2 loc, float2 ddx, float2 ddy, int2 offset);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float2 loc, float lod);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float2 loc, float lod, int2 offset);
};

template<typedef T> struct Sparse_Texture2D_Array {
	typedef	uint3	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal const T		Gather			(out uint status, SamplerState samp, float3 loc);
	__internal const T		Gather			(out uint status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ); 
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ); 
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ); 
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float3 loc, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ); 

	__internal T			GatherBias		(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBias		(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float3 loc, float Bias, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z);
	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float2 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float3 loc, float z, int2 offsetX, int2 offsetY, int2 offsetZ, int2 offsetW);

	__internal T			GatherLOD		(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLOD		(uint out status, SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float3 loc, float lod, int2 offset, int2 offsetX, int2 offsetY, int2 offsetZ);

	__internal void			GetDimensions	(out float width, out float height, out float elements);
	__internal void			GetDimensions	(out uint width, out uint height, out uint elements);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float elements, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint elements, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float3 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float3 loc);

	__internal const T		Load			(int3 loc);
	__internal const T		Load			(int3 loc, int2 offset);

	__internal const T		Sample			(out uint status, SamplerState samp, float3 loc);
	__internal const T		Sample			(out uint status, SamplerState samp, float3 loc, int2 offset);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float3 loc, float bias);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float3 loc, float bias, int2 offset);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float3 loc, float z, int2 offset);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float3 loc, float2 ddx, float2 ddy);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float3 loc, float2 ddx, float2 ddy, int2 offset);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float3 loc, float lod);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float3 loc, float lod, int2 offset);
};

template<typedef T> struct Sparse_TextureCube {
	__internal const T		Gather			(out uint status, SamplerState samp, float3 loc);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float3 loc);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float3 loc);

	__internal T			GatherBias		(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float3 loc, float Bias);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float3 loc, float Bias);

	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float3 loc, float z);

	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float3 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float3 loc, float z);

	__internal T			GatherLOD		(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float3 loc, float lod);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float3 loc, float lod);

	__internal void			GetDimensions	(out float width, out float height);
	__internal void			GetDimensions	(out uint width, out uint height);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float3 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float3 loc);

	__internal const T		Sample			(out uint status, SamplerState samp, float3 loc);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float3 loc, float bias);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float3 loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float3 loc, float z);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float3 loc, float3 ddx, float3 ddy);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float3 loc, float lod);
};

template<typedef T> struct Sparse_TextureCube_Array {
	__internal const T		Gather			(out uint status, SamplerState samp, float4 loc);
	__internal const T		GatherRed		(uint out status, SamplerState samp, float4 loc);
	__internal const T		GatherGreen		(uint out status, SamplerState samp, float4 loc);
	__internal const T		GatherBlue		(uint out status, SamplerState samp, float4 loc);
	__internal const T		GatherAlpha		(uint out status, SamplerState samp, float4 loc);

	__internal T			GatherBias		(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasRed	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasGreen	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasBlue	(uint out status, SamplerState samp, float4 loc, float Bias);
	__internal T			GatherBiasAlpha	(uint out status, SamplerState samp, float4 loc, float Bias);

	__internal const T		GatherCmp		(out uint status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpRed	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpGreen	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpBlue	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpAlpha	(uint out status, SamplerComparisonState samp, float4 loc, float z);

	__internal T			GatherCmpLOD0		(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Red	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Green	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Blue	(uint out status, SamplerComparisonState samp, float4 loc, float z);
	__internal T			GatherCmpLOD0Alpha	(uint out status, SamplerComparisonState samp, float4 loc, float z);

	__internal T			GatherLOD		(uint out status, SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODRed	(uint out status, SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODGreen	(uint out status, SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODBlue	(uint out status, SamplerState samp, float4 loc, float lod);
	__internal T			GatherLODAlpha	(uint out status, SamplerState samp, float4 loc, float lod);

	__internal void			GetDimensions	(out float width, out float height, out float elements);
	__internal void			GetDimensions	(out uint width, out uint height, out uint elements);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float elements, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint elements, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float4 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float4 loc);

	__internal const T		Sample			(out uint status, SamplerState samp, float4 loc);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float4 loc, float bias);
	__internal const float	SampleCmp		(out uint status, SamplerComparisonState samp, float4 loc, float z);
	__internal const float	SampleCmpLOD0	(out uint status, SamplerComparisonState samp, float4 loc, float z);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float4 loc, float3 ddx, float3 ddy);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float4 loc, float lod);
};

template<typedef T> struct Sparse_Texture3D {
	typedef	uint3	Loc;
	struct _surface {
		const T		operator[](Loc loc);
	} MipMaps[];
	__internal const T		operator[](Loc loc);

	__internal void			GetDimensions	(out float width, out float height, out float depth);
	__internal void			GetDimensions	(out uint width, out uint height, out uint depth);
	__internal void			GetDimensions	(uint mipLevel, out float width, out float height, out float depth, out float mipCount);
	__internal void			GetDimensions	(uint mipLevel, out uint width, out uint height, out uint depth, out uint mipCount);

	__internal const float	GetLOD			(SamplerState samp, float3 loc);
	__internal const float	GetLODUnclamped	(SamplerState samp, float3 loc);

	__internal const T		Load			(int3 loc);
	__internal const T		Load			(int3 loc, int3 offset);

	__internal const T		Sample			(out uint status, SamplerState samp, float3 loc);
	__internal const T		Sample			(out uint status, SamplerState samp, float3 loc, int3 offset);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float3 loc, float bias);
	__internal const T		SampleBias		(out uint status, SamplerState samp, float3 loc, float bias, int3 offset);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float3 loc, float3 ddx, float3 ddy);
	__internal const T		SampleGradient	(out uint status, SamplerState samp, float3 loc, float3 ddx, float3 ddy, int3 offset);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float3 loc, float lod);
	__internal const T		SampleLOD		(out uint status, SamplerState samp, float3 loc, float lod, int3 offset);
};

//	RW Textures
template<typedef T> struct RW_Texture1D {
	typedef	uint	Loc;
	struct _surface {
		inout T		operator[](Loc loc);
	} MipMaps[];
	__internal inout T		operator[](Loc loc);

	__internal void			GetDimensions(out float width);
	__internal void			GetDimensions(out uint width);
};

template<typedef T> struct RW_Texture1D_Array {
	typedef	uint2	Loc;
	struct _surface {
		inout T		operator[](Loc loc);
	} MipMaps[];
	__internal inout T		operator[](Loc loc);

	__internal void			GetDimensions(out float width, out float elements);
	__internal void			GetDimensions(out uint width, out uint elements);
};

template<typedef T> struct RW_Texture2D {
	typedef	uint2	Loc;
	struct _surface {
		inout T		operator[](Loc loc);
	} MipMaps[];
	__internal inout T		operator[](Loc loc);

	__internal void			GetDimensions(out float width, out float height);
	__internal void			GetDimensions(out uint width, out uint height);
};

template<typedef T> struct RW_Texture2D_Array {
	typedef	uint3	Loc;
	struct _surface {
		inout T		operator[](Loc loc);
	} MipMaps[];
	__internal inout T		operator[](Loc loc);

	__internal void			GetDimensions(out float width, out float height, out float elements, out float samples);
	__internal void			GetDimensions(out uint width, out uint height, out uint elements, out uint samples);
};

template<typedef T> struct RW_Texture3D {
	typedef	uint3	Loc;
	struct _surface {
		inout T		operator[](Loc loc);
	} MipMaps[];
	__internal inout T		operator[](Loc loc);

	__internal void			GetDimensions(out float width, out float height, out float depth);
	__internal void			GetDimensions(out uint width, out uint height, out uint depth);
};

//	MS Textures
template<typedef T> struct MS_Texture2D {
	__internal void			GetDimensions(out float width, out float height, out float samples);
	__internal void			GetDimensions(out uint width, out uint height, out uint samples);
	__internal const float2	GetSamplePoint(int sampleIndex);
	__internal const T		Load(int2 loc, int sampleIndex);
	__internal const T		Load(int2 loc, int2 offset, int sampleIndex);
};

template<typedef T> struct MS_Texture2D_Array {
	__internal void			GetDimensions(out float width, out float height, out float elements, out float samples);
	__internal void			GetDimensions(out uint width, out uint height, out uint elements, out uint samples);
	__internal const float2	GetSamplePoint(int sampleIndex);
	__internal const T		Load(int3 loc, int sampleIndex);
	__internal const T		Load(int3 loc, int2 offset, int sampleIndex);
};
#endif

#ifdef PLAT_METAL
template<typedef T> struct Texture2D : _layout2D {
	typedef	uint2	Loc;
	__internal const vec<T,4>	operator[](Loc loc);
};
template<typedef T> struct RWTexture2D : _layout2D {
	typedef	uint2	Loc;
	__internal inout vec<T,4>	operator[](Loc loc);
};
#endif
